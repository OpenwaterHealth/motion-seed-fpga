
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.13.0.56.2

// ldbanno -n Verilog -o seed_driver_impl1_mapvo.vo -w -neg -gui -msgset C:/Project/Working/FPGA/HOME/Lattice/Seed_Driver/Rev_5/promote.xml seed_driver_impl1_map.ncd 
// Netlist created on Tue Apr 08 23:20:39 2025
// Netlist written on Tue Apr 08 23:20:41 2025
// Design is for device LCMXO2-2000HC
// Design is for package TQFP100
// Design is for performance grade 4

`timescale 1 ns / 1 ps

module top ( rstn, system_reset_n, clk_10mhz, seed_mod_mosi, seed_mod_sck, 
             seed_mod_ss, seed_laser_disable, seed_laser_en_led_n, 
             seed_adc_sdo1, seed_adc_sdo2, seed_adc_sck, seed_adc_convert, scl, 
             sda, seed_compared, over_current_shutdown_n, seed_dac_mosi, 
             seed_dac_ss, seed_dac_sck, seed_ldac_n, seed_reset_n, heartbeat_n, 
             mcu_gpio, seed_spare1, seed_spare2, seed_spare3, seed_spare4, 
             seed_gpio1, seed_gpio2, seed_gpio3, seed_gpio4, spare_led1_n, 
             spare_led2_n );
  input  rstn, system_reset_n, clk_10mhz, seed_adc_sdo1, seed_adc_sdo2, 
         seed_compared;
  output seed_mod_mosi, seed_mod_sck, seed_mod_ss, seed_laser_disable, 
         seed_laser_en_led_n, seed_adc_sck, seed_adc_convert, 
         over_current_shutdown_n, seed_dac_mosi, seed_dac_ss, seed_dac_sck, 
         seed_ldac_n, seed_reset_n, heartbeat_n, mcu_gpio, seed_spare1, 
         seed_spare2, seed_spare3, seed_spare4, seed_gpio1, seed_gpio2, 
         seed_gpio3, seed_gpio4, spare_led1_n, spare_led2_n;
  inout  scl, sda;
  wire   \i2c_slave_top/registers/n12633 , \i2c_slave_top/registers/n12631 , 
         \i2c_slave_top/registers/n9622 , 
         \i2c_slave_top/registers/addr_i_7_N_841_5 , 
         \i2c_slave_top/registers/addr_i_7_N_841_6 , 
         \i2c_slave_top/registers/n9623 , \i2c_slave_top/n12639 , 
         \i2c_slave_top/registers/n12628 , \i2c_slave_top/registers/n9621 , 
         \i2c_slave_top/registers/addr_i_7_N_841_3 , 
         \i2c_slave_top/registers/addr_i_7_N_841_4 , 
         \i2c_slave_top/registers/addr_i_2 , \i2c_slave_top/registers/n12637 , 
         \i2c_slave_top/registers/n9620 , 
         \i2c_slave_top/registers/addr_i_7_N_841_1 , 
         \i2c_slave_top/registers/addr_i_7_N_841_2 , \i2c_slave_top/n12641 , 
         \i2c_slave_top/registers/addr_i_7_N_841_0 , 
         \i2c_slave_top/registers/addr_i_7 , 
         \i2c_slave_top/registers/addr_i_7_N_841_7 , 
         \dds_gain_control/dac_count_2 , \dds_gain_control/dac_count_1 , 
         \dds_gain_control/n83 , \dds_gain_control/n84 , 
         \dds_gain_control/clk_10mhz_c_enable_229 , \dds_gain_control/n6197 , 
         clk_10mhz_c, \dds_gain_control/n9636 , \dds_gain_control/n9637 , 
         \dds_gain_control/dac_count_0 , \dds_gain_control/n85 , 
         \dds_gain_control/dds_current_limit_reg_14 , dds_gain_14, 
         \dds_gain_control/dds_current_limit_reg_13 , dds_gain_13, 
         \dds_gain_control/n9666 , \dds_gain_control/n9667 , 
         \dds_gain_control/dds_current_limit_reg_12 , dds_gain_12, 
         \dds_gain_control/dds_current_limit_reg_11 , dds_gain_11, 
         \dds_gain_control/n9665 , \dds_gain_control/dds_current_limit_reg_10 , 
         dds_gain_10, \dds_gain_control/dds_current_limit_reg_9 , dds_gain_9, 
         \dds_gain_control/n9664 , \dds_gain_control/dds_current_limit_reg_8 , 
         dds_gain_8, \dds_gain_control/dds_current_limit_reg_7 , dds_gain_7, 
         \dds_gain_control/n9663 , \dds_gain_control/dds_current_limit_reg_6 , 
         dds_gain_6, \dds_gain_control/dds_current_limit_reg_5 , dds_gain_5, 
         \dds_gain_control/n9662 , \dds_gain_control/cstate_0 , 
         \dds_gain_control/total_count_15 , \dds_gain_control/total_count_14 , 
         \dds_gain_control/n9634 , \dds_gain_control/total_count_15_N_1081_14 , 
         \dds_gain_control/total_count_15_N_1081_15 , 
         \dds_gain_control/total_count_13 , \dds_gain_control/total_count_12 , 
         \dds_gain_control/n9633 , \dds_gain_control/total_count_15_N_1081_12 , 
         \dds_gain_control/total_count_15_N_1081_13 , 
         \dds_gain_control/dds_current_limit_reg_4 , dds_gain_4, 
         \dds_gain_control/dds_current_limit_reg_3 , dds_gain_3, 
         \dds_gain_control/n9661 , \dds_gain_control/total_count_3 , 
         \dds_gain_control/total_count_2 , \dds_gain_control/n9628 , 
         \dds_gain_control/total_count_15_N_1081_2 , 
         \dds_gain_control/total_count_15_N_1081_3 , \dds_gain_control/n9629 , 
         \dds_gain_control/total_count_1 , \dds_gain_control/n6859 , 
         \dds_gain_control/total_count_0 , \dds_gain_control/n9627 , 
         \dds_gain_control/total_count_15_N_1081_0 , 
         \dds_gain_control/total_count_15_N_1081_1 , 
         \dds_gain_control/total_count_11 , \dds_gain_control/total_count_10 , 
         \dds_gain_control/n9632 , \dds_gain_control/total_count_15_N_1081_10 , 
         \dds_gain_control/total_count_15_N_1081_11 , 
         \dds_gain_control/dds_current_limit_reg_2 , dds_gain_2, 
         \dds_gain_control/dds_current_limit_reg_1 , dds_gain_1, 
         \dds_gain_control/n9660 , \dds_gain_control/dds_current_limit_reg_0 , 
         dds_gain_0, \dds_gain_control/cw_current_limit_reg_15 , cw_gain_15, 
         \dds_gain_control/n9659 , \dds_gain_control/n3252 , 
         \dds_gain_control/cw_current_limit_reg_14 , cw_gain_14, 
         \dds_gain_control/cw_current_limit_reg_13 , cw_gain_13, 
         \dds_gain_control/n9658 , \dds_gain_control/total_count_9 , 
         \dds_gain_control/total_count_8 , \dds_gain_control/n9631 , 
         \dds_gain_control/total_count_15_N_1081_8 , 
         \dds_gain_control/total_count_15_N_1081_9 , 
         \dds_gain_control/cw_current_limit_reg_12 , cw_gain_12, 
         \dds_gain_control/cw_current_limit_reg_11 , cw_gain_11, 
         \dds_gain_control/n9657 , \dds_gain_control/cw_current_limit_reg_10 , 
         cw_gain_10, \dds_gain_control/cw_current_limit_reg_9 , cw_gain_9, 
         \dds_gain_control/n9656 , \dds_gain_control/cw_current_limit_reg_8 , 
         cw_gain_8, \dds_gain_control/cw_current_limit_reg_7 , cw_gain_7, 
         \dds_gain_control/n9655 , \dds_gain_control/cw_current_limit_reg_6 , 
         cw_gain_6, \dds_gain_control/cw_current_limit_reg_5 , cw_gain_5, 
         \dds_gain_control/n9654 , \dds_gain_control/cw_current_limit_reg_4 , 
         cw_gain_4, \dds_gain_control/cw_current_limit_reg_3 , cw_gain_3, 
         \dds_gain_control/n9653 , \dds_gain_control/total_count_7 , 
         \dds_gain_control/total_count_6 , \dds_gain_control/n9630 , 
         \dds_gain_control/total_count_15_N_1081_6 , 
         \dds_gain_control/total_count_15_N_1081_7 , 
         \dds_gain_control/count_7 , \dds_gain_control/n9687 , 
         \dds_gain_control/n206 , \dds_gain_control/cw_current_limit_reg_2 , 
         cw_gain_2, \dds_gain_control/cw_current_limit_reg_1 , cw_gain_1, 
         \dds_gain_control/n9652 , \dds_gain_control/total_count_5 , 
         \dds_gain_control/total_count_4 , 
         \dds_gain_control/total_count_15_N_1081_4 , 
         \dds_gain_control/total_count_15_N_1081_5 , 
         \dds_gain_control/count_6 , \dds_gain_control/count_5 , 
         \dds_gain_control/n9686 , \dds_gain_control/n208 , 
         \dds_gain_control/n207 , \dds_gain_control/count_4 , 
         \dds_gain_control/count_3 , \dds_gain_control/n9685 , 
         \dds_gain_control/n210 , \dds_gain_control/n209 , 
         \dds_gain_control/count_2 , \dds_gain_control/count_1 , 
         \dds_gain_control/n9684 , \dds_gain_control/n212 , 
         \dds_gain_control/n211 , \dds_gain_control/count_0 , 
         \dds_gain_control/n213 , \dds_gain_control/cw_current_limit_reg_0 , 
         cw_gain_0, \dds_gain_control/dac_count_15 , \dds_gain_control/n70 , 
         \dds_gain_control/n9643 , \dds_gain_control/dac_count_14 , 
         \dds_gain_control/dac_count_13 , \dds_gain_control/n71 , 
         \dds_gain_control/n72 , \dds_gain_control/n9642 , 
         \dds_gain_control/dac_count_12 , \dds_gain_control/dac_count_11 , 
         \dds_gain_control/n73 , \dds_gain_control/n74 , 
         \dds_gain_control/n9641 , \dds_gain_control/dac_count_10 , 
         \dds_gain_control/dac_count_9 , \dds_gain_control/n75 , 
         \dds_gain_control/n76 , \dds_gain_control/n9640 , 
         \dds_gain_control/dac_count_8 , \dds_gain_control/dac_count_7 , 
         \dds_gain_control/n77 , \dds_gain_control/n78 , 
         \dds_gain_control/n9639 , \dds_gain_control/dac_count_6 , 
         \dds_gain_control/dac_count_5 , \dds_gain_control/n79 , 
         \dds_gain_control/n80 , \dds_gain_control/n9638 , 
         \dds_gain_control/dds_current_limit_reg_15 , dds_gain_15, n3233, 
         \dds_gain_control/dac_count_4 , \dds_gain_control/dac_count_3 , 
         \dds_gain_control/n81 , \dds_gain_control/n82 , \adc_control/count_7 , 
         \adc_control/n224 , \adc_control/adc_sck_temp_enable_72 , 
         \adc_control/n6163 , \adc_control/adc_sck_temp , \adc_control/n9695 , 
         \adc_control/count_6 , \adc_control/count_5 , \adc_control/n225 , 
         \adc_control/n226 , \adc_control/n9694 , \adc_control/count_4 , 
         \adc_control/count_3 , \adc_control/n227 , \adc_control/n228 , 
         \adc_control/n9693 , \adc_control/count_2 , \adc_control/count_1 , 
         \adc_control/n229 , \adc_control/n230 , \adc_control/n9692 , 
         \adc_control/count_0 , \adc_control/n231 , 
         \adc_control/convert_count_7 , \adc_control/n38 , 
         \adc_control/clk_10mhz_c_enable_255 , \adc_control/n6279 , 
         \adc_control/n9671 , \adc_control/convert_count_6 , 
         \adc_control/convert_count_5 , \adc_control/n39 , \adc_control/n40 , 
         \adc_control/n9670 , \adc_control/convert_count_4 , 
         \adc_control/convert_count_3 , \adc_control/n41 , \adc_control/n42 , 
         \adc_control/n9669 , \adc_control/convert_count_2 , 
         \adc_control/convert_count_1 , \adc_control/n43 , \adc_control/n44 , 
         \adc_control/n9668 , \adc_control/convert_count_0 , \adc_control/n45 , 
         \dds_control_interface/count_7 , \dds_control_interface/n9691 , 
         \dds_control_interface/count_7_N_1363_7 , 
         \dds_control_interface/count_6 , \dds_control_interface/count_5 , 
         \dds_control_interface/n9690 , 
         \dds_control_interface/count_7_N_1363_5 , 
         \dds_control_interface/count_7_N_1363_6 , 
         \dds_control_interface/count_4 , \dds_control_interface/count_3 , 
         \dds_control_interface/n9689 , 
         \dds_control_interface/count_7_N_1363_3 , 
         \dds_control_interface/count_7_N_1363_4 , 
         \dds_control_interface/count_2 , \dds_control_interface/count_1 , 
         \dds_control_interface/n9688 , 
         \dds_control_interface/count_7_N_1363_1 , 
         \dds_control_interface/count_7_N_1363_2 , 
         \dds_control_interface/count_0 , 
         \dds_control_interface/count_7_N_1363_0 , 
         \dds_control_interface/total_count_15 , \dds_control_interface/n9651 , 
         \dds_control_interface/total_count_15_N_1339_15 , 
         \dds_control_interface/total_count_14 , 
         \dds_control_interface/total_count_13 , \dds_control_interface/n9650 , 
         \dds_control_interface/total_count_15_N_1339_13 , 
         \dds_control_interface/total_count_15_N_1339_14 , 
         \dds_control_interface/total_count_12 , 
         \dds_control_interface/total_count_11 , \dds_control_interface/n9649 , 
         \dds_control_interface/total_count_15_N_1339_11 , 
         \dds_control_interface/total_count_15_N_1339_12 , 
         \dds_control_interface/total_count_10 , 
         \dds_control_interface/total_count_9 , \dds_control_interface/n9648 , 
         \dds_control_interface/total_count_15_N_1339_9 , 
         \dds_control_interface/total_count_15_N_1339_10 , 
         \dds_control_interface/total_count_8 , 
         \dds_control_interface/total_count_7 , \dds_control_interface/n9647 , 
         \dds_control_interface/total_count_15_N_1339_7 , 
         \dds_control_interface/total_count_15_N_1339_8 , 
         \dds_control_interface/total_count_6 , 
         \dds_control_interface/total_count_5 , \dds_control_interface/n9646 , 
         \dds_control_interface/total_count_15_N_1339_5 , 
         \dds_control_interface/total_count_15_N_1339_6 , 
         \dds_control_interface/total_count_4 , 
         \dds_control_interface/total_count_3 , \dds_control_interface/n9645 , 
         \dds_control_interface/total_count_15_N_1339_3 , 
         \dds_control_interface/total_count_15_N_1339_4 , 
         \dds_control_interface/total_count_2 , 
         \dds_control_interface/total_count_1 , \dds_control_interface/n9644 , 
         \dds_control_interface/total_count_15_N_1339_1 , 
         \dds_control_interface/total_count_15_N_1339_2 , 
         \dds_control_interface/total_count_0 , \dds_control_interface/n10305 , 
         \dds_control_interface/n10433 , 
         \dds_control_interface/total_count_15_N_1339_0 , 
         \heart_beat/prescale[15] , \heart_beat/n70 , \heart_beat/n9683 , 
         \heart_beat/n2_adj_1726 , \heart_beat/n3_adj_1725 , \heart_beat/n71 , 
         \heart_beat/n72 , \heart_beat/n9682 , \heart_beat/n4_adj_1728 , 
         \heart_beat/n5_adj_1727 , \heart_beat/n73 , \heart_beat/n74 , 
         \heart_beat/n9681 , \heart_beat/n6_adj_1730 , 
         \heart_beat/n7_adj_1729 , \heart_beat/n75 , \heart_beat/n76 , 
         \heart_beat/n9680 , \heart_beat/n8_adj_1731 , \heart_beat/n9 , 
         \heart_beat/n77 , \heart_beat/n78 , \heart_beat/n9679 , 
         \heart_beat/n10 , \heart_beat/n11 , \heart_beat/n79 , 
         \heart_beat/n80 , \heart_beat/n9678 , \heart_beat/n12 , 
         \heart_beat/n13 , \heart_beat/n81 , \heart_beat/n82 , 
         \heart_beat/n9677 , \heart_beat/n14 , \heart_beat/n15 , 
         \heart_beat/n83 , \heart_beat/n84 , \heart_beat/n9676 , 
         \heart_beat/n16 , \heart_beat/n85 , heartbeat_n_c_7, \heart_beat/n38 , 
         \heart_beat/n9675 , \heart_beat/n2 , \heart_beat/n3 , 
         \heart_beat/n39 , \heart_beat/n40 , \heart_beat/n9674 , 
         \heart_beat/n4 , \heart_beat/n5 , \heart_beat/n41 , \heart_beat/n42 , 
         \heart_beat/n9673 , \heart_beat/n6 , \heart_beat/n7 , 
         \heart_beat/n43 , \heart_beat/n44 , \heart_beat/n9672 , 
         \heart_beat/n8 , \heart_beat/n45 , state_1, state_0, state_3, state_2, 
         \adc_control/n12008 , \adc_control/clk_10mhz_c_enable_258 , 
         \adc_control/adc_sck_temp_enable_64 , \adc_control/capture_state_0 , 
         \adc_control/capture_state_1 , \adc_control/capture_state_2 , 
         \adc_control/n15 , \adc_control/n12563 , \adc_control/n9445 , 
         \adc_control/adc_sck_temp_enable_62 , \adc_control/capture_state_3 , 
         seed_adc_sdo1_c, \adc_control/adc_sck_temp_enable_4 , 
         \adc_control/current_data_0 , \adc_control/adc_sck_temp_enable_32 , 
         \adc_control/current_data_1 , \adc_control/adc_sck_temp_enable_31 , 
         \adc_control/current_data_2 , \adc_control/adc_sck_temp_enable_30 , 
         \adc_control/current_data_3 , \adc_control/adc_sck_temp_enable_29 , 
         \adc_control/current_data_4 , \adc_control/adc_sck_temp_enable_28 , 
         \adc_control/current_data_5 , \adc_control/adc_sck_temp_enable_27 , 
         \adc_control/current_data_6 , \adc_control/adc_sck_temp_enable_26 , 
         \adc_control/current_data_7 , \adc_control/adc_sck_temp_enable_25 , 
         \adc_control/current_data_8 , \adc_control/adc_sck_temp_enable_24 , 
         \adc_control/current_data_9 , \adc_control/adc_sck_temp_enable_23 , 
         \adc_control/current_data_10 , \adc_control/adc_sck_temp_enable_22 , 
         \adc_control/current_data_11 , \adc_control/adc_sck_temp_enable_21 , 
         \adc_control/current_data_12 , \adc_control/adc_sck_temp_enable_20 , 
         \adc_control/current_data_13 , \adc_control/n2040 , 
         \adc_control/clk_10mhz_c_enable_260 , \adc_control/data_ready , 
         \adc_control/sck_count_0 , \adc_control/sck_count_1 , 
         \adc_control/n24 , \adc_control/n25 , \adc_control/n6276 , 
         \adc_control/sck_count_3 , \adc_control/sck_count_2 , 
         \adc_control/n22 , \adc_control/n23 , seed_adc_sdo2_c, 
         \adc_control/voltage_data_0 , \adc_control/voltage_data_1 , 
         \adc_control/voltage_data_2 , \adc_control/voltage_data_3 , 
         \adc_control/voltage_data_4 , \adc_control/voltage_data_5 , 
         \adc_control/voltage_data_6 , \adc_control/voltage_data_7 , 
         \adc_control/voltage_data_8 , \adc_control/voltage_data_9 , 
         \adc_control/voltage_data_10 , \adc_control/voltage_data_11 , 
         \adc_control/voltage_data_12 , \adc_control/voltage_data_13 , 
         adc_current_data_0, adc_current_data_1, adc_current_data_2, 
         adc_current_data_3, adc_current_data_4, adc_current_data_5, 
         adc_current_data_6, adc_current_data_7, adc_current_data_8, 
         adc_current_data_9, adc_current_data_10, adc_current_data_11, 
         adc_current_data_12, adc_current_data_13, adc_current_data_14, 
         adc_current_data_15, adc_voltage_data_0, adc_voltage_data_1, 
         adc_voltage_data_2, adc_voltage_data_3, adc_voltage_data_4, 
         adc_voltage_data_5, adc_voltage_data_6, adc_voltage_data_7, 
         adc_voltage_data_8, adc_voltage_data_9, adc_voltage_data_10, 
         adc_voltage_data_11, adc_voltage_data_12, adc_voltage_data_13, 
         adc_voltage_data_14, adc_voltage_data_15, 
         \i2c_slave_top/registers/n12578 , \i2c_slave_top/registers/n5 , 
         \i2c_slave_top/n11391 , \i2c_slave_top/n11447 , 
         \i2c_slave_top/registers/control_15_N_539_3 , 
         \i2c_slave_top/registers/control_15_N_539_0 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_259 , control_0, 
         control_3, \i2c_slave_top/data_buffer_i_2 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i 
         , \i2c_slave_top/data_buffer_i_1 , \i2c_slave_top/n12571 , 
         \i2c_slave_top/n12594 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_141 , cw_current_limit_0, 
         cw_current_limit_1, \i2c_slave_top/data_buffer_i_4 , 
         \i2c_slave_top/data_buffer_i_3 , \i2c_slave_top/n12569 , 
         \i2c_slave_top/n12570 , cw_current_limit_2, cw_current_limit_3, 
         \i2c_slave_top/data_buffer_i_6 , \i2c_slave_top/data_buffer_i_5 , 
         \i2c_slave_top/n12567 , \i2c_slave_top/n12568 , cw_current_limit_4, 
         cw_current_limit_5, \i2c_slave_top/data_buffer_i_8 , 
         \i2c_slave_top/data_buffer_i_7 , \i2c_slave_top/n12603 , 
         \i2c_slave_top/n12566 , cw_current_limit_6, cw_current_limit_7, 
         \i2c_slave_top/registers/clk_10mhz_c_enable_149 , cw_current_limit_8, 
         cw_current_limit_9, cw_current_limit_10, cw_current_limit_11, 
         cw_current_limit_12, cw_current_limit_13, cw_current_limit_14, 
         cw_current_limit_15, \i2c_slave_top/registers/clk_10mhz_c_enable_126 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_134 , data_19, 
         \i2c_slave_top/registers/control_1 , data_23_N_925_19, data_16, n5979, 
         data_23_N_925_16, \dds_gain_control/state_3__N_882 , 
         \i2c_slave_top/n11569 , \i2c_slave_top/n11489 , 
         \i2c_slave_top/registers/control_15_N_539_2 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_96 , dds_control_0, 
         dds_control_1, dds_control_2, dds_control_3, dds_control_4, 
         dds_control_5, dds_control_6, dds_control_7, 
         \i2c_slave_top/registers/clk_10mhz_c_enable_104 , dds_control_8, 
         dds_control_9, dds_control_10, dds_control_11, dds_control_12, 
         dds_control_13, dds_control_14, dds_control_15, 
         \dds_control_interface/state_2 , \dds_control_interface/state_1 , 
         \dds_control_interface/n11 , \dds_control_interface/count_7_N_1276_1 , 
         \dds_control_interface/count_7_N_1276_0 , 
         \dds_control_interface/state_3__N_1254 , 
         \dds_control_interface/count_7__N_1284 , 
         \dds_control_interface/count_7_N_1276_3 , 
         \dds_control_interface/count_7_N_1276_2 , 
         \dds_control_interface/count_7_N_1276_5 , 
         \dds_control_interface/count_7_N_1276_4 , 
         \dds_control_interface/count_7_N_1276_7 , 
         \dds_control_interface/count_7_N_1276_6 , 
         \dds_control_interface/cstate_1 , \dds_control_interface/cstate_0 , 
         \dds_control_interface/n12050 , 
         \dds_control_interface/clk_10mhz_c_enable_233 , 
         \dds_control_interface/n3921 , \dds_control_interface/n46 , 
         \dds_control_interface/cstate_2 , \dds_control_interface/n7021 , 
         \dds_control_interface/n40 , \dds_control_interface/n12046 , 
         \dds_control_interface/n1772 , \dds_control_interface/n12585 , 
         \dds_control_interface/n12608 , \dds_control_interface/index_1 , 
         \dds_control_interface/index_2 , \dds_control_interface/n533 , 
         \dds_control_interface/n532 , 
         \dds_control_interface/clk_10mhz_c_enable_74 , 
         \dds_control_interface/n12627 , \dds_control_interface/data_0 , 
         \dds_control_interface/data_1 , \dds_control_interface/n535 , 
         \dds_control_interface/n534 , \dds_control_interface/data_2 , 
         \dds_control_interface/data_3 , \dds_control_interface/n12624 , 
         \dds_control_interface/n12625 , \dds_control_interface/n12626 , 
         \dds_control_interface/n10177 , \dds_control_interface/n536 , 
         \dds_control_interface/data_4 , \dds_control_interface/data_5 , 
         \dds_control_interface/n539 , \dds_control_interface/n538 , 
         \dds_control_interface/data_6 , \dds_control_interface/data_7 , 
         \dds_control_interface/n541 , \dds_control_interface/n540 , 
         \dds_control_interface/data_8 , \dds_control_interface/data_9 , 
         \dds_control_interface/test_run , 
         \dds_control_interface/transfer_completed_temp_d , 
         \dds_control_interface/n543 , \dds_control_interface/n542 , 
         \dds_control_interface/data_10 , \dds_control_interface/data_11 , 
         \dds_control_interface/n545 , \dds_control_interface/n544 , 
         \dds_control_interface/data_12 , \dds_control_interface/data_13 , 
         \dds_control_interface/n547 , \dds_control_interface/n546 , 
         \dds_control_interface/data_14 , \dds_control_interface/data_15 , 
         \dds_control_interface/data_temp_1 , 
         \dds_control_interface/data_temp_15_N_1285_2 , 
         \dds_control_interface/data_temp_15_N_1285_1 , 
         \dds_control_interface/data_temp_15__N_1301 , 
         \dds_control_interface/data_temp_2 , 
         \dds_control_interface/data_temp_3 , 
         \dds_control_interface/data_temp_15_N_1285_4 , 
         \dds_control_interface/data_temp_15_N_1285_3 , 
         \dds_control_interface/data_temp_4 , 
         \dds_control_interface/data_temp_5 , 
         \dds_control_interface/data_temp_15_N_1285_6 , 
         \dds_control_interface/data_temp_15_N_1285_5 , 
         \dds_control_interface/data_temp_6 , 
         \dds_control_interface/data_temp_7 , 
         \dds_control_interface/data_temp_15_N_1285_8 , 
         \dds_control_interface/data_temp_15_N_1285_7 , 
         \dds_control_interface/data_temp_8 , 
         \dds_control_interface/data_temp_9 , 
         \dds_control_interface/data_temp_15_N_1285_10 , 
         \dds_control_interface/data_temp_15_N_1285_9 , 
         \dds_control_interface/data_temp_10 , 
         \dds_control_interface/data_temp_11 , 
         \dds_control_interface/data_temp_15_N_1285_12 , 
         \dds_control_interface/data_temp_15_N_1285_11 , 
         \dds_control_interface/data_temp_12 , 
         \dds_control_interface/data_temp_13 , 
         \dds_control_interface/data_temp_15_N_1285_14 , 
         \dds_control_interface/data_temp_15_N_1285_13 , 
         \dds_control_interface/data_temp_14 , 
         \dds_control_interface/data_temp_15_N_1285_15 , 
         \dds_control_interface/data_temp_15 , \dds_control_interface/index_0 , 
         \dds_control_interface/data_valid_N_1436 , 
         \dds_control_interface/clk_10mhz_c_enable_9 , 
         \dds_control_interface/data_valid , \dds_control_interface/n19 , 
         \dds_control_interface/n9783 , 
         \dds_control_interface/clk_10mhz_c_enable_230 , 
         \dds_control_interface/n18 , \dds_control_interface/ss0_temp_d , 
         \dds_control_interface/ss0_temp_d_N_1447 , 
         \dds_control_interface/ss0_temp , \dds_control_interface/mosi_reset , 
         \dds_control_interface/n9734 , \dds_control_interface/n10303 , 
         \dds_control_interface/sck_temp , \dds_control_interface/n11014 , 
         \dds_control_interface/clk_10mhz_c_enable_262 , 
         \dds_control_interface/sck_temp2 , \dds_control_interface/n12619 , 
         \dds_control_interface/ss0_temp_dd , 
         \dds_control_interface/ss0_temp2 , \dds_control_interface/n12646 , 
         \dds_control_interface/n12605 , 
         \dds_control_interface/state_3__N_1257 , static_control_7, 
         \dds_control_interface/clk_10mhz_c_enable_59 , 
         \dds_control_interface/test_mode_d , \dds_control_interface/n4260 , 
         \dds_control_interface/n9_adj_1746 , 
         \dds_control_interface/n9_adj_1735 , 
         \dds_control_interface/total_count_15_N_1319_1 , 
         \dds_control_interface/total_count_15_N_1319_0 , 
         \dds_control_interface/n9_adj_1744 , 
         \dds_control_interface/n9_adj_1745 , 
         \dds_control_interface/total_count_15_N_1319_3 , 
         \dds_control_interface/total_count_15_N_1319_2 , 
         \dds_control_interface/n9_adj_1741 , 
         \dds_control_interface/n9_adj_1743 , 
         \dds_control_interface/total_count_15_N_1319_5 , 
         \dds_control_interface/total_count_15_N_1319_4 , 
         \dds_control_interface/n9_adj_1739 , 
         \dds_control_interface/n9_adj_1740 , 
         \dds_control_interface/total_count_15_N_1319_7 , 
         \dds_control_interface/total_count_15_N_1319_6 , 
         \dds_control_interface/n9_adj_1733 , 
         \dds_control_interface/n9_adj_1734 , 
         \dds_control_interface/total_count_15_N_1319_9 , 
         \dds_control_interface/total_count_15_N_1319_8 , 
         \dds_control_interface/n9 , \dds_control_interface/n9_adj_1732 , 
         \dds_control_interface/total_count_15_N_1319_11 , 
         \dds_control_interface/total_count_15_N_1319_10 , 
         \dds_control_interface/n9_adj_1738 , 
         \dds_control_interface/n9_adj_1742 , 
         \dds_control_interface/total_count_15_N_1319_13 , 
         \dds_control_interface/total_count_15_N_1319_12 , 
         \dds_control_interface/n9_adj_1736 , 
         \dds_control_interface/n9_adj_1737 , 
         \dds_control_interface/total_count_15_N_1319_15 , 
         \dds_control_interface/total_count_15_N_1319_14 , 
         \dds_control_interface/clk_10mhz_c_enable_8 , 
         \dds_control_interface/transfer_completed_temp , \n12948\000/BUF1 , 
         \dds_control_interface/clk_10mhz_c_enable_223 , 
         \dds_control_interface/transfer_done , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_214 , dds_current_limit_0, 
         dds_current_limit_1, dds_current_limit_2, dds_current_limit_3, 
         dds_current_limit_4, dds_current_limit_5, dds_current_limit_6, 
         dds_current_limit_7, \i2c_slave_top/registers/clk_10mhz_c_enable_222 , 
         dds_current_limit_8, dds_current_limit_9, dds_current_limit_10, 
         dds_current_limit_11, dds_current_limit_12, dds_current_limit_13, 
         dds_current_limit_14, dds_current_limit_15, 
         \i2c_slave_top/registers/clk_10mhz_c_enable_111 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_119 , 
         \dds_gain_control/n9264 , \dds_gain_control/count_7_N_1141_1 , 
         \dds_gain_control/count_7_N_1141_0 , 
         \dds_gain_control/seed_spare1_c_enable_20 , seed_spare1_c, 
         \dds_gain_control/count_7_N_1141_3 , 
         \dds_gain_control/count_7_N_1141_2 , 
         \dds_gain_control/count_7_N_1141_5 , 
         \dds_gain_control/count_7_N_1141_4 , 
         \dds_gain_control/count_7_N_1141_7 , 
         \dds_gain_control/count_7_N_1141_6 , \dds_gain_control/data_20 , 
         \dds_gain_control/n4618 , \dds_gain_control/n12620 , 
         \dds_gain_control/clk_10mhz_c_enable_232 , \dds_gain_control/n3915 , 
         \dds_gain_control/cstate_1 , \dds_gain_control/n12542 , 
         \dds_gain_control/cstate_2 , \dds_gain_control/n11657 , 
         \dds_gain_control/clk_10mhz_c_enable_251 , 
         \dds_gain_control/cw_gain_reg_0 , \dds_gain_control/cw_gain_reg_1 , 
         \dds_gain_control/cw_gain_reg_2 , \dds_gain_control/cw_gain_reg_3 , 
         \dds_gain_control/cw_gain_reg_4 , \dds_gain_control/cw_gain_reg_5 , 
         \dds_gain_control/cw_gain_reg_6 , \dds_gain_control/cw_gain_reg_7 , 
         \dds_gain_control/cw_gain_reg_8 , \dds_gain_control/cw_gain_reg_9 , 
         \dds_gain_control/cw_gain_reg_10 , \dds_gain_control/cw_gain_reg_11 , 
         \dds_gain_control/cw_gain_reg_12 , \dds_gain_control/cw_gain_reg_13 , 
         \dds_gain_control/cw_gain_reg_14 , \dds_gain_control/cw_gain_reg_15 , 
         \dds_gain_control/dac_state_1 , \dds_gain_control/n50 , 
         \dds_gain_control/n5540 , \dds_gain_control/n12543 , 
         \dds_gain_control/clk_10mhz_c_enable_265 , \dds_gain_control/n6870 , 
         \dds_gain_control/dac_state_0 , \dds_gain_control/n11373 , 
         \dds_gain_control/n11375 , \dds_gain_control/n11367 , 
         \dds_gain_control/n11383 , \dds_gain_control/n8 , 
         \dds_gain_control/n3609 , \dds_gain_control/n6840 , 
         \dds_gain_control/dac_state_2 , \dds_gain_control/n12946 , 
         \dds_gain_control/n10966 , \dds_gain_control/dds_gain_reg_1 , 
         \dds_gain_control/dds_gain_reg_0 , \dds_gain_control/data_23_N_925_1 , 
         \dds_gain_control/data_23_N_925_0 , clk_10mhz_c_enable_54, 
         \dds_gain_control/data_0 , \dds_gain_control/data_1 , 
         \dds_gain_control/dds_gain_reg_3 , \dds_gain_control/dds_gain_reg_2 , 
         \dds_gain_control/data_23_N_925_3 , 
         \dds_gain_control/data_23_N_925_2 , \dds_gain_control/data_2 , 
         \dds_gain_control/data_3 , \dds_gain_control/dds_gain_reg_5 , 
         \dds_gain_control/dds_gain_reg_4 , \dds_gain_control/data_23_N_925_5 , 
         \dds_gain_control/data_23_N_925_4 , \dds_gain_control/data_4 , 
         \dds_gain_control/data_5 , \dds_gain_control/dds_gain_reg_7 , 
         \dds_gain_control/dds_gain_reg_6 , \dds_gain_control/data_23_N_925_7 , 
         \dds_gain_control/data_23_N_925_6 , \dds_gain_control/data_6 , 
         \dds_gain_control/data_7 , \dds_gain_control/dds_gain_reg_9 , 
         \dds_gain_control/dds_gain_reg_8 , \dds_gain_control/data_23_N_925_9 , 
         \dds_gain_control/data_23_N_925_8 , \dds_gain_control/data_8 , 
         \dds_gain_control/data_9 , \dds_gain_control/dds_gain_reg_11 , 
         \dds_gain_control/dds_gain_reg_10 , 
         \dds_gain_control/data_23_N_925_11 , 
         \dds_gain_control/data_23_N_925_10 , \dds_gain_control/data_10 , 
         \dds_gain_control/data_11 , \dds_gain_control/dds_gain_reg_13 , 
         \dds_gain_control/dds_gain_reg_12 , 
         \dds_gain_control/data_23_N_925_13 , 
         \dds_gain_control/data_23_N_925_12 , \dds_gain_control/data_12 , 
         \dds_gain_control/data_13 , \dds_gain_control/dds_gain_reg_15 , 
         \dds_gain_control/dds_gain_reg_14 , 
         \dds_gain_control/data_23_N_925_15 , 
         \dds_gain_control/data_23_N_925_14 , \dds_gain_control/data_14 , 
         \dds_gain_control/data_15 , \n12948\001/BUF1 , 
         \dds_gain_control/spi_ready , \dds_gain_control/data_ready_d , 
         \dds_gain_control/data_temp_17 , \dds_gain_control/state_2 , 
         \dds_gain_control/state_1 , seed_spare3_c, \dds_gain_control/n10379 , 
         \dds_gain_control/n10913 , \dds_gain_control/seed_spare1_c_enable_34 , 
         \dds_gain_control/data_temp_1 , \dds_gain_control/data_temp_18 , 
         \dds_gain_control/n10221 , \dds_gain_control/data_temp_2 , 
         \dds_gain_control/n10223 , \dds_gain_control/data_temp_3 , 
         \dds_gain_control/n10225 , \dds_gain_control/data_temp_4 , 
         \dds_gain_control/n10227 , \dds_gain_control/data_temp_5 , 
         \dds_gain_control/n10229 , \dds_gain_control/data_temp_6 , 
         \dds_gain_control/n10231 , \dds_gain_control/data_temp_7 , 
         \dds_gain_control/n10233 , \dds_gain_control/data_temp_8 , 
         \dds_gain_control/n10235 , \dds_gain_control/data_temp_9 , 
         \dds_gain_control/n10237 , \dds_gain_control/data_temp_10 , 
         \dds_gain_control/n10239 , \dds_gain_control/data_temp_11 , 
         \dds_gain_control/n10241 , \dds_gain_control/data_temp_12 , 
         \dds_gain_control/n10243 , \dds_gain_control/data_temp_13 , 
         \dds_gain_control/n10245 , \dds_gain_control/data_temp_14 , 
         \dds_gain_control/n10247 , \dds_gain_control/data_temp_15 , 
         \dds_gain_control/n10249 , \dds_gain_control/data_temp_16 , 
         \dds_gain_control/n10217 , \dds_gain_control/data_temp_23_N_1109_22 , 
         \dds_gain_control/data_temp_20 , \dds_gain_control/n6250 , 
         \dds_gain_control/n10380 , \dds_gain_control/data_temp_19 , 
         \dds_gain_control/data_temp_21 , \dds_gain_control/n10219 , 
         \dds_gain_control/data_temp_22 , \dds_gain_control/n10376 , 
         \dds_gain_control/n6252 , \dds_gain_control/data_temp_23 , 
         clk_10mhz_c_enable_89, \dds_gain_control/clk_10mhz_c_enable_2 , 
         \dds_gain_control/n12558 , \dds_gain_control/n6271 , 
         \dds_gain_control/seed_spare1_c_enable_29 , \dds_gain_control/n17 , 
         \dds_gain_control/n12645 , \dds_gain_control/total_count_15_N_1013_1 , 
         \dds_gain_control/total_count_15_N_1013_0 , 
         \dds_gain_control/total_count_15_N_1013_3 , 
         \dds_gain_control/total_count_15_N_1013_2 , 
         \dds_gain_control/total_count_15_N_1013_5 , 
         \dds_gain_control/total_count_15_N_1013_4 , 
         \dds_gain_control/total_count_15_N_1013_7 , 
         \dds_gain_control/total_count_15_N_1013_6 , 
         \dds_gain_control/total_count_15_N_1013_9 , 
         \dds_gain_control/total_count_15_N_1013_8 , 
         \dds_gain_control/total_count_15_N_1013_11 , 
         \dds_gain_control/total_count_15_N_1013_10 , 
         \dds_gain_control/total_count_15_N_1013_13 , 
         \dds_gain_control/total_count_15_N_1013_12 , 
         \dds_gain_control/total_count_15_N_1013_15 , 
         \dds_gain_control/total_count_15_N_1013_14 , 
         \i2c_slave_top/registers/clk_N_1433_enable_8 , 
         \i2c_slave_top/addr_start_0 , \i2c_slave_top/addr_start_1 , 
         \i2c_slave_top/addr_start_2 , \i2c_slave_top/addr_start_3 , 
         \i2c_slave_top/addr_start_4 , \i2c_slave_top/addr_start_5 , 
         \i2c_slave_top/addr_start_6 , \i2c_slave_top/addr_start_7 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12629 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10669 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_3 
         , \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12597 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10666 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_12 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12642 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10665 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_10 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12643 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12636 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10671 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_9 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10667 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10664 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_7 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10670 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_6 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9701 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10356 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12576 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12634 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10668 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_5 
         , \i2c_slave_top/registers/n2273 , \i2c_slave_top/registers/n11940 , 
         \i2c_slave_top/registers/n2357 , \i2c_slave_top/registers/n11913 , 
         \i2c_slave_top/registers/n2397 , \i2c_slave_top/registers/n2378 , 
         \i2c_slave_top/registers/n6165 , \i2c_slave_top/data_out_0 , 
         \i2c_slave_top/registers/n2269 , \i2c_slave_top/registers/n12470 , 
         \i2c_slave_top/registers/n2356 , \i2c_slave_top/registers/n11916 , 
         \i2c_slave_top/registers/n2396 , \i2c_slave_top/data_out_1 , 
         \i2c_slave_top/registers/n2268 , \i2c_slave_top/registers/n12466 , 
         \i2c_slave_top/registers/n2355 , \i2c_slave_top/registers/n11919 , 
         \i2c_slave_top/registers/n2395 , \i2c_slave_top/data_out_2 , 
         \i2c_slave_top/registers/n2267 , \i2c_slave_top/registers/n12463 , 
         \i2c_slave_top/registers/n2354 , \i2c_slave_top/registers/n11922 , 
         \i2c_slave_top/registers/n2394 , \i2c_slave_top/data_out_3 , 
         \i2c_slave_top/registers/n11982 , \i2c_slave_top/registers/n2353 , 
         \i2c_slave_top/registers/n11925 , \i2c_slave_top/registers/n2393 , 
         \i2c_slave_top/data_out_4 , \i2c_slave_top/registers/n11985 , 
         \i2c_slave_top/registers/n2352 , \i2c_slave_top/registers/n11928 , 
         \i2c_slave_top/registers/n2392 , \i2c_slave_top/data_out_5 , 
         \i2c_slave_top/registers/n11988 , \i2c_slave_top/registers/n2351 , 
         \i2c_slave_top/registers/n11931 , \i2c_slave_top/registers/n2391 , 
         \i2c_slave_top/data_out_6 , \i2c_slave_top/registers/n11991 , 
         \i2c_slave_top/registers/n2350 , \i2c_slave_top/registers/n11934 , 
         \i2c_slave_top/registers/n2390 , \i2c_slave_top/data_out_7 , scl_out, 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_N_73 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 , 
         sda_out, 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_N_73 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_N_71 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11713 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11711 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11887 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7232 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_N_343 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12615 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12580 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12612 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5972 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3569 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3435 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12616 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_11 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6119 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3433 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3434 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_2 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3408 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3420 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3432 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_4 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12622 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11883 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9829 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12472 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n389 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10903 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10604 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10436 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1_adj_1781 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_134 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12582 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10948 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11751 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10007 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4758 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 
         , \i2c_slave_top/state_1_N_839_0 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_0 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_2 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_3 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_4 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_5 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_6 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 , 
         \n12948\002/BUF1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i_N_418 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done 
         , \i2c_slave_top/i2cslave_controller_top/out_n__inv , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect_i_N_340 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_350 
         , reset_n, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3913 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12549 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10574 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11129 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10398 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_353 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12012 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12589 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4256 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i 
         , \i2c_slave_top/i2cslave_controller_top/i_sda , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12556 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_309 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_305 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11157 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_285 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_306 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12564 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4762 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12586 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg1_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg2_i 
         , \i2c_slave_top/registers/byte_cnt_0 , 
         \i2c_slave_top/registers/byte_cnt_1 , 
         \i2c_slave_top/registers/state_1 , \i2c_slave_top/registers/n12009 , 
         \i2c_slave_top/registers/state_0 , \i2c_slave_top/n12573 , 
         \i2c_slave_top/registers/data_vld_dly , \i2c_slave_top/n11475 , 
         \i2c_slave_top/n11503 , \i2c_slave_top/registers/control_15_N_539_4 , 
         \i2c_slave_top/registers/control_15_N_539_1 , 
         \i2c_slave_top/registers/control_4 , \i2c_slave_top/n11517 , 
         \i2c_slave_top/n11405 , \i2c_slave_top/registers/control_15_N_539_6 , 
         \i2c_slave_top/registers/control_15_N_539_5 , 
         \i2c_slave_top/registers/control_5 , 
         \i2c_slave_top/registers/control_6 , \i2c_slave_top/n11527 , 
         \i2c_slave_top/n11601 , \i2c_slave_top/registers/control_15_N_539_7 , 
         \i2c_slave_top/registers/control_7 , \i2c_slave_top/n11559 , 
         \i2c_slave_top/n11587 , \i2c_slave_top/registers/control_15_N_539_9 , 
         \i2c_slave_top/registers/control_15_N_539_8 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_190 , 
         \i2c_slave_top/registers/control_8 , 
         \i2c_slave_top/registers/control_9 , \i2c_slave_top/n11419 , 
         \i2c_slave_top/n11573 , \i2c_slave_top/registers/control_15_N_539_11 , 
         \i2c_slave_top/registers/control_15_N_539_10 , 
         \i2c_slave_top/registers/control_10 , 
         \i2c_slave_top/registers/control_11 , \i2c_slave_top/n11545 , 
         \i2c_slave_top/n11461 , \i2c_slave_top/registers/control_15_N_539_13 , 
         \i2c_slave_top/registers/control_15_N_539_12 , 
         \i2c_slave_top/registers/control_12 , 
         \i2c_slave_top/registers/control_13 , \i2c_slave_top/n11513 , 
         \i2c_slave_top/n11433 , \i2c_slave_top/registers/control_15_N_539_14 , 
         \i2c_slave_top/registers/control_14 , 
         \i2c_slave_top/registers/count_0 , \i2c_slave_top/registers/count_1 , 
         \i2c_slave_top/registers/n24 , \i2c_slave_top/registers/n25 , 
         \i2c_slave_top/registers/count_3__N_643 , 
         \i2c_slave_top/registers/n566 , \i2c_slave_top/registers/count_3 , 
         \i2c_slave_top/registers/count_2 , \i2c_slave_top/registers/n22 , 
         \i2c_slave_top/registers/n23 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_171 , 
         \i2c_slave_top/registers/cw_mon_current_limit , 
         \i2c_slave_top/registers/cw_mon_current_limit_1 , 
         \i2c_slave_top/registers/cw_mon_current_limit_2 , 
         \i2c_slave_top/registers/cw_mon_current_limit_3 , 
         \i2c_slave_top/registers/cw_mon_current_limit_4 , 
         \i2c_slave_top/registers/cw_mon_current_limit_5 , 
         \i2c_slave_top/registers/cw_mon_current_limit_6 , 
         \i2c_slave_top/registers/cw_mon_current_limit_7 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_179 , 
         \i2c_slave_top/registers/cw_mon_current_limit_8 , 
         \i2c_slave_top/registers/cw_mon_current_limit_9 , 
         \i2c_slave_top/registers/cw_mon_current_limit_10 , 
         \i2c_slave_top/registers/cw_mon_current_limit_11 , 
         \i2c_slave_top/registers/cw_mon_current_limit_12 , 
         \i2c_slave_top/registers/cw_mon_current_limit_13 , 
         \i2c_slave_top/registers/cw_mon_current_limit_14 , 
         \i2c_slave_top/registers/cw_mon_current_limit_15 , 
         \i2c_slave_top/n12607 , \i2c_slave_top/registers/data_vld_cnt , 
         \i2c_slave_top/n12593 , \i2c_slave_top/registers/data_vld_cnt_N_871 , 
         \i2c_slave_top/registers/n12591 , \i2c_slave_top/registers/n11673 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_156 , 
         \i2c_slave_top/registers/dds_mon_current_limit , 
         \i2c_slave_top/registers/dds_mon_current_limit_1 , 
         \i2c_slave_top/registers/dds_mon_current_limit_2 , 
         \i2c_slave_top/registers/dds_mon_current_limit_3 , 
         \i2c_slave_top/registers/dds_mon_current_limit_4 , 
         \i2c_slave_top/registers/dds_mon_current_limit_5 , 
         \i2c_slave_top/registers/dds_mon_current_limit_6 , 
         \i2c_slave_top/registers/dds_mon_current_limit_7 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_164 , 
         \i2c_slave_top/registers/dds_mon_current_limit_8 , 
         \i2c_slave_top/registers/dds_mon_current_limit_9 , 
         \i2c_slave_top/registers/dds_mon_current_limit_10 , 
         \i2c_slave_top/registers/dds_mon_current_limit_11 , 
         \i2c_slave_top/registers/dds_mon_current_limit_12 , 
         \i2c_slave_top/registers/dds_mon_current_limit_13 , 
         \i2c_slave_top/registers/dds_mon_current_limit_14 , 
         \i2c_slave_top/registers/dds_mon_current_limit_15 , \n12948\003/BUF1 , 
         \i2c_slave_top/addr_i_7__N_628 , \i2c_slave_top/addr_i_7__N_596 , 
         \i2c_slave_top/registers/n6121 , \i2c_slave_top/registers/n12600 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12640 , 
         \i2c_slave_top/registers/n5715 , \i2c_slave_top/registers/n12030 , 
         \i2c_slave_top/registers/n6122 , n12948, 
         \i2c_slave_top/addr_i_7__N_625 , \i2c_slave_top/addr_i_7__N_595 , 
         \i2c_slave_top/registers/n6125 , \i2c_slave_top/registers/n5810 , 
         \i2c_slave_top/registers/n6126 , \n12948\009/BUF1 , 
         \i2c_slave_top/addr_i_7__N_622 , \i2c_slave_top/addr_i_7__N_594 , 
         \i2c_slave_top/registers/n6129 , \i2c_slave_top/registers/n5814 , 
         \i2c_slave_top/registers/n6130 , \n12948\008/BUF1 , 
         \i2c_slave_top/addr_i_7__N_619 , \i2c_slave_top/addr_i_7__N_593 , 
         \i2c_slave_top/registers/n6133 , \i2c_slave_top/registers/n5818 , 
         \i2c_slave_top/registers/n6134 , \n12948\007/BUF1 , 
         \i2c_slave_top/addr_i_7__N_616 , \i2c_slave_top/addr_i_7__N_592 , 
         \i2c_slave_top/registers/n6137 , \i2c_slave_top/registers/n5822 , 
         \i2c_slave_top/registers/n6138 , \n12948\006/BUF1 , 
         \i2c_slave_top/addr_i_7__N_613 , \i2c_slave_top/addr_i_7__N_591 , 
         \i2c_slave_top/registers/n6141 , \i2c_slave_top/registers/n5826 , 
         \i2c_slave_top/registers/n6142 , \n12948\005/BUF1 , 
         \i2c_slave_top/addr_i_7__N_610 , \i2c_slave_top/addr_i_7__N_590 , 
         \i2c_slave_top/registers/n6145 , \i2c_slave_top/registers/n5830 , 
         \i2c_slave_top/registers/n6146 , \n12948\004/BUF1 , 
         \i2c_slave_top/addr_i_7__N_597 , \i2c_slave_top/addr_i_7__N_587 , 
         \i2c_slave_top/registers/n6149 , \i2c_slave_top/registers/n5834 , 
         \i2c_slave_top/registers/n6150 , 
         \i2c_slave_top/registers/state_1_N_633_0 , 
         \i2c_slave_top/registers/data_vld_dly_enable_1 , 
         \i2c_slave_top/registers/state_1_N_633_1 , 
         \i2c_slave_top/registers/data_vld_dly_enable_3 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_197 , 
         \i2c_slave_top/registers/static_control_1 , 
         \i2c_slave_top/registers/static_control_2 , 
         \i2c_slave_top/registers/static_control_3 , 
         \i2c_slave_top/registers/static_control_4 , 
         \i2c_slave_top/registers/static_control_5 , 
         \i2c_slave_top/registers/static_control_6 , 
         \i2c_slave_top/registers/clk_10mhz_c_enable_205 , 
         \i2c_slave_top/registers/static_control_8 , 
         \i2c_slave_top/registers/static_control_9 , 
         \i2c_slave_top/registers/static_control_10 , 
         \i2c_slave_top/registers/static_control_11 , 
         \i2c_slave_top/registers/static_control_12 , 
         \i2c_slave_top/registers/static_control_13 , 
         \i2c_slave_top/registers/static_control_14 , 
         \i2c_slave_top/registers/static_control_15 , 
         \i2c_slave_top/registers/n6135 , \i2c_slave_top/n11531 , 
         \i2c_slave_top/registers/control_15_N_539_15 , mcu_gpio_c_15, 
         \reset_generator/clk_d2 , \reset_generator/clk_d2_N_8 , rstn_c, 
         \reset_generator/in_d1 , \reset_generator/in_d2 , n12611, 
         seed_adc_convert_c, n12007, \adc_control/clk_10mhz_c_enable_10 , 
         \dds_control_interface/mosi_N_1431 , seed_mod_mosi_c, seed_mod_sck_c, 
         seed_mod_ss_c, \dds_gain_control/n11659 , \dds_gain_control/n11010 , 
         \dds_gain_control/n12 , \dds_gain_control/n11018 , 
         \dds_gain_control/clk_10mhz_c_enable_264 , 
         \dds_gain_control/mosi_N_1226 , seed_spare2_c, 
         \dds_gain_control/n12561 , \dds_gain_control/n4801 , 
         \dds_gain_control/clk_10mhz_c_enable_3 , seed_spare4_c, 
         \adc_control/n11695 , \adc_control/n10 , 
         \adc_control/state_3_N_1501_0 , \adc_control/data_ready_N_1720 , 
         \adc_control/n2092 , \adc_control/clk_10mhz_c_enable_24 , 
         \adc_control/clk_10mhz_c_enable_23 , \i2c_slave_top/registers/n12588 , 
         \i2c_slave_top/registers/n12602 , \i2c_slave_top/registers/n98 , 
         \i2c_slave_top/registers/n214 , \i2c_slave_top/registers/n11909 , 
         \i2c_slave_top/registers/n11908 , \i2c_slave_top/registers/n11910 , 
         \i2c_slave_top/registers/n12003 , \i2c_slave_top/registers/n12006 , 
         \i2c_slave_top/registers/n11994 , \i2c_slave_top/registers/n11997 , 
         \i2c_slave_top/registers/n11893 , \i2c_slave_top/registers/n182 , 
         \i2c_slave_top/registers/n12590 , \i2c_slave_top/registers/n2203 , 
         \i2c_slave_top/registers/n2216 , \i2c_slave_top/registers/n2289 , 
         \i2c_slave_top/registers/n2202 , \i2c_slave_top/registers/n2215 , 
         \i2c_slave_top/registers/n2288 , \i2c_slave_top/registers/n2201 , 
         \i2c_slave_top/registers/n2214 , \i2c_slave_top/registers/n2287 , 
         \i2c_slave_top/registers/n2208 , \i2c_slave_top/registers/n2221 , 
         \i2c_slave_top/registers/n2294 , \i2c_slave_top/registers/n2207 , 
         \i2c_slave_top/registers/n2220 , \i2c_slave_top/registers/n2293 , 
         \i2c_slave_top/registers/n2206 , \i2c_slave_top/registers/n2219 , 
         \i2c_slave_top/registers/n2292 , \i2c_slave_top/registers/n2205 , 
         \i2c_slave_top/registers/n2218 , \i2c_slave_top/registers/n2291 , 
         \i2c_slave_top/registers/n2204 , \i2c_slave_top/registers/n2217 , 
         \i2c_slave_top/registers/n2290 , \i2c_slave_top/registers/n11937 , 
         \i2c_slave_top/registers/n11943 , \i2c_slave_top/registers/n11907 , 
         \i2c_slave_top/registers/n12000 , \i2c_slave_top/registers/n11949 , 
         \i2c_slave_top/registers/n11952 , \i2c_slave_top/registers/n11955 , 
         \i2c_slave_top/registers/n11958 , \i2c_slave_top/registers/n11961 , 
         \i2c_slave_top/registers/n11964 , \i2c_slave_top/registers/n11967 , 
         \i2c_slave_top/registers/n11970 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12535 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12532 , 
         \i2c_slave_top/registers/n11303 , \i2c_slave_top/registers/n12562 , 
         \i2c_slave_top/registers/n11201 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10578 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11903 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10995 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11305 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/d_ff , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n595 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11899 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12550 , 
         \i2c_slave_top/registers/n10794 , \i2c_slave_top/registers/n12548 , 
         \i2c_slave_top/registers/n6131 , \i2c_slave_top/registers/n5589 , 
         \i2c_slave_top/registers/n12546 , \i2c_slave_top/registers/n12552 , 
         \i2c_slave_top/registers/n12565 , \i2c_slave_top/registers/n6143 , 
         \i2c_slave_top/registers/n11685 , \i2c_slave_top/registers/n12554 , 
         \i2c_slave_top/registers/n6123 , \i2c_slave_top/registers/n11287 , 
         \i2c_slave_top/registers/n12638 , \i2c_slave_top/registers/n11727 , 
         \i2c_slave_top/registers/n10458 , \i2c_slave_top/registers/n6127 , 
         \i2c_slave_top/registers/n12544 , \i2c_slave_top/registers/n12553 , 
         \i2c_slave_top/registers/n6139 , \i2c_slave_top/registers/n10 , 
         \i2c_slave_top/registers/n13 , \i2c_slave_top/registers/n17 , 
         \i2c_slave_top/registers/n12560 , \i2c_slave_top/registers/n11219 , 
         \i2c_slave_top/registers/n193 , \i2c_slave_top/registers/n11257 , 
         \i2c_slave_top/registers/n12583 , \i2c_slave_top/registers/n6147 , 
         \i2c_slave_top/registers/n11217 , \i2c_slave_top/n11471 , 
         \i2c_slave_top/registers/n11641 , \i2c_slave_top/n11541 , 
         \i2c_slave_top/n11555 , \i2c_slave_top/n11415 , 
         \i2c_slave_top/registers/n11349 , \i2c_slave_top/registers/n10394 , 
         \i2c_slave_top/n11443 , 
         \i2c_slave_top/registers/data_vld_dly_enable_2 , 
         \i2c_slave_top/registers/n11793 , \i2c_slave_top/registers/n11791 , 
         \i2c_slave_top/registers/n11801 , \i2c_slave_top/registers/n11797 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12575 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5125 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5939 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10312 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12609 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11091 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12471 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1_adj_1782 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11047 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10532 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_N_71 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12614 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11865 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10602 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12579 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10620 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12621 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10576 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10353 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12551 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12623 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12630 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12632 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12599 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12598 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12557 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9759 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11870 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12596 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12555 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12595 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12592 , 
         \dds_gain_control/n11769 , \dds_gain_control/n11771 , 
         \dds_gain_control/n11651 , \dds_gain_control/n11649 , 
         \adc_control/n5 , \adc_control/n5_adj_1747 , \adc_control/n12610 , 
         \adc_control/n6 , \adc_control/n12572 , \adc_control/n7954 , 
         \adc_control/n12613 , \adc_control/n5_adj_1748 , \adc_control/n12617 , 
         \adc_control/n12581 , \adc_control/n4 , \adc_control/n11743 , 
         \adc_control/n11745 , \dds_control_interface/n11823 , 
         \dds_control_interface/n11825 , 
         \dds_control_interface/data_valid_dbg , 
         \dds_control_interface/n11755 , \reset_generator/in_d3 , 
         \reset_generator/reset_n_N_4 , \dds_control_interface/n11319 , 
         \dds_control_interface/n11321 , \dds_control_interface/n12584 , 
         \dds_gain_control/clk_10mhz_c_enable_263 , 
         \i2c_slave_top/registers/n6151 , status_2, seed_laser_en_led_n_c, 
         system_reset_n_c_3, seed_compared_c_1, n7927, 
         \dds_gain_control/data_valid_reset , seed_adc_sck_c, 
         \dds_control_interface/clk_10mhz_c_enable_261 , VCC_net, GND_net;

  i2c_slave_top_registers_SLICE_0 \i2c_slave_top/registers/SLICE_0 ( 
    .A1(\i2c_slave_top/registers/n12633 ), 
    .A0(\i2c_slave_top/registers/n12631 ), 
    .FCI(\i2c_slave_top/registers/n9622 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_841_5 ), 
    .F1(\i2c_slave_top/registers/addr_i_7_N_841_6 ), 
    .FCO(\i2c_slave_top/registers/n9623 ));
  i2c_slave_top_registers_SLICE_1 \i2c_slave_top/registers/SLICE_1 ( 
    .A1(\i2c_slave_top/n12639 ), .A0(\i2c_slave_top/registers/n12628 ), 
    .FCI(\i2c_slave_top/registers/n9621 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_841_3 ), 
    .F1(\i2c_slave_top/registers/addr_i_7_N_841_4 ), 
    .FCO(\i2c_slave_top/registers/n9622 ));
  i2c_slave_top_registers_SLICE_2 \i2c_slave_top/registers/SLICE_2 ( 
    .A1(\i2c_slave_top/registers/addr_i_2 ), 
    .A0(\i2c_slave_top/registers/n12637 ), 
    .FCI(\i2c_slave_top/registers/n9620 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_841_1 ), 
    .F1(\i2c_slave_top/registers/addr_i_7_N_841_2 ), 
    .FCO(\i2c_slave_top/registers/n9621 ));
  i2c_slave_top_registers_SLICE_3 \i2c_slave_top/registers/SLICE_3 ( 
    .A1(\i2c_slave_top/n12641 ), 
    .F1(\i2c_slave_top/registers/addr_i_7_N_841_0 ), 
    .FCO(\i2c_slave_top/registers/n9620 ));
  i2c_slave_top_registers_SLICE_4 \i2c_slave_top/registers/SLICE_4 ( 
    .A0(\i2c_slave_top/registers/addr_i_7 ), 
    .FCI(\i2c_slave_top/registers/n9623 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_841_7 ));
  dds_gain_control_SLICE_5 \dds_gain_control/SLICE_5 ( 
    .A1(\dds_gain_control/dac_count_2 ), .A0(\dds_gain_control/dac_count_1 ), 
    .DI1(\dds_gain_control/n83 ), .DI0(\dds_gain_control/n84 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_229 ), 
    .LSR(\dds_gain_control/n6197 ), .CLK(clk_10mhz_c), 
    .FCI(\dds_gain_control/n9636 ), .F0(\dds_gain_control/n84 ), 
    .Q0(\dds_gain_control/dac_count_1 ), .F1(\dds_gain_control/n83 ), 
    .Q1(\dds_gain_control/dac_count_2 ), .FCO(\dds_gain_control/n9637 ));
  dds_gain_control_SLICE_6 \dds_gain_control/SLICE_6 ( 
    .A1(\dds_gain_control/dac_count_0 ), .DI1(\dds_gain_control/n85 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_229 ), 
    .LSR(\dds_gain_control/n6197 ), .CLK(clk_10mhz_c), 
    .F1(\dds_gain_control/n85 ), .Q1(\dds_gain_control/dac_count_0 ), 
    .FCO(\dds_gain_control/n9636 ));
  dds_gain_control_SLICE_7 \dds_gain_control/SLICE_7 ( 
    .B1(\dds_gain_control/dds_current_limit_reg_14 ), .A1(dds_gain_14), 
    .B0(\dds_gain_control/dds_current_limit_reg_13 ), .A0(dds_gain_13), 
    .FCI(\dds_gain_control/n9666 ), .FCO(\dds_gain_control/n9667 ));
  dds_gain_control_SLICE_8 \dds_gain_control/SLICE_8 ( 
    .B1(\dds_gain_control/dds_current_limit_reg_12 ), .A1(dds_gain_12), 
    .B0(\dds_gain_control/dds_current_limit_reg_11 ), .A0(dds_gain_11), 
    .FCI(\dds_gain_control/n9665 ), .FCO(\dds_gain_control/n9666 ));
  dds_gain_control_SLICE_9 \dds_gain_control/SLICE_9 ( 
    .B1(\dds_gain_control/dds_current_limit_reg_10 ), .A1(dds_gain_10), 
    .B0(\dds_gain_control/dds_current_limit_reg_9 ), .A0(dds_gain_9), 
    .FCI(\dds_gain_control/n9664 ), .FCO(\dds_gain_control/n9665 ));
  dds_gain_control_SLICE_10 \dds_gain_control/SLICE_10 ( 
    .B1(\dds_gain_control/dds_current_limit_reg_8 ), .A1(dds_gain_8), 
    .B0(\dds_gain_control/dds_current_limit_reg_7 ), .A0(dds_gain_7), 
    .FCI(\dds_gain_control/n9663 ), .FCO(\dds_gain_control/n9664 ));
  dds_gain_control_SLICE_11 \dds_gain_control/SLICE_11 ( 
    .B1(\dds_gain_control/dds_current_limit_reg_6 ), .A1(dds_gain_6), 
    .B0(\dds_gain_control/dds_current_limit_reg_5 ), .A0(dds_gain_5), 
    .FCI(\dds_gain_control/n9662 ), .FCO(\dds_gain_control/n9663 ));
  dds_gain_control_SLICE_12 \dds_gain_control/SLICE_12 ( 
    .B1(\dds_gain_control/cstate_0 ), .A1(\dds_gain_control/total_count_15 ), 
    .B0(\dds_gain_control/cstate_0 ), .A0(\dds_gain_control/total_count_14 ), 
    .FCI(\dds_gain_control/n9634 ), 
    .F0(\dds_gain_control/total_count_15_N_1081_14 ), 
    .F1(\dds_gain_control/total_count_15_N_1081_15 ));
  dds_gain_control_SLICE_13 \dds_gain_control/SLICE_13 ( 
    .B1(\dds_gain_control/cstate_0 ), .A1(\dds_gain_control/total_count_13 ), 
    .B0(\dds_gain_control/cstate_0 ), .A0(\dds_gain_control/total_count_12 ), 
    .FCI(\dds_gain_control/n9633 ), 
    .F0(\dds_gain_control/total_count_15_N_1081_12 ), 
    .F1(\dds_gain_control/total_count_15_N_1081_13 ), 
    .FCO(\dds_gain_control/n9634 ));
  dds_gain_control_SLICE_14 \dds_gain_control/SLICE_14 ( 
    .B1(\dds_gain_control/dds_current_limit_reg_4 ), .A1(dds_gain_4), 
    .B0(\dds_gain_control/dds_current_limit_reg_3 ), .A0(dds_gain_3), 
    .FCI(\dds_gain_control/n9661 ), .FCO(\dds_gain_control/n9662 ));
  dds_gain_control_SLICE_15 \dds_gain_control/SLICE_15 ( 
    .B1(\dds_gain_control/cstate_0 ), .A1(\dds_gain_control/total_count_3 ), 
    .B0(\dds_gain_control/cstate_0 ), .A0(\dds_gain_control/total_count_2 ), 
    .FCI(\dds_gain_control/n9628 ), 
    .F0(\dds_gain_control/total_count_15_N_1081_2 ), 
    .F1(\dds_gain_control/total_count_15_N_1081_3 ), 
    .FCO(\dds_gain_control/n9629 ));
  dds_gain_control_SLICE_16 \dds_gain_control/SLICE_16 ( 
    .B1(\dds_gain_control/cstate_0 ), .A1(\dds_gain_control/total_count_1 ), 
    .C0(\dds_gain_control/n6859 ), .B0(\dds_gain_control/cstate_0 ), 
    .A0(\dds_gain_control/total_count_0 ), .FCI(\dds_gain_control/n9627 ), 
    .F0(\dds_gain_control/total_count_15_N_1081_0 ), 
    .F1(\dds_gain_control/total_count_15_N_1081_1 ), 
    .FCO(\dds_gain_control/n9628 ));
  dds_gain_control_SLICE_17 \dds_gain_control/SLICE_17 ( 
    .B1(\dds_gain_control/cstate_0 ), .A1(\dds_gain_control/total_count_11 ), 
    .B0(\dds_gain_control/cstate_0 ), .A0(\dds_gain_control/total_count_10 ), 
    .FCI(\dds_gain_control/n9632 ), 
    .F0(\dds_gain_control/total_count_15_N_1081_10 ), 
    .F1(\dds_gain_control/total_count_15_N_1081_11 ), 
    .FCO(\dds_gain_control/n9633 ));
  dds_gain_control_SLICE_18 \dds_gain_control/SLICE_18 ( 
    .B1(\dds_gain_control/dds_current_limit_reg_2 ), .A1(dds_gain_2), 
    .B0(\dds_gain_control/dds_current_limit_reg_1 ), .A0(dds_gain_1), 
    .FCI(\dds_gain_control/n9660 ), .FCO(\dds_gain_control/n9661 ));
  dds_gain_control_SLICE_19 \dds_gain_control/SLICE_19 ( 
    .B1(\dds_gain_control/dds_current_limit_reg_0 ), .A1(dds_gain_0), 
    .FCO(\dds_gain_control/n9660 ));
  dds_gain_control_SLICE_20 \dds_gain_control/SLICE_20 ( 
    .B0(\dds_gain_control/cw_current_limit_reg_15 ), .A0(cw_gain_15), 
    .FCI(\dds_gain_control/n9659 ), .F1(\dds_gain_control/n3252 ));
  dds_gain_control_SLICE_21 \dds_gain_control/SLICE_21 ( 
    .B1(\dds_gain_control/cw_current_limit_reg_14 ), .A1(cw_gain_14), 
    .B0(\dds_gain_control/cw_current_limit_reg_13 ), .A0(cw_gain_13), 
    .FCI(\dds_gain_control/n9658 ), .FCO(\dds_gain_control/n9659 ));
  dds_gain_control_SLICE_22 \dds_gain_control/SLICE_22 ( 
    .B1(\dds_gain_control/cstate_0 ), .A1(\dds_gain_control/total_count_9 ), 
    .B0(\dds_gain_control/cstate_0 ), .A0(\dds_gain_control/total_count_8 ), 
    .FCI(\dds_gain_control/n9631 ), 
    .F0(\dds_gain_control/total_count_15_N_1081_8 ), 
    .F1(\dds_gain_control/total_count_15_N_1081_9 ), 
    .FCO(\dds_gain_control/n9632 ));
  dds_gain_control_SLICE_23 \dds_gain_control/SLICE_23 ( 
    .B1(\dds_gain_control/cw_current_limit_reg_12 ), .A1(cw_gain_12), 
    .B0(\dds_gain_control/cw_current_limit_reg_11 ), .A0(cw_gain_11), 
    .FCI(\dds_gain_control/n9657 ), .FCO(\dds_gain_control/n9658 ));
  dds_gain_control_SLICE_24 \dds_gain_control/SLICE_24 ( 
    .B1(\dds_gain_control/cw_current_limit_reg_10 ), .A1(cw_gain_10), 
    .B0(\dds_gain_control/cw_current_limit_reg_9 ), .A0(cw_gain_9), 
    .FCI(\dds_gain_control/n9656 ), .FCO(\dds_gain_control/n9657 ));
  dds_gain_control_SLICE_25 \dds_gain_control/SLICE_25 ( 
    .B1(\dds_gain_control/cw_current_limit_reg_8 ), .A1(cw_gain_8), 
    .B0(\dds_gain_control/cw_current_limit_reg_7 ), .A0(cw_gain_7), 
    .FCI(\dds_gain_control/n9655 ), .FCO(\dds_gain_control/n9656 ));
  dds_gain_control_SLICE_26 \dds_gain_control/SLICE_26 ( 
    .B1(\dds_gain_control/cw_current_limit_reg_6 ), .A1(cw_gain_6), 
    .B0(\dds_gain_control/cw_current_limit_reg_5 ), .A0(cw_gain_5), 
    .FCI(\dds_gain_control/n9654 ), .FCO(\dds_gain_control/n9655 ));
  dds_gain_control_SLICE_27 \dds_gain_control/SLICE_27 ( 
    .B1(\dds_gain_control/cw_current_limit_reg_4 ), .A1(cw_gain_4), 
    .B0(\dds_gain_control/cw_current_limit_reg_3 ), .A0(cw_gain_3), 
    .FCI(\dds_gain_control/n9653 ), .FCO(\dds_gain_control/n9654 ));
  dds_gain_control_SLICE_28 \dds_gain_control/SLICE_28 ( 
    .B1(\dds_gain_control/cstate_0 ), .A1(\dds_gain_control/total_count_7 ), 
    .B0(\dds_gain_control/cstate_0 ), .A0(\dds_gain_control/total_count_6 ), 
    .FCI(\dds_gain_control/n9630 ), 
    .F0(\dds_gain_control/total_count_15_N_1081_6 ), 
    .F1(\dds_gain_control/total_count_15_N_1081_7 ), 
    .FCO(\dds_gain_control/n9631 ));
  dds_gain_control_SLICE_29 \dds_gain_control/SLICE_29 ( 
    .A0(\dds_gain_control/count_7 ), .FCI(\dds_gain_control/n9687 ), 
    .F0(\dds_gain_control/n206 ));
  dds_gain_control_SLICE_30 \dds_gain_control/SLICE_30 ( 
    .B1(\dds_gain_control/cw_current_limit_reg_2 ), .A1(cw_gain_2), 
    .B0(\dds_gain_control/cw_current_limit_reg_1 ), .A0(cw_gain_1), 
    .FCI(\dds_gain_control/n9652 ), .FCO(\dds_gain_control/n9653 ));
  dds_gain_control_SLICE_31 \dds_gain_control/SLICE_31 ( 
    .B1(\dds_gain_control/cstate_0 ), .A1(\dds_gain_control/total_count_5 ), 
    .B0(\dds_gain_control/cstate_0 ), .A0(\dds_gain_control/total_count_4 ), 
    .FCI(\dds_gain_control/n9629 ), 
    .F0(\dds_gain_control/total_count_15_N_1081_4 ), 
    .F1(\dds_gain_control/total_count_15_N_1081_5 ), 
    .FCO(\dds_gain_control/n9630 ));
  dds_gain_control_SLICE_32 \dds_gain_control/SLICE_32 ( 
    .A1(\dds_gain_control/count_6 ), .A0(\dds_gain_control/count_5 ), 
    .FCI(\dds_gain_control/n9686 ), .F0(\dds_gain_control/n208 ), 
    .F1(\dds_gain_control/n207 ), .FCO(\dds_gain_control/n9687 ));
  dds_gain_control_SLICE_33 \dds_gain_control/SLICE_33 ( 
    .A1(\dds_gain_control/count_4 ), .A0(\dds_gain_control/count_3 ), 
    .FCI(\dds_gain_control/n9685 ), .F0(\dds_gain_control/n210 ), 
    .F1(\dds_gain_control/n209 ), .FCO(\dds_gain_control/n9686 ));
  dds_gain_control_SLICE_34 \dds_gain_control/SLICE_34 ( 
    .A1(\dds_gain_control/count_2 ), .A0(\dds_gain_control/count_1 ), 
    .FCI(\dds_gain_control/n9684 ), .F0(\dds_gain_control/n212 ), 
    .F1(\dds_gain_control/n211 ), .FCO(\dds_gain_control/n9685 ));
  dds_gain_control_SLICE_35 \dds_gain_control/SLICE_35 ( 
    .A1(\dds_gain_control/count_0 ), .F1(\dds_gain_control/n213 ), 
    .FCO(\dds_gain_control/n9684 ));
  dds_gain_control_SLICE_36 \dds_gain_control/SLICE_36 ( 
    .B1(\dds_gain_control/cw_current_limit_reg_0 ), .A1(cw_gain_0), 
    .FCO(\dds_gain_control/n9652 ));
  dds_gain_control_SLICE_37 \dds_gain_control/SLICE_37 ( 
    .A1(\dds_gain_control/cstate_0 ), .FCO(\dds_gain_control/n9627 ));
  dds_gain_control_SLICE_38 \dds_gain_control/SLICE_38 ( 
    .A0(\dds_gain_control/dac_count_15 ), .DI0(\dds_gain_control/n70 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_229 ), 
    .LSR(\dds_gain_control/n6197 ), .CLK(clk_10mhz_c), 
    .FCI(\dds_gain_control/n9643 ), .F0(\dds_gain_control/n70 ), 
    .Q0(\dds_gain_control/dac_count_15 ));
  dds_gain_control_SLICE_39 \dds_gain_control/SLICE_39 ( 
    .A1(\dds_gain_control/dac_count_14 ), .A0(\dds_gain_control/dac_count_13 ), 
    .DI1(\dds_gain_control/n71 ), .DI0(\dds_gain_control/n72 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_229 ), 
    .LSR(\dds_gain_control/n6197 ), .CLK(clk_10mhz_c), 
    .FCI(\dds_gain_control/n9642 ), .F0(\dds_gain_control/n72 ), 
    .Q0(\dds_gain_control/dac_count_13 ), .F1(\dds_gain_control/n71 ), 
    .Q1(\dds_gain_control/dac_count_14 ), .FCO(\dds_gain_control/n9643 ));
  dds_gain_control_SLICE_40 \dds_gain_control/SLICE_40 ( 
    .A1(\dds_gain_control/dac_count_12 ), .A0(\dds_gain_control/dac_count_11 ), 
    .DI1(\dds_gain_control/n73 ), .DI0(\dds_gain_control/n74 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_229 ), 
    .LSR(\dds_gain_control/n6197 ), .CLK(clk_10mhz_c), 
    .FCI(\dds_gain_control/n9641 ), .F0(\dds_gain_control/n74 ), 
    .Q0(\dds_gain_control/dac_count_11 ), .F1(\dds_gain_control/n73 ), 
    .Q1(\dds_gain_control/dac_count_12 ), .FCO(\dds_gain_control/n9642 ));
  dds_gain_control_SLICE_41 \dds_gain_control/SLICE_41 ( 
    .A1(\dds_gain_control/dac_count_10 ), .A0(\dds_gain_control/dac_count_9 ), 
    .DI1(\dds_gain_control/n75 ), .DI0(\dds_gain_control/n76 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_229 ), 
    .LSR(\dds_gain_control/n6197 ), .CLK(clk_10mhz_c), 
    .FCI(\dds_gain_control/n9640 ), .F0(\dds_gain_control/n76 ), 
    .Q0(\dds_gain_control/dac_count_9 ), .F1(\dds_gain_control/n75 ), 
    .Q1(\dds_gain_control/dac_count_10 ), .FCO(\dds_gain_control/n9641 ));
  dds_gain_control_SLICE_42 \dds_gain_control/SLICE_42 ( 
    .A1(\dds_gain_control/dac_count_8 ), .A0(\dds_gain_control/dac_count_7 ), 
    .DI1(\dds_gain_control/n77 ), .DI0(\dds_gain_control/n78 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_229 ), 
    .LSR(\dds_gain_control/n6197 ), .CLK(clk_10mhz_c), 
    .FCI(\dds_gain_control/n9639 ), .F0(\dds_gain_control/n78 ), 
    .Q0(\dds_gain_control/dac_count_7 ), .F1(\dds_gain_control/n77 ), 
    .Q1(\dds_gain_control/dac_count_8 ), .FCO(\dds_gain_control/n9640 ));
  dds_gain_control_SLICE_43 \dds_gain_control/SLICE_43 ( 
    .A1(\dds_gain_control/dac_count_6 ), .A0(\dds_gain_control/dac_count_5 ), 
    .DI1(\dds_gain_control/n79 ), .DI0(\dds_gain_control/n80 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_229 ), 
    .LSR(\dds_gain_control/n6197 ), .CLK(clk_10mhz_c), 
    .FCI(\dds_gain_control/n9638 ), .F0(\dds_gain_control/n80 ), 
    .Q0(\dds_gain_control/dac_count_5 ), .F1(\dds_gain_control/n79 ), 
    .Q1(\dds_gain_control/dac_count_6 ), .FCO(\dds_gain_control/n9639 ));
  dds_gain_control_SLICE_44 \dds_gain_control/SLICE_44 ( 
    .B0(\dds_gain_control/dds_current_limit_reg_15 ), .A0(dds_gain_15), 
    .FCI(\dds_gain_control/n9667 ), .F1(n3233));
  dds_gain_control_SLICE_45 \dds_gain_control/SLICE_45 ( 
    .A1(\dds_gain_control/dac_count_4 ), .A0(\dds_gain_control/dac_count_3 ), 
    .DI1(\dds_gain_control/n81 ), .DI0(\dds_gain_control/n82 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_229 ), 
    .LSR(\dds_gain_control/n6197 ), .CLK(clk_10mhz_c), 
    .FCI(\dds_gain_control/n9637 ), .F0(\dds_gain_control/n82 ), 
    .Q0(\dds_gain_control/dac_count_3 ), .F1(\dds_gain_control/n81 ), 
    .Q1(\dds_gain_control/dac_count_4 ), .FCO(\dds_gain_control/n9638 ));
  adc_control_SLICE_46 \adc_control/SLICE_46 ( .A0(\adc_control/count_7 ), 
    .DI0(\adc_control/n224 ), .CE(\adc_control/adc_sck_temp_enable_72 ), 
    .LSR(\adc_control/n6163 ), .CLK(\adc_control/adc_sck_temp ), 
    .FCI(\adc_control/n9695 ), .F0(\adc_control/n224 ), 
    .Q0(\adc_control/count_7 ));
  adc_control_SLICE_47 \adc_control/SLICE_47 ( .A1(\adc_control/count_6 ), 
    .A0(\adc_control/count_5 ), .DI1(\adc_control/n225 ), 
    .DI0(\adc_control/n226 ), .CE(\adc_control/adc_sck_temp_enable_72 ), 
    .LSR(\adc_control/n6163 ), .CLK(\adc_control/adc_sck_temp ), 
    .FCI(\adc_control/n9694 ), .F0(\adc_control/n226 ), 
    .Q0(\adc_control/count_5 ), .F1(\adc_control/n225 ), 
    .Q1(\adc_control/count_6 ), .FCO(\adc_control/n9695 ));
  adc_control_SLICE_48 \adc_control/SLICE_48 ( .A1(\adc_control/count_4 ), 
    .A0(\adc_control/count_3 ), .DI1(\adc_control/n227 ), 
    .DI0(\adc_control/n228 ), .CE(\adc_control/adc_sck_temp_enable_72 ), 
    .LSR(\adc_control/n6163 ), .CLK(\adc_control/adc_sck_temp ), 
    .FCI(\adc_control/n9693 ), .F0(\adc_control/n228 ), 
    .Q0(\adc_control/count_3 ), .F1(\adc_control/n227 ), 
    .Q1(\adc_control/count_4 ), .FCO(\adc_control/n9694 ));
  adc_control_SLICE_49 \adc_control/SLICE_49 ( .A1(\adc_control/count_2 ), 
    .A0(\adc_control/count_1 ), .DI1(\adc_control/n229 ), 
    .DI0(\adc_control/n230 ), .CE(\adc_control/adc_sck_temp_enable_72 ), 
    .LSR(\adc_control/n6163 ), .CLK(\adc_control/adc_sck_temp ), 
    .FCI(\adc_control/n9692 ), .F0(\adc_control/n230 ), 
    .Q0(\adc_control/count_1 ), .F1(\adc_control/n229 ), 
    .Q1(\adc_control/count_2 ), .FCO(\adc_control/n9693 ));
  adc_control_SLICE_50 \adc_control/SLICE_50 ( .A1(\adc_control/count_0 ), 
    .DI1(\adc_control/n231 ), .CE(\adc_control/adc_sck_temp_enable_72 ), 
    .LSR(\adc_control/n6163 ), .CLK(\adc_control/adc_sck_temp ), 
    .F1(\adc_control/n231 ), .Q1(\adc_control/count_0 ), 
    .FCO(\adc_control/n9692 ));
  adc_control_SLICE_51 \adc_control/SLICE_51 ( 
    .A0(\adc_control/convert_count_7 ), .DI0(\adc_control/n38 ), 
    .CE(\adc_control/clk_10mhz_c_enable_255 ), .LSR(\adc_control/n6279 ), 
    .CLK(clk_10mhz_c), .FCI(\adc_control/n9671 ), .F0(\adc_control/n38 ), 
    .Q0(\adc_control/convert_count_7 ));
  adc_control_SLICE_52 \adc_control/SLICE_52 ( 
    .A1(\adc_control/convert_count_6 ), .A0(\adc_control/convert_count_5 ), 
    .DI1(\adc_control/n39 ), .DI0(\adc_control/n40 ), 
    .CE(\adc_control/clk_10mhz_c_enable_255 ), .LSR(\adc_control/n6279 ), 
    .CLK(clk_10mhz_c), .FCI(\adc_control/n9670 ), .F0(\adc_control/n40 ), 
    .Q0(\adc_control/convert_count_5 ), .F1(\adc_control/n39 ), 
    .Q1(\adc_control/convert_count_6 ), .FCO(\adc_control/n9671 ));
  adc_control_SLICE_53 \adc_control/SLICE_53 ( 
    .A1(\adc_control/convert_count_4 ), .A0(\adc_control/convert_count_3 ), 
    .DI1(\adc_control/n41 ), .DI0(\adc_control/n42 ), 
    .CE(\adc_control/clk_10mhz_c_enable_255 ), .LSR(\adc_control/n6279 ), 
    .CLK(clk_10mhz_c), .FCI(\adc_control/n9669 ), .F0(\adc_control/n42 ), 
    .Q0(\adc_control/convert_count_3 ), .F1(\adc_control/n41 ), 
    .Q1(\adc_control/convert_count_4 ), .FCO(\adc_control/n9670 ));
  adc_control_SLICE_54 \adc_control/SLICE_54 ( 
    .A1(\adc_control/convert_count_2 ), .A0(\adc_control/convert_count_1 ), 
    .DI1(\adc_control/n43 ), .DI0(\adc_control/n44 ), 
    .CE(\adc_control/clk_10mhz_c_enable_255 ), .LSR(\adc_control/n6279 ), 
    .CLK(clk_10mhz_c), .FCI(\adc_control/n9668 ), .F0(\adc_control/n44 ), 
    .Q0(\adc_control/convert_count_1 ), .F1(\adc_control/n43 ), 
    .Q1(\adc_control/convert_count_2 ), .FCO(\adc_control/n9669 ));
  adc_control_SLICE_55 \adc_control/SLICE_55 ( 
    .A1(\adc_control/convert_count_0 ), .DI1(\adc_control/n45 ), 
    .CE(\adc_control/clk_10mhz_c_enable_255 ), .LSR(\adc_control/n6279 ), 
    .CLK(clk_10mhz_c), .F1(\adc_control/n45 ), 
    .Q1(\adc_control/convert_count_0 ), .FCO(\adc_control/n9668 ));
  dds_control_interface_SLICE_56 \dds_control_interface/SLICE_56 ( 
    .A0(\dds_control_interface/count_7 ), .FCI(\dds_control_interface/n9691 ), 
    .F0(\dds_control_interface/count_7_N_1363_7 ));
  dds_control_interface_SLICE_57 \dds_control_interface/SLICE_57 ( 
    .A1(\dds_control_interface/count_6 ), .A0(\dds_control_interface/count_5 ), 
    .FCI(\dds_control_interface/n9690 ), 
    .F0(\dds_control_interface/count_7_N_1363_5 ), 
    .F1(\dds_control_interface/count_7_N_1363_6 ), 
    .FCO(\dds_control_interface/n9691 ));
  dds_control_interface_SLICE_58 \dds_control_interface/SLICE_58 ( 
    .A1(\dds_control_interface/count_4 ), .A0(\dds_control_interface/count_3 ), 
    .FCI(\dds_control_interface/n9689 ), 
    .F0(\dds_control_interface/count_7_N_1363_3 ), 
    .F1(\dds_control_interface/count_7_N_1363_4 ), 
    .FCO(\dds_control_interface/n9690 ));
  dds_control_interface_SLICE_59 \dds_control_interface/SLICE_59 ( 
    .A1(\dds_control_interface/count_2 ), .A0(\dds_control_interface/count_1 ), 
    .FCI(\dds_control_interface/n9688 ), 
    .F0(\dds_control_interface/count_7_N_1363_1 ), 
    .F1(\dds_control_interface/count_7_N_1363_2 ), 
    .FCO(\dds_control_interface/n9689 ));
  dds_control_interface_SLICE_60 \dds_control_interface/SLICE_60 ( 
    .A1(\dds_control_interface/count_0 ), 
    .F1(\dds_control_interface/count_7_N_1363_0 ), 
    .FCO(\dds_control_interface/n9688 ));
  dds_control_interface_SLICE_61 \dds_control_interface/SLICE_61 ( 
    .A0(\dds_control_interface/total_count_15 ), 
    .FCI(\dds_control_interface/n9651 ), 
    .F0(\dds_control_interface/total_count_15_N_1339_15 ));
  dds_control_interface_SLICE_62 \dds_control_interface/SLICE_62 ( 
    .A1(\dds_control_interface/total_count_14 ), 
    .A0(\dds_control_interface/total_count_13 ), 
    .FCI(\dds_control_interface/n9650 ), 
    .F0(\dds_control_interface/total_count_15_N_1339_13 ), 
    .F1(\dds_control_interface/total_count_15_N_1339_14 ), 
    .FCO(\dds_control_interface/n9651 ));
  dds_control_interface_SLICE_63 \dds_control_interface/SLICE_63 ( 
    .A1(\dds_control_interface/total_count_12 ), 
    .A0(\dds_control_interface/total_count_11 ), 
    .FCI(\dds_control_interface/n9649 ), 
    .F0(\dds_control_interface/total_count_15_N_1339_11 ), 
    .F1(\dds_control_interface/total_count_15_N_1339_12 ), 
    .FCO(\dds_control_interface/n9650 ));
  dds_control_interface_SLICE_64 \dds_control_interface/SLICE_64 ( 
    .A1(\dds_control_interface/total_count_10 ), 
    .A0(\dds_control_interface/total_count_9 ), 
    .FCI(\dds_control_interface/n9648 ), 
    .F0(\dds_control_interface/total_count_15_N_1339_9 ), 
    .F1(\dds_control_interface/total_count_15_N_1339_10 ), 
    .FCO(\dds_control_interface/n9649 ));
  dds_control_interface_SLICE_65 \dds_control_interface/SLICE_65 ( 
    .A1(\dds_control_interface/total_count_8 ), 
    .A0(\dds_control_interface/total_count_7 ), 
    .FCI(\dds_control_interface/n9647 ), 
    .F0(\dds_control_interface/total_count_15_N_1339_7 ), 
    .F1(\dds_control_interface/total_count_15_N_1339_8 ), 
    .FCO(\dds_control_interface/n9648 ));
  dds_control_interface_SLICE_66 \dds_control_interface/SLICE_66 ( 
    .A1(\dds_control_interface/total_count_6 ), 
    .A0(\dds_control_interface/total_count_5 ), 
    .FCI(\dds_control_interface/n9646 ), 
    .F0(\dds_control_interface/total_count_15_N_1339_5 ), 
    .F1(\dds_control_interface/total_count_15_N_1339_6 ), 
    .FCO(\dds_control_interface/n9647 ));
  dds_control_interface_SLICE_67 \dds_control_interface/SLICE_67 ( 
    .A1(\dds_control_interface/total_count_4 ), 
    .A0(\dds_control_interface/total_count_3 ), 
    .FCI(\dds_control_interface/n9645 ), 
    .F0(\dds_control_interface/total_count_15_N_1339_3 ), 
    .F1(\dds_control_interface/total_count_15_N_1339_4 ), 
    .FCO(\dds_control_interface/n9646 ));
  dds_control_interface_SLICE_68 \dds_control_interface/SLICE_68 ( 
    .A1(\dds_control_interface/total_count_2 ), 
    .A0(\dds_control_interface/total_count_1 ), 
    .FCI(\dds_control_interface/n9644 ), 
    .F0(\dds_control_interface/total_count_15_N_1339_1 ), 
    .F1(\dds_control_interface/total_count_15_N_1339_2 ), 
    .FCO(\dds_control_interface/n9645 ));
  dds_control_interface_SLICE_69 \dds_control_interface/SLICE_69 ( 
    .C1(\dds_control_interface/total_count_0 ), 
    .B1(\dds_control_interface/n10305 ), .A1(\dds_control_interface/n10433 ), 
    .F1(\dds_control_interface/total_count_15_N_1339_0 ), 
    .FCO(\dds_control_interface/n9644 ));
  heart_beat_SLICE_70 \heart_beat/SLICE_70 ( .A0(\heart_beat/prescale[15] ), 
    .DI0(\heart_beat/n70 ), .CLK(clk_10mhz_c), .FCI(\heart_beat/n9683 ), 
    .F0(\heart_beat/n70 ), .Q0(\heart_beat/prescale[15] ));
  heart_beat_SLICE_71 \heart_beat/SLICE_71 ( .A1(\heart_beat/n2_adj_1726 ), 
    .A0(\heart_beat/n3_adj_1725 ), .DI1(\heart_beat/n71 ), 
    .DI0(\heart_beat/n72 ), .CLK(clk_10mhz_c), .FCI(\heart_beat/n9682 ), 
    .F0(\heart_beat/n72 ), .Q0(\heart_beat/n3_adj_1725 ), 
    .F1(\heart_beat/n71 ), .Q1(\heart_beat/n2_adj_1726 ), 
    .FCO(\heart_beat/n9683 ));
  heart_beat_SLICE_72 \heart_beat/SLICE_72 ( .A1(\heart_beat/n4_adj_1728 ), 
    .A0(\heart_beat/n5_adj_1727 ), .DI1(\heart_beat/n73 ), 
    .DI0(\heart_beat/n74 ), .CLK(clk_10mhz_c), .FCI(\heart_beat/n9681 ), 
    .F0(\heart_beat/n74 ), .Q0(\heart_beat/n5_adj_1727 ), 
    .F1(\heart_beat/n73 ), .Q1(\heart_beat/n4_adj_1728 ), 
    .FCO(\heart_beat/n9682 ));
  heart_beat_SLICE_73 \heart_beat/SLICE_73 ( .A1(\heart_beat/n6_adj_1730 ), 
    .A0(\heart_beat/n7_adj_1729 ), .DI1(\heart_beat/n75 ), 
    .DI0(\heart_beat/n76 ), .CLK(clk_10mhz_c), .FCI(\heart_beat/n9680 ), 
    .F0(\heart_beat/n76 ), .Q0(\heart_beat/n7_adj_1729 ), 
    .F1(\heart_beat/n75 ), .Q1(\heart_beat/n6_adj_1730 ), 
    .FCO(\heart_beat/n9681 ));
  heart_beat_SLICE_74 \heart_beat/SLICE_74 ( .A1(\heart_beat/n8_adj_1731 ), 
    .A0(\heart_beat/n9 ), .DI1(\heart_beat/n77 ), .DI0(\heart_beat/n78 ), 
    .CLK(clk_10mhz_c), .FCI(\heart_beat/n9679 ), .F0(\heart_beat/n78 ), 
    .Q0(\heart_beat/n9 ), .F1(\heart_beat/n77 ), .Q1(\heart_beat/n8_adj_1731 ), 
    .FCO(\heart_beat/n9680 ));
  heart_beat_SLICE_75 \heart_beat/SLICE_75 ( .A1(\heart_beat/n10 ), 
    .A0(\heart_beat/n11 ), .DI1(\heart_beat/n79 ), .DI0(\heart_beat/n80 ), 
    .CLK(clk_10mhz_c), .FCI(\heart_beat/n9678 ), .F0(\heart_beat/n80 ), 
    .Q0(\heart_beat/n11 ), .F1(\heart_beat/n79 ), .Q1(\heart_beat/n10 ), 
    .FCO(\heart_beat/n9679 ));
  heart_beat_SLICE_76 \heart_beat/SLICE_76 ( .A1(\heart_beat/n12 ), 
    .A0(\heart_beat/n13 ), .DI1(\heart_beat/n81 ), .DI0(\heart_beat/n82 ), 
    .CLK(clk_10mhz_c), .FCI(\heart_beat/n9677 ), .F0(\heart_beat/n82 ), 
    .Q0(\heart_beat/n13 ), .F1(\heart_beat/n81 ), .Q1(\heart_beat/n12 ), 
    .FCO(\heart_beat/n9678 ));
  heart_beat_SLICE_77 \heart_beat/SLICE_77 ( .A1(\heart_beat/n14 ), 
    .A0(\heart_beat/n15 ), .DI1(\heart_beat/n83 ), .DI0(\heart_beat/n84 ), 
    .CLK(clk_10mhz_c), .FCI(\heart_beat/n9676 ), .F0(\heart_beat/n84 ), 
    .Q0(\heart_beat/n15 ), .F1(\heart_beat/n83 ), .Q1(\heart_beat/n14 ), 
    .FCO(\heart_beat/n9677 ));
  heart_beat_SLICE_78 \heart_beat/SLICE_78 ( .A1(\heart_beat/n16 ), 
    .DI1(\heart_beat/n85 ), .CLK(clk_10mhz_c), .F1(\heart_beat/n85 ), 
    .Q1(\heart_beat/n16 ), .FCO(\heart_beat/n9676 ));
  heart_beat_SLICE_79 \heart_beat/SLICE_79 ( .A0(heartbeat_n_c_7), 
    .DI0(\heart_beat/n38 ), .CLK(\heart_beat/prescale[15] ), 
    .FCI(\heart_beat/n9675 ), .F0(\heart_beat/n38 ), .Q0(heartbeat_n_c_7));
  heart_beat_SLICE_80 \heart_beat/SLICE_80 ( .A1(\heart_beat/n2 ), 
    .A0(\heart_beat/n3 ), .DI1(\heart_beat/n39 ), .DI0(\heart_beat/n40 ), 
    .CLK(\heart_beat/prescale[15] ), .FCI(\heart_beat/n9674 ), 
    .F0(\heart_beat/n40 ), .Q0(\heart_beat/n3 ), .F1(\heart_beat/n39 ), 
    .Q1(\heart_beat/n2 ), .FCO(\heart_beat/n9675 ));
  heart_beat_SLICE_81 \heart_beat/SLICE_81 ( .A1(\heart_beat/n4 ), 
    .A0(\heart_beat/n5 ), .DI1(\heart_beat/n41 ), .DI0(\heart_beat/n42 ), 
    .CLK(\heart_beat/prescale[15] ), .FCI(\heart_beat/n9673 ), 
    .F0(\heart_beat/n42 ), .Q0(\heart_beat/n5 ), .F1(\heart_beat/n41 ), 
    .Q1(\heart_beat/n4 ), .FCO(\heart_beat/n9674 ));
  heart_beat_SLICE_82 \heart_beat/SLICE_82 ( .A1(\heart_beat/n6 ), 
    .A0(\heart_beat/n7 ), .DI1(\heart_beat/n43 ), .DI0(\heart_beat/n44 ), 
    .CLK(\heart_beat/prescale[15] ), .FCI(\heart_beat/n9672 ), 
    .F0(\heart_beat/n44 ), .Q0(\heart_beat/n7 ), .F1(\heart_beat/n43 ), 
    .Q1(\heart_beat/n6 ), .FCO(\heart_beat/n9673 ));
  heart_beat_SLICE_83 \heart_beat/SLICE_83 ( .A1(\heart_beat/n8 ), 
    .DI1(\heart_beat/n45 ), .CLK(\heart_beat/prescale[15] ), 
    .F1(\heart_beat/n45 ), .Q1(\heart_beat/n8 ), .FCO(\heart_beat/n9672 ));
  adc_control_SLICE_84 \adc_control/SLICE_84 ( .D1(state_1), .C1(state_0), 
    .B1(state_3), .A1(state_2), .D0(\adc_control/adc_sck_temp ), .C0(state_0), 
    .B0(state_3), .A0(state_2), .DI0(\adc_control/n12008 ), .CE(state_1), 
    .CLK(clk_10mhz_c), .F0(\adc_control/n12008 ), 
    .Q0(\adc_control/adc_sck_temp ), .F1(\adc_control/clk_10mhz_c_enable_258 ));
  adc_control_SLICE_85 \adc_control/SLICE_85 ( 
    .CE(\adc_control/adc_sck_temp_enable_64 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/capture_state_0 ), 
    .Q1(\adc_control/capture_state_1 ));
  adc_control_SLICE_86 \adc_control/SLICE_86 ( 
    .B1(\adc_control/capture_state_2 ), .A1(\adc_control/n15 ), 
    .B0(\adc_control/capture_state_2 ), .A0(\adc_control/n15 ), 
    .DI1(\adc_control/n12563 ), .DI0(\adc_control/n9445 ), 
    .CE(\adc_control/adc_sck_temp_enable_64 ), 
    .LSR(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n9445 ), 
    .Q0(\adc_control/capture_state_2 ), .F1(\adc_control/n12563 ), 
    .Q1(\adc_control/capture_state_3 ));
  adc_control_SLICE_87 \adc_control/SLICE_87 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_4 ), .CLK(\adc_control/adc_sck_temp ), 
    .Q0(\adc_control/current_data_0 ));
  adc_control_SLICE_88 \adc_control/SLICE_88 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_32 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_1 ));
  adc_control_SLICE_89 \adc_control/SLICE_89 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_31 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_2 ));
  adc_control_SLICE_90 \adc_control/SLICE_90 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_30 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_3 ));
  adc_control_SLICE_91 \adc_control/SLICE_91 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_29 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_4 ));
  adc_control_SLICE_92 \adc_control/SLICE_92 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_28 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_5 ));
  adc_control_SLICE_93 \adc_control/SLICE_93 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_27 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_6 ));
  adc_control_SLICE_94 \adc_control/SLICE_94 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_26 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_7 ));
  adc_control_SLICE_95 \adc_control/SLICE_95 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_25 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_8 ));
  adc_control_SLICE_96 \adc_control/SLICE_96 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_24 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_9 ));
  adc_control_SLICE_97 \adc_control/SLICE_97 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_23 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_10 ));
  adc_control_SLICE_98 \adc_control/SLICE_98 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_22 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_11 ));
  adc_control_SLICE_99 \adc_control/SLICE_99 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_21 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_12 ));
  adc_control_SLICE_100 \adc_control/SLICE_100 ( .M0(seed_adc_sdo1_c), 
    .CE(\adc_control/adc_sck_temp_enable_20 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/current_data_13 ));
  adc_control_SLICE_101 \adc_control/SLICE_101 ( .B0(state_1), .A0(state_0), 
    .DI0(\adc_control/n2040 ), .CE(\adc_control/clk_10mhz_c_enable_260 ), 
    .CLK(clk_10mhz_c), .F0(\adc_control/n2040 ), .Q0(\adc_control/data_ready ));
  adc_control_SLICE_102 \adc_control/SLICE_102 ( 
    .B1(\adc_control/sck_count_0 ), .A1(\adc_control/sck_count_1 ), 
    .A0(\adc_control/sck_count_0 ), .DI1(\adc_control/n24 ), 
    .DI0(\adc_control/n25 ), .CE(\adc_control/clk_10mhz_c_enable_258 ), 
    .LSR(\adc_control/n6276 ), .CLK(clk_10mhz_c), .F0(\adc_control/n25 ), 
    .Q0(\adc_control/sck_count_0 ), .F1(\adc_control/n24 ), 
    .Q1(\adc_control/sck_count_1 ));
  adc_control_SLICE_103 \adc_control/SLICE_103 ( 
    .D1(\adc_control/sck_count_3 ), .C1(\adc_control/sck_count_2 ), 
    .B1(\adc_control/sck_count_0 ), .A1(\adc_control/sck_count_1 ), 
    .C0(\adc_control/sck_count_2 ), .B0(\adc_control/sck_count_0 ), 
    .A0(\adc_control/sck_count_1 ), .DI1(\adc_control/n22 ), 
    .DI0(\adc_control/n23 ), .CE(\adc_control/clk_10mhz_c_enable_258 ), 
    .LSR(\adc_control/n6276 ), .CLK(clk_10mhz_c), .F0(\adc_control/n23 ), 
    .Q0(\adc_control/sck_count_2 ), .F1(\adc_control/n22 ), 
    .Q1(\adc_control/sck_count_3 ));
  adc_control_SLICE_104 \adc_control/SLICE_104 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_4 ), .CLK(\adc_control/adc_sck_temp ), 
    .Q0(\adc_control/voltage_data_0 ));
  adc_control_SLICE_105 \adc_control/SLICE_105 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_32 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_1 ));
  adc_control_SLICE_106 \adc_control/SLICE_106 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_31 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_2 ));
  adc_control_SLICE_107 \adc_control/SLICE_107 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_30 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_3 ));
  adc_control_SLICE_108 \adc_control/SLICE_108 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_29 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_4 ));
  adc_control_SLICE_109 \adc_control/SLICE_109 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_28 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_5 ));
  adc_control_SLICE_110 \adc_control/SLICE_110 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_27 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_6 ));
  adc_control_SLICE_111 \adc_control/SLICE_111 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_26 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_7 ));
  adc_control_SLICE_112 \adc_control/SLICE_112 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_25 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_8 ));
  adc_control_SLICE_113 \adc_control/SLICE_113 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_24 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_9 ));
  adc_control_SLICE_114 \adc_control/SLICE_114 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_23 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_10 ));
  adc_control_SLICE_115 \adc_control/SLICE_115 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_22 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_11 ));
  adc_control_SLICE_116 \adc_control/SLICE_116 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_21 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_12 ));
  adc_control_SLICE_117 \adc_control/SLICE_117 ( .M0(seed_adc_sdo2_c), 
    .CE(\adc_control/adc_sck_temp_enable_20 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(\adc_control/voltage_data_13 ));
  adc_control_SLICE_118 \adc_control/SLICE_118 ( 
    .M1(\adc_control/current_data_1 ), .M0(\adc_control/current_data_0 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_current_data_0), 
    .Q1(adc_current_data_1));
  adc_control_SLICE_119 \adc_control/SLICE_119 ( 
    .M1(\adc_control/current_data_3 ), .M0(\adc_control/current_data_2 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_current_data_2), 
    .Q1(adc_current_data_3));
  adc_control_SLICE_120 \adc_control/SLICE_120 ( 
    .M1(\adc_control/current_data_5 ), .M0(\adc_control/current_data_4 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_current_data_4), 
    .Q1(adc_current_data_5));
  adc_control_SLICE_121 \adc_control/SLICE_121 ( 
    .M1(\adc_control/current_data_7 ), .M0(\adc_control/current_data_6 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_current_data_6), 
    .Q1(adc_current_data_7));
  adc_control_SLICE_122 \adc_control/SLICE_122 ( 
    .M1(\adc_control/current_data_9 ), .M0(\adc_control/current_data_8 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_current_data_8), 
    .Q1(adc_current_data_9));
  adc_control_SLICE_123 \adc_control/SLICE_123 ( 
    .M1(\adc_control/current_data_11 ), .M0(\adc_control/current_data_10 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_current_data_10), 
    .Q1(adc_current_data_11));
  adc_control_SLICE_124 \adc_control/SLICE_124 ( 
    .M1(\adc_control/current_data_13 ), .M0(\adc_control/current_data_12 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_current_data_12), 
    .Q1(adc_current_data_13));
  adc_control_SLICE_125 \adc_control/SLICE_125 ( 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_current_data_14), 
    .Q1(adc_current_data_15));
  adc_control_SLICE_126 \adc_control/SLICE_126 ( 
    .M1(\adc_control/voltage_data_1 ), .M0(\adc_control/voltage_data_0 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_voltage_data_0), 
    .Q1(adc_voltage_data_1));
  adc_control_SLICE_127 \adc_control/SLICE_127 ( 
    .M1(\adc_control/voltage_data_3 ), .M0(\adc_control/voltage_data_2 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_voltage_data_2), 
    .Q1(adc_voltage_data_3));
  adc_control_SLICE_128 \adc_control/SLICE_128 ( 
    .M1(\adc_control/voltage_data_5 ), .M0(\adc_control/voltage_data_4 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_voltage_data_4), 
    .Q1(adc_voltage_data_5));
  adc_control_SLICE_129 \adc_control/SLICE_129 ( 
    .M1(\adc_control/voltage_data_7 ), .M0(\adc_control/voltage_data_6 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_voltage_data_6), 
    .Q1(adc_voltage_data_7));
  adc_control_SLICE_130 \adc_control/SLICE_130 ( 
    .M1(\adc_control/voltage_data_9 ), .M0(\adc_control/voltage_data_8 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_voltage_data_8), 
    .Q1(adc_voltage_data_9));
  adc_control_SLICE_131 \adc_control/SLICE_131 ( 
    .M1(\adc_control/voltage_data_11 ), .M0(\adc_control/voltage_data_10 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_voltage_data_10), 
    .Q1(adc_voltage_data_11));
  adc_control_SLICE_132 \adc_control/SLICE_132 ( 
    .M1(\adc_control/voltage_data_13 ), .M0(\adc_control/voltage_data_12 ), 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_voltage_data_12), 
    .Q1(adc_voltage_data_13));
  adc_control_SLICE_133 \adc_control/SLICE_133 ( 
    .CE(\adc_control/adc_sck_temp_enable_62 ), 
    .CLK(\adc_control/adc_sck_temp ), .Q0(adc_voltage_data_14), 
    .Q1(adc_voltage_data_15));
  i2c_slave_top_registers_SLICE_134 \i2c_slave_top/registers/SLICE_134 ( 
    .D1(\i2c_slave_top/n12641 ), .C1(\i2c_slave_top/registers/n12578 ), 
    .B1(\i2c_slave_top/registers/n5 ), .A1(\i2c_slave_top/n11391 ), 
    .D0(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/registers/n12578 ), 
    .B0(\i2c_slave_top/registers/n5 ), .A0(\i2c_slave_top/n11447 ), 
    .DI1(\i2c_slave_top/registers/control_15_N_539_3 ), 
    .DI0(\i2c_slave_top/registers/control_15_N_539_0 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_259 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/control_15_N_539_0 ), .Q0(control_0), 
    .F1(\i2c_slave_top/registers/control_15_N_539_3 ), .Q1(control_3));
  i2c_slave_top_SLICE_135 \i2c_slave_top/SLICE_135 ( 
    .C1(\i2c_slave_top/data_buffer_i_2 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .C0(\i2c_slave_top/data_buffer_i_1 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n12571 ), .DI0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_141 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/n12594 ), .Q0(cw_current_limit_0), 
    .F1(\i2c_slave_top/n12571 ), .Q1(cw_current_limit_1));
  i2c_slave_top_SLICE_136 \i2c_slave_top/SLICE_136 ( 
    .C1(\i2c_slave_top/data_buffer_i_4 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .C0(\i2c_slave_top/data_buffer_i_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n12569 ), .DI0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_141 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/n12570 ), .Q0(cw_current_limit_2), 
    .F1(\i2c_slave_top/n12569 ), .Q1(cw_current_limit_3));
  i2c_slave_top_SLICE_137 \i2c_slave_top/SLICE_137 ( 
    .C1(\i2c_slave_top/data_buffer_i_6 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .C0(\i2c_slave_top/data_buffer_i_5 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n12567 ), .DI0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_141 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/n12568 ), .Q0(cw_current_limit_4), 
    .F1(\i2c_slave_top/n12567 ), .Q1(cw_current_limit_5));
  i2c_slave_top_SLICE_138 \i2c_slave_top/SLICE_138 ( 
    .C1(\i2c_slave_top/data_buffer_i_8 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .C0(\i2c_slave_top/data_buffer_i_7 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n12603 ), .DI0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_141 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/n12566 ), .Q0(cw_current_limit_6), 
    .F1(\i2c_slave_top/n12603 ), .Q1(cw_current_limit_7));
  i2c_slave_top_registers_SLICE_139 \i2c_slave_top/registers/SLICE_139 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_149 ), .CLK(clk_10mhz_c), 
    .Q0(cw_current_limit_8), .Q1(cw_current_limit_9));
  i2c_slave_top_registers_SLICE_140 \i2c_slave_top/registers/SLICE_140 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_149 ), .CLK(clk_10mhz_c), 
    .Q0(cw_current_limit_10), .Q1(cw_current_limit_11));
  i2c_slave_top_registers_SLICE_141 \i2c_slave_top/registers/SLICE_141 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_149 ), .CLK(clk_10mhz_c), 
    .Q0(cw_current_limit_12), .Q1(cw_current_limit_13));
  i2c_slave_top_registers_SLICE_142 \i2c_slave_top/registers/SLICE_142 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_149 ), .CLK(clk_10mhz_c), 
    .Q0(cw_current_limit_14), .Q1(cw_current_limit_15));
  i2c_slave_top_registers_SLICE_143 \i2c_slave_top/registers/SLICE_143 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_126 ), .CLK(clk_10mhz_c), 
    .Q0(cw_gain_0), .Q1(cw_gain_1));
  i2c_slave_top_registers_SLICE_144 \i2c_slave_top/registers/SLICE_144 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_126 ), .CLK(clk_10mhz_c), 
    .Q0(cw_gain_2), .Q1(cw_gain_3));
  i2c_slave_top_registers_SLICE_145 \i2c_slave_top/registers/SLICE_145 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_126 ), .CLK(clk_10mhz_c), 
    .Q0(cw_gain_4), .Q1(cw_gain_5));
  i2c_slave_top_registers_SLICE_146 \i2c_slave_top/registers/SLICE_146 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_126 ), .CLK(clk_10mhz_c), 
    .Q0(cw_gain_6), .Q1(cw_gain_7));
  i2c_slave_top_registers_SLICE_147 \i2c_slave_top/registers/SLICE_147 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_134 ), .CLK(clk_10mhz_c), 
    .Q0(cw_gain_8), .Q1(cw_gain_9));
  i2c_slave_top_registers_SLICE_148 \i2c_slave_top/registers/SLICE_148 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_134 ), .CLK(clk_10mhz_c), 
    .Q0(cw_gain_10), .Q1(cw_gain_11));
  i2c_slave_top_registers_SLICE_149 \i2c_slave_top/registers/SLICE_149 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_134 ), .CLK(clk_10mhz_c), 
    .Q0(cw_gain_12), .Q1(cw_gain_13));
  i2c_slave_top_registers_SLICE_150 \i2c_slave_top/registers/SLICE_150 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_134 ), .CLK(clk_10mhz_c), 
    .Q0(cw_gain_14), .Q1(cw_gain_15));
  SLICE_151 SLICE_151( .C1(data_19), .B1(\i2c_slave_top/registers/control_1 ), 
    .A1(data_23_N_925_19), .C0(data_16), 
    .B0(\i2c_slave_top/registers/control_1 ), .A0(data_23_N_925_19), 
    .DI1(n5979), .DI0(data_23_N_925_16), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(clk_10mhz_c), 
    .F0(data_23_N_925_16), .Q0(data_16), .F1(n5979), .Q1(data_19));
  i2c_slave_top_SLICE_152 \i2c_slave_top/SLICE_152 ( 
    .D1(\i2c_slave_top/n12639 ), .C1(\i2c_slave_top/n11569 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/registers/n12578 ), 
    .B0(\i2c_slave_top/registers/n5 ), .A0(\i2c_slave_top/n11489 ), 
    .DI0(\i2c_slave_top/registers/control_15_N_539_2 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_259 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/control_15_N_539_2 ), .Q0(data_23_N_925_19), 
    .F1(\i2c_slave_top/n11489 ));
  i2c_slave_top_registers_SLICE_153 \i2c_slave_top/registers/SLICE_153 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_96 ), .CLK(clk_10mhz_c), 
    .Q0(dds_control_0), .Q1(dds_control_1));
  i2c_slave_top_registers_SLICE_154 \i2c_slave_top/registers/SLICE_154 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_96 ), .CLK(clk_10mhz_c), 
    .Q0(dds_control_2), .Q1(dds_control_3));
  i2c_slave_top_registers_SLICE_155 \i2c_slave_top/registers/SLICE_155 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_96 ), .CLK(clk_10mhz_c), 
    .Q0(dds_control_4), .Q1(dds_control_5));
  i2c_slave_top_registers_SLICE_156 \i2c_slave_top/registers/SLICE_156 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_96 ), .CLK(clk_10mhz_c), 
    .Q0(dds_control_6), .Q1(dds_control_7));
  i2c_slave_top_registers_SLICE_157 \i2c_slave_top/registers/SLICE_157 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_104 ), .CLK(clk_10mhz_c), 
    .Q0(dds_control_8), .Q1(dds_control_9));
  i2c_slave_top_registers_SLICE_158 \i2c_slave_top/registers/SLICE_158 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_104 ), .CLK(clk_10mhz_c), 
    .Q0(dds_control_10), .Q1(dds_control_11));
  i2c_slave_top_registers_SLICE_159 \i2c_slave_top/registers/SLICE_159 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_104 ), .CLK(clk_10mhz_c), 
    .Q0(dds_control_12), .Q1(dds_control_13));
  i2c_slave_top_registers_SLICE_160 \i2c_slave_top/registers/SLICE_160 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_104 ), .CLK(clk_10mhz_c), 
    .Q0(dds_control_14), .Q1(dds_control_15));
  dds_control_interface_SLICE_161 \dds_control_interface/SLICE_161 ( 
    .D1(\dds_control_interface/state_2 ), 
    .C1(\dds_control_interface/count_7_N_1363_1 ), 
    .B1(\dds_control_interface/state_1 ), .A1(\dds_control_interface/n11 ), 
    .D0(\dds_control_interface/count_7_N_1363_0 ), 
    .C0(\dds_control_interface/n11 ), .B0(\dds_control_interface/state_2 ), 
    .A0(\dds_control_interface/state_1 ), 
    .DI1(\dds_control_interface/count_7_N_1276_1 ), 
    .DI0(\dds_control_interface/count_7_N_1276_0 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/count_7__N_1284 ), 
    .F0(\dds_control_interface/count_7_N_1276_0 ), 
    .Q0(\dds_control_interface/count_0 ), 
    .F1(\dds_control_interface/count_7_N_1276_1 ), 
    .Q1(\dds_control_interface/count_1 ));
  dds_control_interface_SLICE_162 \dds_control_interface/SLICE_162 ( 
    .D1(\dds_control_interface/state_2 ), 
    .C1(\dds_control_interface/count_7_N_1363_3 ), 
    .B1(\dds_control_interface/state_1 ), .A1(\dds_control_interface/n11 ), 
    .D0(\dds_control_interface/state_2 ), 
    .C0(\dds_control_interface/count_7_N_1363_2 ), 
    .B0(\dds_control_interface/state_1 ), .A0(\dds_control_interface/n11 ), 
    .DI1(\dds_control_interface/count_7_N_1276_3 ), 
    .DI0(\dds_control_interface/count_7_N_1276_2 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/count_7__N_1284 ), 
    .F0(\dds_control_interface/count_7_N_1276_2 ), 
    .Q0(\dds_control_interface/count_2 ), 
    .F1(\dds_control_interface/count_7_N_1276_3 ), 
    .Q1(\dds_control_interface/count_3 ));
  dds_control_interface_SLICE_163 \dds_control_interface/SLICE_163 ( 
    .D1(\dds_control_interface/count_7_N_1363_5 ), 
    .C1(\dds_control_interface/n11 ), .B1(\dds_control_interface/state_2 ), 
    .A1(\dds_control_interface/state_1 ), 
    .D0(\dds_control_interface/count_7_N_1363_4 ), 
    .C0(\dds_control_interface/n11 ), .B0(\dds_control_interface/state_2 ), 
    .A0(\dds_control_interface/state_1 ), 
    .DI1(\dds_control_interface/count_7_N_1276_5 ), 
    .DI0(\dds_control_interface/count_7_N_1276_4 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/count_7__N_1284 ), 
    .F0(\dds_control_interface/count_7_N_1276_4 ), 
    .Q0(\dds_control_interface/count_4 ), 
    .F1(\dds_control_interface/count_7_N_1276_5 ), 
    .Q1(\dds_control_interface/count_5 ));
  dds_control_interface_SLICE_164 \dds_control_interface/SLICE_164 ( 
    .D1(\dds_control_interface/count_7_N_1363_7 ), 
    .C1(\dds_control_interface/n11 ), .B1(\dds_control_interface/state_2 ), 
    .A1(\dds_control_interface/state_1 ), 
    .D0(\dds_control_interface/count_7_N_1363_6 ), 
    .C0(\dds_control_interface/n11 ), .B0(\dds_control_interface/state_2 ), 
    .A0(\dds_control_interface/state_1 ), 
    .DI1(\dds_control_interface/count_7_N_1276_7 ), 
    .DI0(\dds_control_interface/count_7_N_1276_6 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/count_7__N_1284 ), 
    .F0(\dds_control_interface/count_7_N_1276_6 ), 
    .Q0(\dds_control_interface/count_6 ), 
    .F1(\dds_control_interface/count_7_N_1276_7 ), 
    .Q1(\dds_control_interface/count_7 ));
  dds_control_interface_SLICE_165 \dds_control_interface/SLICE_165 ( 
    .B0(\dds_control_interface/cstate_1 ), 
    .A0(\dds_control_interface/cstate_0 ), 
    .DI0(\dds_control_interface/n12050 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_233 ), 
    .LSR(\dds_control_interface/n3921 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n12050 ), .Q0(\dds_control_interface/cstate_0 ));
  dds_control_interface_SLICE_166 \dds_control_interface/SLICE_166 ( 
    .C1(\dds_control_interface/n46 ), .B1(\dds_control_interface/cstate_0 ), 
    .A1(\dds_control_interface/cstate_2 ), 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_1 ), .B0(\dds_control_interface/n7021 ), 
    .A0(\dds_control_interface/n40 ), .DI0(\dds_control_interface/n12046 ), 
    .LSR(\dds_control_interface/n3921 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n12046 ), .Q0(\dds_control_interface/cstate_1 ), 
    .F1(\dds_control_interface/n7021 ));
  dds_control_interface_SLICE_167 \dds_control_interface/SLICE_167 ( 
    .B0(\dds_control_interface/cstate_0 ), 
    .A0(\dds_control_interface/cstate_1 ), .DI0(\dds_control_interface/n1772 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_233 ), 
    .LSR(\dds_control_interface/n3921 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n1772 ), .Q0(\dds_control_interface/cstate_2 ));
  dds_control_interface_SLICE_168 \dds_control_interface/SLICE_168 ( 
    .D1(dds_control_1), .C1(\dds_control_interface/n12585 ), 
    .B1(\dds_control_interface/n12608 ), .A1(\dds_control_interface/index_1 ), 
    .D0(\dds_control_interface/index_2 ), .C0(\dds_control_interface/n12585 ), 
    .B0(\dds_control_interface/index_1 ), .A0(dds_control_0), 
    .DI1(\dds_control_interface/n533 ), .DI0(\dds_control_interface/n532 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_74 ), 
    .LSR(\dds_control_interface/n12627 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n532 ), .Q0(\dds_control_interface/data_0 ), 
    .F1(\dds_control_interface/n533 ), .Q1(\dds_control_interface/data_1 ));
  dds_control_interface_SLICE_169 \dds_control_interface/SLICE_169 ( 
    .D1(dds_control_3), .C1(\dds_control_interface/n12585 ), 
    .B1(\dds_control_interface/n12608 ), .A1(\dds_control_interface/index_1 ), 
    .D0(dds_control_2), .C0(\dds_control_interface/n12585 ), 
    .B0(\dds_control_interface/n12608 ), .A0(\dds_control_interface/index_1 ), 
    .DI1(\dds_control_interface/n535 ), .DI0(\dds_control_interface/n534 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_74 ), 
    .LSR(\dds_control_interface/n12627 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n534 ), .Q0(\dds_control_interface/data_2 ), 
    .F1(\dds_control_interface/n535 ), .Q1(\dds_control_interface/data_3 ));
  dds_control_interface_SLICE_170 \dds_control_interface/SLICE_170 ( 
    .D1(dds_control_5), .C1(\dds_control_interface/n12624 ), 
    .B1(\dds_control_interface/n12625 ), .A1(\dds_control_interface/n12626 ), 
    .D0(dds_control_4), .C0(\dds_control_interface/n12585 ), 
    .B0(\dds_control_interface/n12608 ), .A0(\dds_control_interface/index_1 ), 
    .DI1(\dds_control_interface/n10177 ), .DI0(\dds_control_interface/n536 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_74 ), 
    .LSR(\dds_control_interface/n12627 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n536 ), .Q0(\dds_control_interface/data_4 ), 
    .F1(\dds_control_interface/n10177 ), .Q1(\dds_control_interface/data_5 ));
  dds_control_interface_SLICE_171 \dds_control_interface/SLICE_171 ( 
    .D1(\dds_control_interface/n12608 ), .C1(\dds_control_interface/n12585 ), 
    .B1(\dds_control_interface/index_1 ), .A1(dds_control_7), 
    .D0(\dds_control_interface/index_2 ), .C0(\dds_control_interface/n12585 ), 
    .B0(\dds_control_interface/n12624 ), .A0(dds_control_6), 
    .DI1(\dds_control_interface/n539 ), .DI0(\dds_control_interface/n538 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_74 ), 
    .LSR(\dds_control_interface/n12627 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n538 ), .Q0(\dds_control_interface/data_6 ), 
    .F1(\dds_control_interface/n539 ), .Q1(\dds_control_interface/data_7 ));
  dds_control_interface_SLICE_172 \dds_control_interface/SLICE_172 ( 
    .D1(dds_control_9), .C1(\dds_control_interface/n12585 ), 
    .B1(\dds_control_interface/n12608 ), .A1(\dds_control_interface/index_1 ), 
    .D0(dds_control_8), .C0(\dds_control_interface/n12585 ), 
    .B0(\dds_control_interface/n12608 ), .A0(\dds_control_interface/index_1 ), 
    .DI1(\dds_control_interface/n541 ), .DI0(\dds_control_interface/n540 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_74 ), 
    .LSR(\dds_control_interface/n12627 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n540 ), .Q0(\dds_control_interface/data_8 ), 
    .F1(\dds_control_interface/n541 ), .Q1(\dds_control_interface/data_9 ));
  dds_control_interface_SLICE_173 \dds_control_interface/SLICE_173 ( 
    .D1(\dds_control_interface/n12626 ), .C1(dds_control_11), 
    .B1(\dds_control_interface/test_run ), 
    .A1(\dds_control_interface/transfer_completed_temp_d ), 
    .D0(dds_control_10), .C0(\dds_control_interface/n12585 ), 
    .B0(\dds_control_interface/n12608 ), .A0(\dds_control_interface/index_1 ), 
    .DI1(\dds_control_interface/n543 ), .DI0(\dds_control_interface/n542 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_74 ), 
    .LSR(\dds_control_interface/n12627 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n542 ), .Q0(\dds_control_interface/data_10 ), 
    .F1(\dds_control_interface/n543 ), .Q1(\dds_control_interface/data_11 ));
  dds_control_interface_SLICE_174 \dds_control_interface/SLICE_174 ( 
    .D1(\dds_control_interface/n12626 ), .C1(dds_control_13), 
    .B1(\dds_control_interface/test_run ), 
    .A1(\dds_control_interface/transfer_completed_temp_d ), 
    .D0(\dds_control_interface/n12626 ), .C0(dds_control_12), 
    .B0(\dds_control_interface/test_run ), 
    .A0(\dds_control_interface/transfer_completed_temp_d ), 
    .DI1(\dds_control_interface/n545 ), .DI0(\dds_control_interface/n544 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_74 ), 
    .LSR(\dds_control_interface/n12627 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n544 ), .Q0(\dds_control_interface/data_12 ), 
    .F1(\dds_control_interface/n545 ), .Q1(\dds_control_interface/data_13 ));
  dds_control_interface_SLICE_175 \dds_control_interface/SLICE_175 ( 
    .D1(dds_control_15), .C1(\dds_control_interface/n12585 ), 
    .B1(\dds_control_interface/n12608 ), .A1(\dds_control_interface/index_1 ), 
    .D0(dds_control_14), .C0(\dds_control_interface/n12585 ), 
    .B0(\dds_control_interface/n12608 ), .A0(\dds_control_interface/index_1 ), 
    .DI1(\dds_control_interface/n547 ), .DI0(\dds_control_interface/n546 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_74 ), 
    .LSR(\dds_control_interface/n12627 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n546 ), .Q0(\dds_control_interface/data_14 ), 
    .F1(\dds_control_interface/n547 ), .Q1(\dds_control_interface/data_15 ));
  dds_control_interface_SLICE_176 \dds_control_interface/SLICE_176 ( 
    .D1(\dds_control_interface/data_1 ), 
    .C1(\dds_control_interface/data_temp_1 ), 
    .B1(\dds_control_interface/state_1 ), .A1(\dds_control_interface/state_2 ), 
    .C0(\dds_control_interface/state_1 ), .B0(\dds_control_interface/data_0 ), 
    .A0(\dds_control_interface/state_2 ), 
    .DI1(\dds_control_interface/data_temp_15_N_1285_2 ), 
    .DI0(\dds_control_interface/data_temp_15_N_1285_1 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/data_temp_15__N_1301 ), 
    .F0(\dds_control_interface/data_temp_15_N_1285_1 ), 
    .Q0(\dds_control_interface/data_temp_1 ), 
    .F1(\dds_control_interface/data_temp_15_N_1285_2 ), 
    .Q1(\dds_control_interface/data_temp_2 ));
  dds_control_interface_SLICE_177 \dds_control_interface/SLICE_177 ( 
    .D1(\dds_control_interface/data_3 ), 
    .C1(\dds_control_interface/data_temp_3 ), 
    .B1(\dds_control_interface/state_1 ), .A1(\dds_control_interface/state_2 ), 
    .D0(\dds_control_interface/data_2 ), 
    .C0(\dds_control_interface/data_temp_2 ), 
    .B0(\dds_control_interface/state_1 ), .A0(\dds_control_interface/state_2 ), 
    .DI1(\dds_control_interface/data_temp_15_N_1285_4 ), 
    .DI0(\dds_control_interface/data_temp_15_N_1285_3 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/data_temp_15__N_1301 ), 
    .F0(\dds_control_interface/data_temp_15_N_1285_3 ), 
    .Q0(\dds_control_interface/data_temp_3 ), 
    .F1(\dds_control_interface/data_temp_15_N_1285_4 ), 
    .Q1(\dds_control_interface/data_temp_4 ));
  dds_control_interface_SLICE_178 \dds_control_interface/SLICE_178 ( 
    .D1(\dds_control_interface/data_5 ), 
    .C1(\dds_control_interface/data_temp_5 ), 
    .B1(\dds_control_interface/state_1 ), .A1(\dds_control_interface/state_2 ), 
    .D0(\dds_control_interface/data_4 ), 
    .C0(\dds_control_interface/data_temp_4 ), 
    .B0(\dds_control_interface/state_1 ), .A0(\dds_control_interface/state_2 ), 
    .DI1(\dds_control_interface/data_temp_15_N_1285_6 ), 
    .DI0(\dds_control_interface/data_temp_15_N_1285_5 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/data_temp_15__N_1301 ), 
    .F0(\dds_control_interface/data_temp_15_N_1285_5 ), 
    .Q0(\dds_control_interface/data_temp_5 ), 
    .F1(\dds_control_interface/data_temp_15_N_1285_6 ), 
    .Q1(\dds_control_interface/data_temp_6 ));
  dds_control_interface_SLICE_179 \dds_control_interface/SLICE_179 ( 
    .D1(\dds_control_interface/data_7 ), 
    .C1(\dds_control_interface/data_temp_7 ), 
    .B1(\dds_control_interface/state_1 ), .A1(\dds_control_interface/state_2 ), 
    .D0(\dds_control_interface/data_6 ), 
    .C0(\dds_control_interface/data_temp_6 ), 
    .B0(\dds_control_interface/state_1 ), .A0(\dds_control_interface/state_2 ), 
    .DI1(\dds_control_interface/data_temp_15_N_1285_8 ), 
    .DI0(\dds_control_interface/data_temp_15_N_1285_7 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/data_temp_15__N_1301 ), 
    .F0(\dds_control_interface/data_temp_15_N_1285_7 ), 
    .Q0(\dds_control_interface/data_temp_7 ), 
    .F1(\dds_control_interface/data_temp_15_N_1285_8 ), 
    .Q1(\dds_control_interface/data_temp_8 ));
  dds_control_interface_SLICE_180 \dds_control_interface/SLICE_180 ( 
    .D1(\dds_control_interface/data_9 ), 
    .C1(\dds_control_interface/data_temp_9 ), 
    .B1(\dds_control_interface/state_1 ), .A1(\dds_control_interface/state_2 ), 
    .D0(\dds_control_interface/data_8 ), 
    .C0(\dds_control_interface/data_temp_8 ), 
    .B0(\dds_control_interface/state_1 ), .A0(\dds_control_interface/state_2 ), 
    .DI1(\dds_control_interface/data_temp_15_N_1285_10 ), 
    .DI0(\dds_control_interface/data_temp_15_N_1285_9 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/data_temp_15__N_1301 ), 
    .F0(\dds_control_interface/data_temp_15_N_1285_9 ), 
    .Q0(\dds_control_interface/data_temp_9 ), 
    .F1(\dds_control_interface/data_temp_15_N_1285_10 ), 
    .Q1(\dds_control_interface/data_temp_10 ));
  dds_control_interface_SLICE_181 \dds_control_interface/SLICE_181 ( 
    .D1(\dds_control_interface/data_11 ), 
    .C1(\dds_control_interface/data_temp_11 ), 
    .B1(\dds_control_interface/state_1 ), .A1(\dds_control_interface/state_2 ), 
    .D0(\dds_control_interface/data_10 ), 
    .C0(\dds_control_interface/data_temp_10 ), 
    .B0(\dds_control_interface/state_1 ), .A0(\dds_control_interface/state_2 ), 
    .DI1(\dds_control_interface/data_temp_15_N_1285_12 ), 
    .DI0(\dds_control_interface/data_temp_15_N_1285_11 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/data_temp_15__N_1301 ), 
    .F0(\dds_control_interface/data_temp_15_N_1285_11 ), 
    .Q0(\dds_control_interface/data_temp_11 ), 
    .F1(\dds_control_interface/data_temp_15_N_1285_12 ), 
    .Q1(\dds_control_interface/data_temp_12 ));
  dds_control_interface_SLICE_182 \dds_control_interface/SLICE_182 ( 
    .D1(\dds_control_interface/data_13 ), 
    .C1(\dds_control_interface/data_temp_13 ), 
    .B1(\dds_control_interface/state_1 ), .A1(\dds_control_interface/state_2 ), 
    .D0(\dds_control_interface/data_12 ), 
    .C0(\dds_control_interface/data_temp_12 ), 
    .B0(\dds_control_interface/state_1 ), .A0(\dds_control_interface/state_2 ), 
    .DI1(\dds_control_interface/data_temp_15_N_1285_14 ), 
    .DI0(\dds_control_interface/data_temp_15_N_1285_13 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/data_temp_15__N_1301 ), 
    .F0(\dds_control_interface/data_temp_15_N_1285_13 ), 
    .Q0(\dds_control_interface/data_temp_13 ), 
    .F1(\dds_control_interface/data_temp_15_N_1285_14 ), 
    .Q1(\dds_control_interface/data_temp_14 ));
  dds_control_interface_SLICE_183 \dds_control_interface/SLICE_183 ( 
    .D0(\dds_control_interface/data_14 ), 
    .C0(\dds_control_interface/data_temp_14 ), 
    .B0(\dds_control_interface/state_1 ), .A0(\dds_control_interface/state_2 ), 
    .DI0(\dds_control_interface/data_temp_15_N_1285_15 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/data_temp_15__N_1301 ), 
    .F0(\dds_control_interface/data_temp_15_N_1285_15 ), 
    .Q0(\dds_control_interface/data_temp_15 ));
  dds_control_interface_SLICE_184 \dds_control_interface/SLICE_184 ( 
    .B1(\dds_control_interface/index_1 ), .A1(\dds_control_interface/index_0 ), 
    .D0(\dds_control_interface/n12626 ), .C0(\dds_control_interface/n12625 ), 
    .B0(\dds_control_interface/index_2 ), .A0(\dds_control_interface/n12624 ), 
    .DI0(\dds_control_interface/data_valid_N_1436 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_9 ), 
    .LSR(\dds_control_interface/n12627 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/data_valid_N_1436 ), 
    .Q0(\dds_control_interface/data_valid ), 
    .F1(\dds_control_interface/n12624 ));
  dds_control_interface_SLICE_186 \dds_control_interface/SLICE_186 ( 
    .C1(\dds_control_interface/index_2 ), .B1(\dds_control_interface/index_1 ), 
    .A1(\dds_control_interface/index_0 ), .C0(\dds_control_interface/index_2 ), 
    .B0(\dds_control_interface/index_1 ), .A0(\dds_control_interface/index_0 ), 
    .DI1(\dds_control_interface/n19 ), .DI0(\dds_control_interface/n9783 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_230 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n9783 ), .Q0(\dds_control_interface/index_0 ), 
    .F1(\dds_control_interface/n19 ), .Q1(\dds_control_interface/index_1 ));
  dds_control_interface_SLICE_187 \dds_control_interface/SLICE_187 ( 
    .C0(\dds_control_interface/index_2 ), .B0(\dds_control_interface/index_1 ), 
    .A0(\dds_control_interface/index_0 ), .DI0(\dds_control_interface/n18 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_230 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n18 ), .Q0(\dds_control_interface/index_2 ));
  dds_control_interface_SLICE_188 \dds_control_interface/SLICE_188 ( 
    .A0(\dds_control_interface/ss0_temp_d ), 
    .DI0(\dds_control_interface/ss0_temp_d_N_1447 ), 
    .LSR(\dds_control_interface/ss0_temp ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/ss0_temp_d_N_1447 ), 
    .Q0(\dds_control_interface/mosi_reset ));
  dds_control_interface_SLICE_189 \dds_control_interface/SLICE_189 ( 
    .C1(\dds_control_interface/n10433 ), .B1(\dds_control_interface/n9734 ), 
    .A1(\dds_control_interface/n10303 ), .D0(\dds_control_interface/cstate_1 ), 
    .C0(\dds_control_interface/cstate_0 ), .B0(\dds_control_interface/n46 ), 
    .A0(\dds_control_interface/sck_temp ), 
    .DI0(\dds_control_interface/n11014 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_262 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n11014 ), .Q0(\dds_control_interface/sck_temp ), 
    .F1(\dds_control_interface/n46 ));
  dds_control_interface_SLICE_190 \dds_control_interface/SLICE_190 ( 
    .M0(\dds_control_interface/sck_temp ), .CLK(clk_10mhz_c), 
    .Q0(\dds_control_interface/sck_temp2 ));
  dds_control_interface_SLICE_191 \dds_control_interface/SLICE_191 ( 
    .A0(\dds_control_interface/cstate_1 ), 
    .DI0(\dds_control_interface/n12619 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_262 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n12619 ), .Q0(\dds_control_interface/ss0_temp ));
  dds_control_interface_SLICE_192 \dds_control_interface/SLICE_192 ( 
    .M0(\dds_control_interface/ss0_temp ), 
    .LSR(\dds_control_interface/ss0_temp_dd ), .CLK(clk_10mhz_c), 
    .Q0(\dds_control_interface/ss0_temp2 ));
  dds_control_interface_SLICE_193 \dds_control_interface/SLICE_193 ( 
    .M0(\dds_control_interface/ss0_temp ), .CLK(clk_10mhz_c), 
    .Q0(\dds_control_interface/ss0_temp_d ));
  dds_control_interface_SLICE_194 \dds_control_interface/SLICE_194 ( 
    .M0(\dds_control_interface/ss0_temp ), .CLK(clk_10mhz_c), 
    .Q0(\dds_control_interface/ss0_temp_dd ));
  dds_control_interface_SLICE_195 \dds_control_interface/SLICE_195 ( 
    .B1(\dds_control_interface/state_2 ), .A1(\dds_control_interface/state_1 ), 
    .A0(\dds_control_interface/state_2 ), .DI1(\dds_control_interface/n12646 ), 
    .DI0(\dds_control_interface/n12605 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/state_3__N_1257 ), 
    .F0(\dds_control_interface/n12605 ), .Q0(\dds_control_interface/state_1 ), 
    .F1(\dds_control_interface/n12646 ), .Q1(\dds_control_interface/state_2 ));
  dds_control_interface_SLICE_196 \dds_control_interface/SLICE_196 ( 
    .M0(static_control_7), .CE(\dds_control_interface/clk_10mhz_c_enable_59 ), 
    .CLK(clk_10mhz_c), .Q0(\dds_control_interface/test_mode_d ));
  dds_control_interface_SLICE_197 \dds_control_interface/SLICE_197 ( 
    .B0(static_control_7), .A0(\dds_control_interface/test_mode_d ), 
    .DI0(\dds_control_interface/n4260 ), .LSR(\dds_control_interface/n12627 ), 
    .CLK(clk_10mhz_c), .F0(\dds_control_interface/n4260 ), 
    .Q0(\dds_control_interface/test_run ));
  dds_control_interface_SLICE_198 \dds_control_interface/SLICE_198 ( 
    .D1(\dds_control_interface/cstate_2 ), 
    .C1(\dds_control_interface/n9_adj_1746 ), 
    .B1(\dds_control_interface/total_count_1 ), 
    .A1(\dds_control_interface/cstate_1 ), 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/n9_adj_1735 ), 
    .B0(\dds_control_interface/total_count_0 ), 
    .A0(\dds_control_interface/cstate_1 ), 
    .DI1(\dds_control_interface/total_count_15_N_1319_1 ), 
    .DI0(\dds_control_interface/total_count_15_N_1319_0 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/total_count_15_N_1319_0 ), 
    .Q0(\dds_control_interface/total_count_0 ), 
    .F1(\dds_control_interface/total_count_15_N_1319_1 ), 
    .Q1(\dds_control_interface/total_count_1 ));
  dds_control_interface_SLICE_199 \dds_control_interface/SLICE_199 ( 
    .D1(\dds_control_interface/cstate_2 ), 
    .C1(\dds_control_interface/n9_adj_1744 ), 
    .B1(\dds_control_interface/total_count_3 ), 
    .A1(\dds_control_interface/cstate_1 ), 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/n9_adj_1745 ), 
    .B0(\dds_control_interface/total_count_2 ), 
    .A0(\dds_control_interface/cstate_1 ), 
    .DI1(\dds_control_interface/total_count_15_N_1319_3 ), 
    .DI0(\dds_control_interface/total_count_15_N_1319_2 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/total_count_15_N_1319_2 ), 
    .Q0(\dds_control_interface/total_count_2 ), 
    .F1(\dds_control_interface/total_count_15_N_1319_3 ), 
    .Q1(\dds_control_interface/total_count_3 ));
  dds_control_interface_SLICE_200 \dds_control_interface/SLICE_200 ( 
    .D1(\dds_control_interface/total_count_5 ), 
    .C1(\dds_control_interface/n9_adj_1741 ), 
    .B1(\dds_control_interface/cstate_2 ), 
    .A1(\dds_control_interface/cstate_1 ), 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/n9_adj_1743 ), 
    .B0(\dds_control_interface/total_count_4 ), 
    .A0(\dds_control_interface/cstate_1 ), 
    .DI1(\dds_control_interface/total_count_15_N_1319_5 ), 
    .DI0(\dds_control_interface/total_count_15_N_1319_4 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/total_count_15_N_1319_4 ), 
    .Q0(\dds_control_interface/total_count_4 ), 
    .F1(\dds_control_interface/total_count_15_N_1319_5 ), 
    .Q1(\dds_control_interface/total_count_5 ));
  dds_control_interface_SLICE_201 \dds_control_interface/SLICE_201 ( 
    .D1(\dds_control_interface/cstate_2 ), 
    .C1(\dds_control_interface/n9_adj_1739 ), 
    .B1(\dds_control_interface/total_count_7 ), 
    .A1(\dds_control_interface/cstate_1 ), 
    .D0(\dds_control_interface/total_count_6 ), 
    .C0(\dds_control_interface/n9_adj_1740 ), 
    .B0(\dds_control_interface/cstate_2 ), 
    .A0(\dds_control_interface/cstate_1 ), 
    .DI1(\dds_control_interface/total_count_15_N_1319_7 ), 
    .DI0(\dds_control_interface/total_count_15_N_1319_6 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/total_count_15_N_1319_6 ), 
    .Q0(\dds_control_interface/total_count_6 ), 
    .F1(\dds_control_interface/total_count_15_N_1319_7 ), 
    .Q1(\dds_control_interface/total_count_7 ));
  dds_control_interface_SLICE_202 \dds_control_interface/SLICE_202 ( 
    .D1(\dds_control_interface/total_count_9 ), 
    .C1(\dds_control_interface/n9_adj_1733 ), 
    .B1(\dds_control_interface/cstate_2 ), 
    .A1(\dds_control_interface/cstate_1 ), 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/n9_adj_1734 ), 
    .B0(\dds_control_interface/total_count_8 ), 
    .A0(\dds_control_interface/cstate_1 ), 
    .DI1(\dds_control_interface/total_count_15_N_1319_9 ), 
    .DI0(\dds_control_interface/total_count_15_N_1319_8 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/total_count_15_N_1319_8 ), 
    .Q0(\dds_control_interface/total_count_8 ), 
    .F1(\dds_control_interface/total_count_15_N_1319_9 ), 
    .Q1(\dds_control_interface/total_count_9 ));
  dds_control_interface_SLICE_203 \dds_control_interface/SLICE_203 ( 
    .D1(\dds_control_interface/cstate_2 ), .C1(\dds_control_interface/n9 ), 
    .B1(\dds_control_interface/total_count_11 ), 
    .A1(\dds_control_interface/cstate_1 ), 
    .D0(\dds_control_interface/total_count_10 ), 
    .C0(\dds_control_interface/n9_adj_1732 ), 
    .B0(\dds_control_interface/cstate_2 ), 
    .A0(\dds_control_interface/cstate_1 ), 
    .DI1(\dds_control_interface/total_count_15_N_1319_11 ), 
    .DI0(\dds_control_interface/total_count_15_N_1319_10 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/total_count_15_N_1319_10 ), 
    .Q0(\dds_control_interface/total_count_10 ), 
    .F1(\dds_control_interface/total_count_15_N_1319_11 ), 
    .Q1(\dds_control_interface/total_count_11 ));
  dds_control_interface_SLICE_204 \dds_control_interface/SLICE_204 ( 
    .D1(\dds_control_interface/total_count_13 ), 
    .C1(\dds_control_interface/n9_adj_1738 ), 
    .B1(\dds_control_interface/cstate_2 ), 
    .A1(\dds_control_interface/cstate_1 ), 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/n9_adj_1742 ), 
    .B0(\dds_control_interface/total_count_12 ), 
    .A0(\dds_control_interface/cstate_1 ), 
    .DI1(\dds_control_interface/total_count_15_N_1319_13 ), 
    .DI0(\dds_control_interface/total_count_15_N_1319_12 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/total_count_15_N_1319_12 ), 
    .Q0(\dds_control_interface/total_count_12 ), 
    .F1(\dds_control_interface/total_count_15_N_1319_13 ), 
    .Q1(\dds_control_interface/total_count_13 ));
  dds_control_interface_SLICE_205 \dds_control_interface/SLICE_205 ( 
    .D1(\dds_control_interface/cstate_2 ), 
    .C1(\dds_control_interface/n9_adj_1736 ), 
    .B1(\dds_control_interface/total_count_15 ), 
    .A1(\dds_control_interface/cstate_1 ), 
    .D0(\dds_control_interface/total_count_14 ), 
    .C0(\dds_control_interface/n9_adj_1737 ), 
    .B0(\dds_control_interface/cstate_2 ), 
    .A0(\dds_control_interface/cstate_1 ), 
    .DI1(\dds_control_interface/total_count_15_N_1319_15 ), 
    .DI0(\dds_control_interface/total_count_15_N_1319_14 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/total_count_15_N_1319_14 ), 
    .Q0(\dds_control_interface/total_count_14 ), 
    .F1(\dds_control_interface/total_count_15_N_1319_15 ), 
    .Q1(\dds_control_interface/total_count_15 ));
  dds_control_interface_SLICE_206 \dds_control_interface/SLICE_206 ( 
    .C1(\dds_control_interface/cstate_2 ), 
    .B1(\dds_control_interface/cstate_1 ), 
    .A1(\dds_control_interface/cstate_0 ), 
    .C0(\dds_control_interface/cstate_2 ), 
    .B0(\dds_control_interface/cstate_0 ), 
    .A0(\dds_control_interface/cstate_1 ), .DI0(\dds_control_interface/n3921 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_8 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n3921 ), 
    .Q0(\dds_control_interface/transfer_completed_temp ), 
    .F1(\dds_control_interface/clk_10mhz_c_enable_8 ));
  dds_control_interface_SLICE_208 \dds_control_interface/SLICE_208 ( 
    .DI0(\n12948\000/BUF1 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_223 ), .CLK(clk_10mhz_c), 
    .F0(\n12948\000/BUF1 ), .Q0(\dds_control_interface/transfer_done ));
  i2c_slave_top_registers_SLICE_209 \i2c_slave_top/registers/SLICE_209 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_214 ), .CLK(clk_10mhz_c), 
    .Q0(dds_current_limit_0), .Q1(dds_current_limit_1));
  i2c_slave_top_registers_SLICE_210 \i2c_slave_top/registers/SLICE_210 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_214 ), .CLK(clk_10mhz_c), 
    .Q0(dds_current_limit_2), .Q1(dds_current_limit_3));
  i2c_slave_top_registers_SLICE_211 \i2c_slave_top/registers/SLICE_211 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_214 ), .CLK(clk_10mhz_c), 
    .Q0(dds_current_limit_4), .Q1(dds_current_limit_5));
  i2c_slave_top_registers_SLICE_212 \i2c_slave_top/registers/SLICE_212 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_214 ), .CLK(clk_10mhz_c), 
    .Q0(dds_current_limit_6), .Q1(dds_current_limit_7));
  i2c_slave_top_registers_SLICE_213 \i2c_slave_top/registers/SLICE_213 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_222 ), .CLK(clk_10mhz_c), 
    .Q0(dds_current_limit_8), .Q1(dds_current_limit_9));
  i2c_slave_top_registers_SLICE_214 \i2c_slave_top/registers/SLICE_214 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_222 ), .CLK(clk_10mhz_c), 
    .Q0(dds_current_limit_10), .Q1(dds_current_limit_11));
  i2c_slave_top_registers_SLICE_215 \i2c_slave_top/registers/SLICE_215 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_222 ), .CLK(clk_10mhz_c), 
    .Q0(dds_current_limit_12), .Q1(dds_current_limit_13));
  i2c_slave_top_registers_SLICE_216 \i2c_slave_top/registers/SLICE_216 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_222 ), .CLK(clk_10mhz_c), 
    .Q0(dds_current_limit_14), .Q1(dds_current_limit_15));
  i2c_slave_top_registers_SLICE_217 \i2c_slave_top/registers/SLICE_217 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_111 ), .CLK(clk_10mhz_c), 
    .Q0(dds_gain_0), .Q1(dds_gain_1));
  i2c_slave_top_registers_SLICE_218 \i2c_slave_top/registers/SLICE_218 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_111 ), .CLK(clk_10mhz_c), 
    .Q0(dds_gain_2), .Q1(dds_gain_3));
  i2c_slave_top_registers_SLICE_219 \i2c_slave_top/registers/SLICE_219 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_111 ), .CLK(clk_10mhz_c), 
    .Q0(dds_gain_4), .Q1(dds_gain_5));
  i2c_slave_top_registers_SLICE_220 \i2c_slave_top/registers/SLICE_220 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_111 ), .CLK(clk_10mhz_c), 
    .Q0(dds_gain_6), .Q1(dds_gain_7));
  i2c_slave_top_registers_SLICE_221 \i2c_slave_top/registers/SLICE_221 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_119 ), .CLK(clk_10mhz_c), 
    .Q0(dds_gain_8), .Q1(dds_gain_9));
  i2c_slave_top_registers_SLICE_222 \i2c_slave_top/registers/SLICE_222 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_119 ), .CLK(clk_10mhz_c), 
    .Q0(dds_gain_10), .Q1(dds_gain_11));
  i2c_slave_top_registers_SLICE_223 \i2c_slave_top/registers/SLICE_223 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_119 ), .CLK(clk_10mhz_c), 
    .Q0(dds_gain_12), .Q1(dds_gain_13));
  i2c_slave_top_registers_SLICE_224 \i2c_slave_top/registers/SLICE_224 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_119 ), .CLK(clk_10mhz_c), 
    .Q0(dds_gain_14), .Q1(dds_gain_15));
  dds_gain_control_SLICE_225 \dds_gain_control/SLICE_225 ( 
    .B1(\dds_gain_control/n9264 ), .A1(\dds_gain_control/n212 ), 
    .B0(\dds_gain_control/n213 ), .A0(\dds_gain_control/n9264 ), 
    .DI1(\dds_gain_control/count_7_N_1141_1 ), 
    .DI0(\dds_gain_control/count_7_N_1141_0 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_20 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .F0(\dds_gain_control/count_7_N_1141_0 ), .Q0(\dds_gain_control/count_0 ), 
    .F1(\dds_gain_control/count_7_N_1141_1 ), .Q1(\dds_gain_control/count_1 ));
  dds_gain_control_SLICE_226 \dds_gain_control/SLICE_226 ( 
    .B1(\dds_gain_control/n210 ), .A1(\dds_gain_control/n9264 ), 
    .B0(\dds_gain_control/n9264 ), .A0(\dds_gain_control/n211 ), 
    .DI1(\dds_gain_control/count_7_N_1141_3 ), 
    .DI0(\dds_gain_control/count_7_N_1141_2 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_20 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .F0(\dds_gain_control/count_7_N_1141_2 ), .Q0(\dds_gain_control/count_2 ), 
    .F1(\dds_gain_control/count_7_N_1141_3 ), .Q1(\dds_gain_control/count_3 ));
  dds_gain_control_SLICE_227 \dds_gain_control/SLICE_227 ( 
    .B1(\dds_gain_control/n208 ), .A1(\dds_gain_control/n9264 ), 
    .B0(\dds_gain_control/n9264 ), .A0(\dds_gain_control/n209 ), 
    .DI1(\dds_gain_control/count_7_N_1141_5 ), 
    .DI0(\dds_gain_control/count_7_N_1141_4 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_20 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .F0(\dds_gain_control/count_7_N_1141_4 ), .Q0(\dds_gain_control/count_4 ), 
    .F1(\dds_gain_control/count_7_N_1141_5 ), .Q1(\dds_gain_control/count_5 ));
  dds_gain_control_SLICE_228 \dds_gain_control/SLICE_228 ( 
    .B1(\dds_gain_control/n206 ), .A1(\dds_gain_control/n9264 ), 
    .B0(\dds_gain_control/n207 ), .A0(\dds_gain_control/n9264 ), 
    .DI1(\dds_gain_control/count_7_N_1141_7 ), 
    .DI0(\dds_gain_control/count_7_N_1141_6 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_20 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .F0(\dds_gain_control/count_7_N_1141_6 ), .Q0(\dds_gain_control/count_6 ), 
    .F1(\dds_gain_control/count_7_N_1141_7 ), .Q1(\dds_gain_control/count_7 ));
  dds_gain_control_SLICE_229 \dds_gain_control/SLICE_229 ( 
    .C1(\dds_gain_control/n6859 ), .B1(\dds_gain_control/data_20 ), 
    .A1(\dds_gain_control/cstate_0 ), .B0(\dds_gain_control/data_20 ), 
    .A0(\dds_gain_control/cstate_0 ), .DI1(\dds_gain_control/n4618 ), 
    .DI0(\dds_gain_control/n12620 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_232 ), 
    .LSR(\dds_gain_control/n3915 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/n12620 ), .Q0(\dds_gain_control/cstate_0 ), 
    .F1(\dds_gain_control/n4618 ), .Q1(\dds_gain_control/cstate_1 ));
  dds_gain_control_SLICE_230 \dds_gain_control/SLICE_230 ( 
    .B1(\dds_gain_control/total_count_14 ), 
    .A1(\dds_gain_control/total_count_7 ), .B0(\dds_gain_control/n6859 ), 
    .A0(\dds_gain_control/cstate_0 ), .DI0(\dds_gain_control/n12542 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_232 ), 
    .LSR(\dds_gain_control/n3915 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/n12542 ), .Q0(\dds_gain_control/cstate_2 ), 
    .F1(\dds_gain_control/n11657 ));
  dds_gain_control_SLICE_231 \dds_gain_control/SLICE_231 ( 
    .M1(cw_current_limit_1), .M0(cw_current_limit_0), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_current_limit_reg_0 ), 
    .Q1(\dds_gain_control/cw_current_limit_reg_1 ));
  dds_gain_control_SLICE_232 \dds_gain_control/SLICE_232 ( 
    .M1(cw_current_limit_3), .M0(cw_current_limit_2), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_current_limit_reg_2 ), 
    .Q1(\dds_gain_control/cw_current_limit_reg_3 ));
  dds_gain_control_SLICE_233 \dds_gain_control/SLICE_233 ( 
    .M1(cw_current_limit_5), .M0(cw_current_limit_4), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_current_limit_reg_4 ), 
    .Q1(\dds_gain_control/cw_current_limit_reg_5 ));
  dds_gain_control_SLICE_234 \dds_gain_control/SLICE_234 ( 
    .M1(cw_current_limit_7), .M0(cw_current_limit_6), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_current_limit_reg_6 ), 
    .Q1(\dds_gain_control/cw_current_limit_reg_7 ));
  dds_gain_control_SLICE_235 \dds_gain_control/SLICE_235 ( 
    .M1(cw_current_limit_9), .M0(cw_current_limit_8), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_current_limit_reg_8 ), 
    .Q1(\dds_gain_control/cw_current_limit_reg_9 ));
  dds_gain_control_SLICE_236 \dds_gain_control/SLICE_236 ( 
    .M1(cw_current_limit_11), .M0(cw_current_limit_10), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_current_limit_reg_10 ), 
    .Q1(\dds_gain_control/cw_current_limit_reg_11 ));
  dds_gain_control_SLICE_237 \dds_gain_control/SLICE_237 ( 
    .M1(cw_current_limit_13), .M0(cw_current_limit_12), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_current_limit_reg_12 ), 
    .Q1(\dds_gain_control/cw_current_limit_reg_13 ));
  dds_gain_control_SLICE_238 \dds_gain_control/SLICE_238 ( 
    .M1(cw_current_limit_15), .M0(cw_current_limit_14), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_current_limit_reg_14 ), 
    .Q1(\dds_gain_control/cw_current_limit_reg_15 ));
  dds_gain_control_SLICE_239 \dds_gain_control/SLICE_239 ( .M1(cw_gain_1), 
    .M0(cw_gain_0), .CE(\dds_gain_control/clk_10mhz_c_enable_251 ), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_gain_reg_0 ), 
    .Q1(\dds_gain_control/cw_gain_reg_1 ));
  dds_gain_control_SLICE_240 \dds_gain_control/SLICE_240 ( .M1(cw_gain_3), 
    .M0(cw_gain_2), .CE(\dds_gain_control/clk_10mhz_c_enable_251 ), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_gain_reg_2 ), 
    .Q1(\dds_gain_control/cw_gain_reg_3 ));
  dds_gain_control_SLICE_241 \dds_gain_control/SLICE_241 ( .M1(cw_gain_5), 
    .M0(cw_gain_4), .CE(\dds_gain_control/clk_10mhz_c_enable_251 ), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_gain_reg_4 ), 
    .Q1(\dds_gain_control/cw_gain_reg_5 ));
  dds_gain_control_SLICE_242 \dds_gain_control/SLICE_242 ( .M1(cw_gain_7), 
    .M0(cw_gain_6), .CE(\dds_gain_control/clk_10mhz_c_enable_251 ), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_gain_reg_6 ), 
    .Q1(\dds_gain_control/cw_gain_reg_7 ));
  dds_gain_control_SLICE_243 \dds_gain_control/SLICE_243 ( .M1(cw_gain_9), 
    .M0(cw_gain_8), .CE(\dds_gain_control/clk_10mhz_c_enable_251 ), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_gain_reg_8 ), 
    .Q1(\dds_gain_control/cw_gain_reg_9 ));
  dds_gain_control_SLICE_244 \dds_gain_control/SLICE_244 ( .M1(cw_gain_11), 
    .M0(cw_gain_10), .CE(\dds_gain_control/clk_10mhz_c_enable_251 ), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_gain_reg_10 ), 
    .Q1(\dds_gain_control/cw_gain_reg_11 ));
  dds_gain_control_SLICE_245 \dds_gain_control/SLICE_245 ( .M1(cw_gain_13), 
    .M0(cw_gain_12), .CE(\dds_gain_control/clk_10mhz_c_enable_251 ), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_gain_reg_12 ), 
    .Q1(\dds_gain_control/cw_gain_reg_13 ));
  dds_gain_control_SLICE_246 \dds_gain_control/SLICE_246 ( .M1(cw_gain_15), 
    .M0(cw_gain_14), .CE(\dds_gain_control/clk_10mhz_c_enable_251 ), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/cw_gain_reg_14 ), 
    .Q1(\dds_gain_control/cw_gain_reg_15 ));
  dds_gain_control_SLICE_247 \dds_gain_control/SLICE_247 ( 
    .D1(\dds_gain_control/dac_count_1 ), .C1(\dds_gain_control/dac_count_2 ), 
    .B1(\dds_gain_control/dac_count_0 ), .A1(\dds_gain_control/dac_count_3 ), 
    .C0(\dds_gain_control/dac_state_1 ), .B0(\dds_gain_control/n50 ), 
    .A0(\dds_gain_control/n5540 ), .DI0(\dds_gain_control/n12543 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_265 ), 
    .LSR(\dds_gain_control/n6870 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/n12543 ), .Q0(\dds_gain_control/dac_state_0 ), 
    .F1(\dds_gain_control/n50 ));
  dds_gain_control_SLICE_248 \dds_gain_control/SLICE_248 ( 
    .D1(\dds_gain_control/n11373 ), .C1(\dds_gain_control/n11375 ), 
    .B1(\dds_gain_control/n11367 ), .A1(\dds_gain_control/n11383 ), 
    .C0(\dds_gain_control/dac_state_0 ), .B0(\dds_gain_control/n8 ), 
    .A0(\dds_gain_control/n5540 ), .DI0(\dds_gain_control/n3609 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_265 ), 
    .LSR(\dds_gain_control/n6840 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/n3609 ), .Q0(\dds_gain_control/dac_state_1 ), 
    .F1(\dds_gain_control/n5540 ));
  dds_gain_control_SLICE_249 \dds_gain_control/SLICE_249 ( 
    .C1(\dds_gain_control/dac_state_1 ), .B1(\dds_gain_control/dac_state_0 ), 
    .A1(\dds_gain_control/dac_state_2 ), .D0(\dds_gain_control/dac_state_2 ), 
    .C0(\dds_gain_control/dac_state_0 ), .B0(\dds_gain_control/n12946 ), 
    .A0(\dds_gain_control/dac_state_1 ), .DI0(\dds_gain_control/n10966 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_265 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/n10966 ), .Q0(\dds_gain_control/dac_state_2 ), 
    .F1(\dds_gain_control/clk_10mhz_c_enable_229 ));
  dds_gain_control_SLICE_250 \dds_gain_control/SLICE_250 ( 
    .C1(data_23_N_925_19), .B1(\dds_gain_control/cw_gain_reg_1 ), 
    .A1(\dds_gain_control/dds_gain_reg_1 ), .C0(data_23_N_925_19), 
    .B0(\dds_gain_control/cw_gain_reg_0 ), 
    .A0(\dds_gain_control/dds_gain_reg_0 ), 
    .DI1(\dds_gain_control/data_23_N_925_1 ), 
    .DI0(\dds_gain_control/data_23_N_925_0 ), .CE(clk_10mhz_c_enable_54), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/data_23_N_925_0 ), .Q0(\dds_gain_control/data_0 ), 
    .F1(\dds_gain_control/data_23_N_925_1 ), .Q1(\dds_gain_control/data_1 ));
  dds_gain_control_SLICE_251 \dds_gain_control/SLICE_251 ( 
    .C1(data_23_N_925_19), .B1(\dds_gain_control/cw_gain_reg_3 ), 
    .A1(\dds_gain_control/dds_gain_reg_3 ), .C0(data_23_N_925_19), 
    .B0(\dds_gain_control/cw_gain_reg_2 ), 
    .A0(\dds_gain_control/dds_gain_reg_2 ), 
    .DI1(\dds_gain_control/data_23_N_925_3 ), 
    .DI0(\dds_gain_control/data_23_N_925_2 ), .CE(clk_10mhz_c_enable_54), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/data_23_N_925_2 ), .Q0(\dds_gain_control/data_2 ), 
    .F1(\dds_gain_control/data_23_N_925_3 ), .Q1(\dds_gain_control/data_3 ));
  dds_gain_control_SLICE_252 \dds_gain_control/SLICE_252 ( 
    .C1(data_23_N_925_19), .B1(\dds_gain_control/cw_gain_reg_5 ), 
    .A1(\dds_gain_control/dds_gain_reg_5 ), .C0(data_23_N_925_19), 
    .B0(\dds_gain_control/cw_gain_reg_4 ), 
    .A0(\dds_gain_control/dds_gain_reg_4 ), 
    .DI1(\dds_gain_control/data_23_N_925_5 ), 
    .DI0(\dds_gain_control/data_23_N_925_4 ), .CE(clk_10mhz_c_enable_54), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/data_23_N_925_4 ), .Q0(\dds_gain_control/data_4 ), 
    .F1(\dds_gain_control/data_23_N_925_5 ), .Q1(\dds_gain_control/data_5 ));
  dds_gain_control_SLICE_253 \dds_gain_control/SLICE_253 ( 
    .C1(data_23_N_925_19), .B1(\dds_gain_control/cw_gain_reg_7 ), 
    .A1(\dds_gain_control/dds_gain_reg_7 ), .C0(data_23_N_925_19), 
    .B0(\dds_gain_control/cw_gain_reg_6 ), 
    .A0(\dds_gain_control/dds_gain_reg_6 ), 
    .DI1(\dds_gain_control/data_23_N_925_7 ), 
    .DI0(\dds_gain_control/data_23_N_925_6 ), .CE(clk_10mhz_c_enable_54), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/data_23_N_925_6 ), .Q0(\dds_gain_control/data_6 ), 
    .F1(\dds_gain_control/data_23_N_925_7 ), .Q1(\dds_gain_control/data_7 ));
  dds_gain_control_SLICE_254 \dds_gain_control/SLICE_254 ( 
    .C1(data_23_N_925_19), .B1(\dds_gain_control/cw_gain_reg_9 ), 
    .A1(\dds_gain_control/dds_gain_reg_9 ), .C0(data_23_N_925_19), 
    .B0(\dds_gain_control/cw_gain_reg_8 ), 
    .A0(\dds_gain_control/dds_gain_reg_8 ), 
    .DI1(\dds_gain_control/data_23_N_925_9 ), 
    .DI0(\dds_gain_control/data_23_N_925_8 ), .CE(clk_10mhz_c_enable_54), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/data_23_N_925_8 ), .Q0(\dds_gain_control/data_8 ), 
    .F1(\dds_gain_control/data_23_N_925_9 ), .Q1(\dds_gain_control/data_9 ));
  dds_gain_control_SLICE_255 \dds_gain_control/SLICE_255 ( 
    .C1(data_23_N_925_19), .B1(\dds_gain_control/cw_gain_reg_11 ), 
    .A1(\dds_gain_control/dds_gain_reg_11 ), .C0(data_23_N_925_19), 
    .B0(\dds_gain_control/cw_gain_reg_10 ), 
    .A0(\dds_gain_control/dds_gain_reg_10 ), 
    .DI1(\dds_gain_control/data_23_N_925_11 ), 
    .DI0(\dds_gain_control/data_23_N_925_10 ), .CE(clk_10mhz_c_enable_54), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/data_23_N_925_10 ), .Q0(\dds_gain_control/data_10 ), 
    .F1(\dds_gain_control/data_23_N_925_11 ), .Q1(\dds_gain_control/data_11 ));
  dds_gain_control_SLICE_256 \dds_gain_control/SLICE_256 ( 
    .C1(data_23_N_925_19), .B1(\dds_gain_control/cw_gain_reg_13 ), 
    .A1(\dds_gain_control/dds_gain_reg_13 ), .C0(data_23_N_925_19), 
    .B0(\dds_gain_control/cw_gain_reg_12 ), 
    .A0(\dds_gain_control/dds_gain_reg_12 ), 
    .DI1(\dds_gain_control/data_23_N_925_13 ), 
    .DI0(\dds_gain_control/data_23_N_925_12 ), .CE(clk_10mhz_c_enable_54), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/data_23_N_925_12 ), .Q0(\dds_gain_control/data_12 ), 
    .F1(\dds_gain_control/data_23_N_925_13 ), .Q1(\dds_gain_control/data_13 ));
  dds_gain_control_SLICE_257 \dds_gain_control/SLICE_257 ( 
    .C1(data_23_N_925_19), .B1(\dds_gain_control/cw_gain_reg_15 ), 
    .A1(\dds_gain_control/dds_gain_reg_15 ), .C0(data_23_N_925_19), 
    .B0(\dds_gain_control/cw_gain_reg_14 ), 
    .A0(\dds_gain_control/dds_gain_reg_14 ), 
    .DI1(\dds_gain_control/data_23_N_925_15 ), 
    .DI0(\dds_gain_control/data_23_N_925_14 ), .CE(clk_10mhz_c_enable_54), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/data_23_N_925_14 ), .Q0(\dds_gain_control/data_14 ), 
    .F1(\dds_gain_control/data_23_N_925_15 ), .Q1(\dds_gain_control/data_15 ));
  dds_gain_control_SLICE_258 \dds_gain_control/SLICE_258 ( 
    .DI0(\n12948\001/BUF1 ), .CE(clk_10mhz_c_enable_54), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(clk_10mhz_c), 
    .F0(\n12948\001/BUF1 ), .Q0(\dds_gain_control/data_20 ));
  dds_gain_control_SLICE_259 \dds_gain_control/SLICE_259 ( 
    .M0(\dds_gain_control/spi_ready ), .CLK(clk_10mhz_c), 
    .Q0(\dds_gain_control/data_ready_d ));
  dds_gain_control_SLICE_260 \dds_gain_control/SLICE_260 ( 
    .C1(\dds_gain_control/data_temp_17 ), .B1(\dds_gain_control/state_2 ), 
    .A1(\dds_gain_control/state_1 ), .C0(\dds_gain_control/state_1 ), 
    .B0(\dds_gain_control/data_0 ), .A0(seed_spare3_c), 
    .DI1(\dds_gain_control/n10379 ), .DI0(\dds_gain_control/n10913 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .F0(\dds_gain_control/n10913 ), .Q0(\dds_gain_control/data_temp_1 ), 
    .F1(\dds_gain_control/n10379 ), .Q1(\dds_gain_control/data_temp_18 ));
  dds_gain_control_SLICE_261 \dds_gain_control/SLICE_261 ( 
    .B1(\dds_gain_control/data_temp_1 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_1 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10221 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10221 ), .Q0(\dds_gain_control/data_temp_2 ));
  dds_gain_control_SLICE_262 \dds_gain_control/SLICE_262 ( 
    .B1(\dds_gain_control/data_temp_2 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_2 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10223 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10223 ), .Q0(\dds_gain_control/data_temp_3 ));
  dds_gain_control_SLICE_263 \dds_gain_control/SLICE_263 ( 
    .B1(\dds_gain_control/data_temp_3 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_3 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10225 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10225 ), .Q0(\dds_gain_control/data_temp_4 ));
  dds_gain_control_SLICE_264 \dds_gain_control/SLICE_264 ( 
    .B1(\dds_gain_control/data_temp_4 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_4 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10227 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10227 ), .Q0(\dds_gain_control/data_temp_5 ));
  dds_gain_control_SLICE_265 \dds_gain_control/SLICE_265 ( 
    .B1(\dds_gain_control/data_temp_5 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_5 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10229 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10229 ), .Q0(\dds_gain_control/data_temp_6 ));
  dds_gain_control_SLICE_266 \dds_gain_control/SLICE_266 ( 
    .B1(\dds_gain_control/data_temp_6 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_6 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10231 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10231 ), .Q0(\dds_gain_control/data_temp_7 ));
  dds_gain_control_SLICE_267 \dds_gain_control/SLICE_267 ( 
    .B1(\dds_gain_control/data_temp_7 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_7 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10233 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10233 ), .Q0(\dds_gain_control/data_temp_8 ));
  dds_gain_control_SLICE_268 \dds_gain_control/SLICE_268 ( 
    .B1(\dds_gain_control/data_temp_8 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_8 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10235 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10235 ), .Q0(\dds_gain_control/data_temp_9 ));
  dds_gain_control_SLICE_269 \dds_gain_control/SLICE_269 ( 
    .B1(\dds_gain_control/data_temp_9 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_9 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10237 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10237 ), .Q0(\dds_gain_control/data_temp_10 ));
  dds_gain_control_SLICE_270 \dds_gain_control/SLICE_270 ( 
    .B1(\dds_gain_control/data_temp_10 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_10 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10239 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10239 ), .Q0(\dds_gain_control/data_temp_11 ));
  dds_gain_control_SLICE_271 \dds_gain_control/SLICE_271 ( 
    .B1(\dds_gain_control/data_temp_11 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_11 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10241 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10241 ), .Q0(\dds_gain_control/data_temp_12 ));
  dds_gain_control_SLICE_272 \dds_gain_control/SLICE_272 ( 
    .B1(\dds_gain_control/data_temp_12 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_12 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10243 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10243 ), .Q0(\dds_gain_control/data_temp_13 ));
  dds_gain_control_SLICE_273 \dds_gain_control/SLICE_273 ( 
    .B1(\dds_gain_control/data_temp_13 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_13 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10245 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10245 ), .Q0(\dds_gain_control/data_temp_14 ));
  dds_gain_control_SLICE_274 \dds_gain_control/SLICE_274 ( 
    .B1(\dds_gain_control/data_temp_14 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_14 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10247 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10247 ), .Q0(\dds_gain_control/data_temp_15 ));
  dds_gain_control_SLICE_275 \dds_gain_control/SLICE_275 ( 
    .B1(\dds_gain_control/data_temp_15 ), .A1(\dds_gain_control/state_2 ), 
    .B0(\dds_gain_control/data_15 ), .A0(seed_spare3_c), 
    .DI0(\dds_gain_control/n10249 ), .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10249 ), .Q0(\dds_gain_control/data_temp_16 ));
  dds_gain_control_SLICE_276 \dds_gain_control/SLICE_276 ( 
    .B1(\dds_gain_control/data_temp_16 ), .A1(\dds_gain_control/state_2 ), 
    .B0(data_16), .A0(seed_spare3_c), .DI0(\dds_gain_control/n10217 ), 
    .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10217 ), .Q0(\dds_gain_control/data_temp_17 ));
  dds_gain_control_SLICE_277 \dds_gain_control/SLICE_277 ( 
    .D1(\dds_gain_control/data_temp_23_N_1109_22 ), 
    .C1(\dds_gain_control/data_temp_20 ), .B1(\dds_gain_control/state_2 ), 
    .A1(\dds_gain_control/state_1 ), .C0(\dds_gain_control/data_temp_18 ), 
    .B0(\dds_gain_control/state_2 ), .A0(\dds_gain_control/state_1 ), 
    .DI1(\dds_gain_control/n6250 ), .DI0(\dds_gain_control/n10380 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .F0(\dds_gain_control/n10380 ), .Q0(\dds_gain_control/data_temp_19 ), 
    .F1(\dds_gain_control/n6250 ), .Q1(\dds_gain_control/data_temp_21 ));
  dds_gain_control_SLICE_278 \dds_gain_control/SLICE_278 ( 
    .B1(\dds_gain_control/data_temp_19 ), .A1(\dds_gain_control/state_2 ), 
    .B0(data_19), .A0(seed_spare3_c), .DI0(\dds_gain_control/n10219 ), 
    .M0(\dds_gain_control/state_1 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .OFX0(\dds_gain_control/n10219 ), .Q0(\dds_gain_control/data_temp_20 ));
  dds_gain_control_SLICE_279 \dds_gain_control/SLICE_279 ( 
    .C1(\dds_gain_control/data_temp_22 ), .B1(\dds_gain_control/state_2 ), 
    .A1(\dds_gain_control/state_1 ), 
    .D0(\dds_gain_control/data_temp_23_N_1109_22 ), 
    .C0(\dds_gain_control/data_temp_21 ), .B0(\dds_gain_control/state_2 ), 
    .A0(\dds_gain_control/state_1 ), .DI1(\dds_gain_control/n10376 ), 
    .DI0(\dds_gain_control/n6252 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .F0(\dds_gain_control/n6252 ), .Q0(\dds_gain_control/data_temp_22 ), 
    .F1(\dds_gain_control/n10376 ), .Q1(\dds_gain_control/data_temp_23 ));
  dds_gain_control_SLICE_281 \dds_gain_control/SLICE_281 ( 
    .M1(dds_current_limit_1), .M0(dds_current_limit_0), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/dds_current_limit_reg_0 ), 
    .Q1(\dds_gain_control/dds_current_limit_reg_1 ));
  dds_gain_control_SLICE_282 \dds_gain_control/SLICE_282 ( 
    .M1(dds_current_limit_3), .M0(dds_current_limit_2), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/dds_current_limit_reg_2 ), 
    .Q1(\dds_gain_control/dds_current_limit_reg_3 ));
  dds_gain_control_SLICE_283 \dds_gain_control/SLICE_283 ( 
    .M1(dds_current_limit_5), .M0(dds_current_limit_4), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/dds_current_limit_reg_4 ), 
    .Q1(\dds_gain_control/dds_current_limit_reg_5 ));
  dds_gain_control_SLICE_284 \dds_gain_control/SLICE_284 ( 
    .M1(dds_current_limit_7), .M0(dds_current_limit_6), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/dds_current_limit_reg_6 ), 
    .Q1(\dds_gain_control/dds_current_limit_reg_7 ));
  dds_gain_control_SLICE_285 \dds_gain_control/SLICE_285 ( 
    .M1(dds_current_limit_9), .M0(dds_current_limit_8), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/dds_current_limit_reg_8 ), 
    .Q1(\dds_gain_control/dds_current_limit_reg_9 ));
  dds_gain_control_SLICE_286 \dds_gain_control/SLICE_286 ( 
    .M1(dds_current_limit_11), .M0(dds_current_limit_10), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/dds_current_limit_reg_10 ), 
    .Q1(\dds_gain_control/dds_current_limit_reg_11 ));
  dds_gain_control_SLICE_287 \dds_gain_control/SLICE_287 ( 
    .M1(dds_current_limit_13), .M0(dds_current_limit_12), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/dds_current_limit_reg_12 ), 
    .Q1(\dds_gain_control/dds_current_limit_reg_13 ));
  dds_gain_control_SLICE_288 \dds_gain_control/SLICE_288 ( 
    .M1(dds_current_limit_15), .M0(dds_current_limit_14), .CE(control_3), 
    .CLK(clk_10mhz_c), .Q0(\dds_gain_control/dds_current_limit_reg_14 ), 
    .Q1(\dds_gain_control/dds_current_limit_reg_15 ));
  dds_gain_control_SLICE_289 \dds_gain_control/SLICE_289 ( .M1(dds_gain_1), 
    .M0(dds_gain_0), .CE(clk_10mhz_c_enable_89), .CLK(clk_10mhz_c), 
    .Q0(\dds_gain_control/dds_gain_reg_0 ), 
    .Q1(\dds_gain_control/dds_gain_reg_1 ));
  dds_gain_control_SLICE_290 \dds_gain_control/SLICE_290 ( .M1(dds_gain_3), 
    .M0(dds_gain_2), .CE(clk_10mhz_c_enable_89), .CLK(clk_10mhz_c), 
    .Q0(\dds_gain_control/dds_gain_reg_2 ), 
    .Q1(\dds_gain_control/dds_gain_reg_3 ));
  dds_gain_control_SLICE_291 \dds_gain_control/SLICE_291 ( .M1(dds_gain_5), 
    .M0(dds_gain_4), .CE(clk_10mhz_c_enable_89), .CLK(clk_10mhz_c), 
    .Q0(\dds_gain_control/dds_gain_reg_4 ), 
    .Q1(\dds_gain_control/dds_gain_reg_5 ));
  dds_gain_control_SLICE_292 \dds_gain_control/SLICE_292 ( .M1(dds_gain_7), 
    .M0(dds_gain_6), .CE(clk_10mhz_c_enable_89), .CLK(clk_10mhz_c), 
    .Q0(\dds_gain_control/dds_gain_reg_6 ), 
    .Q1(\dds_gain_control/dds_gain_reg_7 ));
  dds_gain_control_SLICE_293 \dds_gain_control/SLICE_293 ( .M1(dds_gain_9), 
    .M0(dds_gain_8), .CE(clk_10mhz_c_enable_89), .CLK(clk_10mhz_c), 
    .Q0(\dds_gain_control/dds_gain_reg_8 ), 
    .Q1(\dds_gain_control/dds_gain_reg_9 ));
  dds_gain_control_SLICE_294 \dds_gain_control/SLICE_294 ( .M1(dds_gain_11), 
    .M0(dds_gain_10), .CE(clk_10mhz_c_enable_89), .CLK(clk_10mhz_c), 
    .Q0(\dds_gain_control/dds_gain_reg_10 ), 
    .Q1(\dds_gain_control/dds_gain_reg_11 ));
  dds_gain_control_SLICE_295 \dds_gain_control/SLICE_295 ( .M1(dds_gain_13), 
    .M0(dds_gain_12), .CE(clk_10mhz_c_enable_89), .CLK(clk_10mhz_c), 
    .Q0(\dds_gain_control/dds_gain_reg_12 ), 
    .Q1(\dds_gain_control/dds_gain_reg_13 ));
  dds_gain_control_SLICE_296 \dds_gain_control/SLICE_296 ( .M1(dds_gain_15), 
    .M0(dds_gain_14), .CE(clk_10mhz_c_enable_89), .CLK(clk_10mhz_c), 
    .Q0(\dds_gain_control/dds_gain_reg_14 ), 
    .Q1(\dds_gain_control/dds_gain_reg_15 ));
  dds_gain_control_SLICE_297 \dds_gain_control/SLICE_297 ( 
    .M0(\dds_gain_control/cstate_2 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_2 ), .CLK(clk_10mhz_c), 
    .Q0(\dds_gain_control/spi_ready ));
  dds_gain_control_SLICE_298 \dds_gain_control/SLICE_298 ( 
    .C1(\dds_gain_control/n9264 ), .B1(\dds_gain_control/state_2 ), 
    .A1(\dds_gain_control/state_1 ), .D0(\dds_gain_control/n9264 ), 
    .C0(seed_spare3_c), .B0(\dds_gain_control/state_2 ), 
    .A0(\dds_gain_control/state_1 ), .DI1(\dds_gain_control/n12558 ), 
    .DI0(\dds_gain_control/n6271 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_29 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .F0(\dds_gain_control/n6271 ), .Q0(\dds_gain_control/state_1 ), 
    .F1(\dds_gain_control/n12558 ), .Q1(\dds_gain_control/state_2 ));
  dds_gain_control_SLICE_299 \dds_gain_control/SLICE_299 ( 
    .D1(\dds_gain_control/n17 ), .C1(\dds_gain_control/n12645 ), 
    .B1(\dds_gain_control/total_count_1 ), 
    .A1(\dds_gain_control/total_count_15_N_1081_1 ), 
    .D0(\dds_gain_control/n17 ), .C0(\dds_gain_control/n12645 ), 
    .B0(\dds_gain_control/total_count_0 ), 
    .A0(\dds_gain_control/total_count_15_N_1081_0 ), 
    .DI1(\dds_gain_control/total_count_15_N_1013_1 ), 
    .DI0(\dds_gain_control/total_count_15_N_1013_0 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/total_count_15_N_1013_0 ), 
    .Q0(\dds_gain_control/total_count_0 ), 
    .F1(\dds_gain_control/total_count_15_N_1013_1 ), 
    .Q1(\dds_gain_control/total_count_1 ));
  dds_gain_control_SLICE_300 \dds_gain_control/SLICE_300 ( 
    .D1(\dds_gain_control/n17 ), .C1(\dds_gain_control/n12645 ), 
    .B1(\dds_gain_control/total_count_3 ), 
    .A1(\dds_gain_control/total_count_15_N_1081_3 ), 
    .D0(\dds_gain_control/n17 ), .C0(\dds_gain_control/n12645 ), 
    .B0(\dds_gain_control/total_count_2 ), 
    .A0(\dds_gain_control/total_count_15_N_1081_2 ), 
    .DI1(\dds_gain_control/total_count_15_N_1013_3 ), 
    .DI0(\dds_gain_control/total_count_15_N_1013_2 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/total_count_15_N_1013_2 ), 
    .Q0(\dds_gain_control/total_count_2 ), 
    .F1(\dds_gain_control/total_count_15_N_1013_3 ), 
    .Q1(\dds_gain_control/total_count_3 ));
  dds_gain_control_SLICE_301 \dds_gain_control/SLICE_301 ( 
    .D1(\dds_gain_control/n17 ), .C1(\dds_gain_control/n12645 ), 
    .B1(\dds_gain_control/total_count_5 ), 
    .A1(\dds_gain_control/total_count_15_N_1081_5 ), 
    .D0(\dds_gain_control/n17 ), .C0(\dds_gain_control/n12645 ), 
    .B0(\dds_gain_control/total_count_4 ), 
    .A0(\dds_gain_control/total_count_15_N_1081_4 ), 
    .DI1(\dds_gain_control/total_count_15_N_1013_5 ), 
    .DI0(\dds_gain_control/total_count_15_N_1013_4 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/total_count_15_N_1013_4 ), 
    .Q0(\dds_gain_control/total_count_4 ), 
    .F1(\dds_gain_control/total_count_15_N_1013_5 ), 
    .Q1(\dds_gain_control/total_count_5 ));
  dds_gain_control_SLICE_302 \dds_gain_control/SLICE_302 ( 
    .D1(\dds_gain_control/n17 ), .C1(\dds_gain_control/n12645 ), 
    .B1(\dds_gain_control/total_count_7 ), 
    .A1(\dds_gain_control/total_count_15_N_1081_7 ), 
    .D0(\dds_gain_control/n17 ), .C0(\dds_gain_control/n12645 ), 
    .B0(\dds_gain_control/total_count_6 ), 
    .A0(\dds_gain_control/total_count_15_N_1081_6 ), 
    .DI1(\dds_gain_control/total_count_15_N_1013_7 ), 
    .DI0(\dds_gain_control/total_count_15_N_1013_6 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/total_count_15_N_1013_6 ), 
    .Q0(\dds_gain_control/total_count_6 ), 
    .F1(\dds_gain_control/total_count_15_N_1013_7 ), 
    .Q1(\dds_gain_control/total_count_7 ));
  dds_gain_control_SLICE_303 \dds_gain_control/SLICE_303 ( 
    .D1(\dds_gain_control/n17 ), .C1(\dds_gain_control/n12645 ), 
    .B1(\dds_gain_control/total_count_9 ), 
    .A1(\dds_gain_control/total_count_15_N_1081_9 ), 
    .D0(\dds_gain_control/n17 ), .C0(\dds_gain_control/n12645 ), 
    .B0(\dds_gain_control/total_count_8 ), 
    .A0(\dds_gain_control/total_count_15_N_1081_8 ), 
    .DI1(\dds_gain_control/total_count_15_N_1013_9 ), 
    .DI0(\dds_gain_control/total_count_15_N_1013_8 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/total_count_15_N_1013_8 ), 
    .Q0(\dds_gain_control/total_count_8 ), 
    .F1(\dds_gain_control/total_count_15_N_1013_9 ), 
    .Q1(\dds_gain_control/total_count_9 ));
  dds_gain_control_SLICE_304 \dds_gain_control/SLICE_304 ( 
    .D1(\dds_gain_control/n17 ), .C1(\dds_gain_control/n12645 ), 
    .B1(\dds_gain_control/total_count_11 ), 
    .A1(\dds_gain_control/total_count_15_N_1081_11 ), 
    .D0(\dds_gain_control/n17 ), .C0(\dds_gain_control/n12645 ), 
    .B0(\dds_gain_control/total_count_10 ), 
    .A0(\dds_gain_control/total_count_15_N_1081_10 ), 
    .DI1(\dds_gain_control/total_count_15_N_1013_11 ), 
    .DI0(\dds_gain_control/total_count_15_N_1013_10 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/total_count_15_N_1013_10 ), 
    .Q0(\dds_gain_control/total_count_10 ), 
    .F1(\dds_gain_control/total_count_15_N_1013_11 ), 
    .Q1(\dds_gain_control/total_count_11 ));
  dds_gain_control_SLICE_305 \dds_gain_control/SLICE_305 ( 
    .D1(\dds_gain_control/n17 ), .C1(\dds_gain_control/n12645 ), 
    .B1(\dds_gain_control/total_count_13 ), 
    .A1(\dds_gain_control/total_count_15_N_1081_13 ), 
    .D0(\dds_gain_control/n17 ), .C0(\dds_gain_control/n12645 ), 
    .B0(\dds_gain_control/total_count_12 ), 
    .A0(\dds_gain_control/total_count_15_N_1081_12 ), 
    .DI1(\dds_gain_control/total_count_15_N_1013_13 ), 
    .DI0(\dds_gain_control/total_count_15_N_1013_12 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/total_count_15_N_1013_12 ), 
    .Q0(\dds_gain_control/total_count_12 ), 
    .F1(\dds_gain_control/total_count_15_N_1013_13 ), 
    .Q1(\dds_gain_control/total_count_13 ));
  dds_gain_control_SLICE_306 \dds_gain_control/SLICE_306 ( 
    .D1(\dds_gain_control/n17 ), .C1(\dds_gain_control/n12645 ), 
    .B1(\dds_gain_control/total_count_15 ), 
    .A1(\dds_gain_control/total_count_15_N_1081_15 ), 
    .D0(\dds_gain_control/n17 ), .C0(\dds_gain_control/n12645 ), 
    .B0(\dds_gain_control/total_count_14 ), 
    .A0(\dds_gain_control/total_count_15_N_1081_14 ), 
    .DI1(\dds_gain_control/total_count_15_N_1013_15 ), 
    .DI0(\dds_gain_control/total_count_15_N_1013_14 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/total_count_15_N_1013_14 ), 
    .Q0(\dds_gain_control/total_count_14 ), 
    .F1(\dds_gain_control/total_count_15_N_1013_15 ), 
    .Q1(\dds_gain_control/total_count_15 ));
  i2c_slave_top_registers_SLICE_307 \i2c_slave_top/registers/SLICE_307 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_N_1433_enable_8 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/addr_start_0 ), .Q1(\i2c_slave_top/addr_start_1 ));
  i2c_slave_top_registers_SLICE_308 \i2c_slave_top/registers/SLICE_308 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_N_1433_enable_8 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/addr_start_2 ), .Q1(\i2c_slave_top/addr_start_3 ));
  i2c_slave_top_registers_SLICE_309 \i2c_slave_top/registers/SLICE_309 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_N_1433_enable_8 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/addr_start_4 ), .Q1(\i2c_slave_top/addr_start_5 ));
  i2c_slave_top_registers_SLICE_310 \i2c_slave_top/registers/SLICE_310 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_N_1433_enable_8 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/addr_start_6 ), .Q1(\i2c_slave_top/addr_start_7 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_311 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_311 ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12629 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10669 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_3 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10669 ), 
    .Q0(\i2c_slave_top/data_buffer_i_1 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_312 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_312 ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12597 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10666 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_12 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10666 ), 
    .Q0(\i2c_slave_top/data_buffer_i_2 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_313 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_313 ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12642 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10665 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_10 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10665 ), 
    .Q0(\i2c_slave_top/data_buffer_i_3 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_314 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_314 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12643 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12636 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10671 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_9 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10671 ), 
    .Q0(\i2c_slave_top/data_buffer_i_4 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12643 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_315 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_315 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12629 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12643 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10667 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10667 ), 
    .Q0(\i2c_slave_top/data_buffer_i_5 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12629 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_316 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12597 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12643 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10664 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_7 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10664 ), 
    .Q0(\i2c_slave_top/data_buffer_i_6 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12597 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_317 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_317 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12642 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12643 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10670 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_6 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10670 ), 
    .Q0(\i2c_slave_top/data_buffer_i_7 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12642 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_318 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9701 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10356 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12576 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12634 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10668 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_5 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10668 ), 
    .Q0(\i2c_slave_top/data_buffer_i_8 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ));
  i2c_slave_top_registers_SLICE_319 \i2c_slave_top/registers/SLICE_319 ( 
    .D1(\i2c_slave_top/registers/addr_i_2 ), 
    .C1(\i2c_slave_top/registers/n2273 ), .B1(dds_current_limit_0), 
    .A1(\i2c_slave_top/registers/n11940 ), 
    .C0(\i2c_slave_top/registers/n12628 ), 
    .B0(\i2c_slave_top/registers/n2357 ), 
    .A0(\i2c_slave_top/registers/n11913 ), 
    .DI0(\i2c_slave_top/registers/n2397 ), 
    .M0(\i2c_slave_top/registers/n2378 ), 
    .LSR(\i2c_slave_top/registers/n6165 ), .CLK(clk_10mhz_c), 
    .OFX0(\i2c_slave_top/registers/n2397 ), .Q0(\i2c_slave_top/data_out_0 ));
  i2c_slave_top_registers_SLICE_320 \i2c_slave_top/registers/SLICE_320 ( 
    .C1(\i2c_slave_top/registers/n2273 ), .B1(\i2c_slave_top/registers/n2269 ), 
    .A1(\i2c_slave_top/registers/n12470 ), 
    .C0(\i2c_slave_top/registers/n12628 ), 
    .B0(\i2c_slave_top/registers/n2356 ), 
    .A0(\i2c_slave_top/registers/n11916 ), 
    .DI0(\i2c_slave_top/registers/n2396 ), 
    .M0(\i2c_slave_top/registers/n2378 ), 
    .LSR(\i2c_slave_top/registers/n6165 ), .CLK(clk_10mhz_c), 
    .OFX0(\i2c_slave_top/registers/n2396 ), .Q0(\i2c_slave_top/data_out_1 ));
  i2c_slave_top_registers_SLICE_321 \i2c_slave_top/registers/SLICE_321 ( 
    .C1(\i2c_slave_top/registers/n2273 ), .B1(\i2c_slave_top/registers/n2268 ), 
    .A1(\i2c_slave_top/registers/n12466 ), 
    .C0(\i2c_slave_top/registers/n12628 ), 
    .B0(\i2c_slave_top/registers/n2355 ), 
    .A0(\i2c_slave_top/registers/n11919 ), 
    .DI0(\i2c_slave_top/registers/n2395 ), 
    .M0(\i2c_slave_top/registers/n2378 ), 
    .LSR(\i2c_slave_top/registers/n6165 ), .CLK(clk_10mhz_c), 
    .OFX0(\i2c_slave_top/registers/n2395 ), .Q0(\i2c_slave_top/data_out_2 ));
  i2c_slave_top_registers_SLICE_322 \i2c_slave_top/registers/SLICE_322 ( 
    .C1(\i2c_slave_top/registers/n2273 ), .B1(\i2c_slave_top/registers/n2267 ), 
    .A1(\i2c_slave_top/registers/n12463 ), 
    .C0(\i2c_slave_top/registers/n12628 ), 
    .B0(\i2c_slave_top/registers/n2354 ), 
    .A0(\i2c_slave_top/registers/n11922 ), 
    .DI0(\i2c_slave_top/registers/n2394 ), 
    .M0(\i2c_slave_top/registers/n2378 ), 
    .LSR(\i2c_slave_top/registers/n6165 ), .CLK(clk_10mhz_c), 
    .OFX0(\i2c_slave_top/registers/n2394 ), .Q0(\i2c_slave_top/data_out_3 ));
  i2c_slave_top_registers_SLICE_323 \i2c_slave_top/registers/SLICE_323 ( 
    .D1(\i2c_slave_top/registers/addr_i_2 ), 
    .C1(\i2c_slave_top/registers/n2273 ), .B1(dds_current_limit_4), 
    .A1(\i2c_slave_top/registers/n11982 ), 
    .C0(\i2c_slave_top/registers/n12628 ), 
    .B0(\i2c_slave_top/registers/n2353 ), 
    .A0(\i2c_slave_top/registers/n11925 ), 
    .DI0(\i2c_slave_top/registers/n2393 ), 
    .M0(\i2c_slave_top/registers/n2378 ), 
    .LSR(\i2c_slave_top/registers/n6165 ), .CLK(clk_10mhz_c), 
    .OFX0(\i2c_slave_top/registers/n2393 ), .Q0(\i2c_slave_top/data_out_4 ));
  i2c_slave_top_registers_SLICE_324 \i2c_slave_top/registers/SLICE_324 ( 
    .D1(\i2c_slave_top/registers/addr_i_2 ), 
    .C1(\i2c_slave_top/registers/n2273 ), .B1(dds_current_limit_5), 
    .A1(\i2c_slave_top/registers/n11985 ), 
    .C0(\i2c_slave_top/registers/n12628 ), 
    .B0(\i2c_slave_top/registers/n2352 ), 
    .A0(\i2c_slave_top/registers/n11928 ), 
    .DI0(\i2c_slave_top/registers/n2392 ), 
    .M0(\i2c_slave_top/registers/n2378 ), 
    .LSR(\i2c_slave_top/registers/n6165 ), .CLK(clk_10mhz_c), 
    .OFX0(\i2c_slave_top/registers/n2392 ), .Q0(\i2c_slave_top/data_out_5 ));
  i2c_slave_top_registers_SLICE_325 \i2c_slave_top/registers/SLICE_325 ( 
    .D1(\i2c_slave_top/registers/addr_i_2 ), 
    .C1(\i2c_slave_top/registers/n2273 ), .B1(dds_current_limit_6), 
    .A1(\i2c_slave_top/registers/n11988 ), 
    .C0(\i2c_slave_top/registers/n12628 ), 
    .B0(\i2c_slave_top/registers/n2351 ), 
    .A0(\i2c_slave_top/registers/n11931 ), 
    .DI0(\i2c_slave_top/registers/n2391 ), 
    .M0(\i2c_slave_top/registers/n2378 ), 
    .LSR(\i2c_slave_top/registers/n6165 ), .CLK(clk_10mhz_c), 
    .OFX0(\i2c_slave_top/registers/n2391 ), .Q0(\i2c_slave_top/data_out_6 ));
  i2c_slave_top_registers_SLICE_326 \i2c_slave_top/registers/SLICE_326 ( 
    .D1(\i2c_slave_top/registers/addr_i_2 ), 
    .C1(\i2c_slave_top/registers/n2273 ), .B1(dds_current_limit_7), 
    .A1(\i2c_slave_top/registers/n11991 ), 
    .C0(\i2c_slave_top/registers/n12628 ), 
    .B0(\i2c_slave_top/registers/n2350 ), 
    .A0(\i2c_slave_top/registers/n11934 ), 
    .DI0(\i2c_slave_top/registers/n2390 ), 
    .M0(\i2c_slave_top/registers/n2378 ), 
    .LSR(\i2c_slave_top/registers/n6165 ), .CLK(clk_10mhz_c), 
    .OFX0(\i2c_slave_top/registers/n2390 ), .Q0(\i2c_slave_top/data_out_7 ));
  i2c_slave_top_i2cslave_controller_top_filter_scl_inst_SLICE_327 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/SLICE_327 ( 
    .A0(scl_out), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_N_73 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1 ), 
    .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_N_73 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 ));
  i2c_slave_top_i2cslave_controller_top_filter_sda_inst_SLICE_330 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/SLICE_330 ( 
    .A0(sda_out), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_N_73 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1 ), 
    .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_N_73 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 ));
  i2c_slave_top_i2cslave_controller_top_filter_sda_inst_SLICE_332 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/SLICE_332 ( 
    .M0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_N_71 ), 
    .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_333 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_333 ( 
    .D1(\i2c_slave_top/data_buffer_i_7 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11713 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11711 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11887 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7232 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12636 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_N_343 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_N_343 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7232 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_334 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12615 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12580 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12612 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5972 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3569 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3435 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12616 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_11 )
    , 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3435 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_335 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_335 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6119 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6119 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .DI1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3433 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3434 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_2 )
    , 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3434 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3433 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_336 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_336 ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3408 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3420 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3432 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_4 )
    , 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3432 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_337 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_337 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12622 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11883 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12615 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9829 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12472 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n389 ), 
    .DI1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10903 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10604 ), 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10604 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10903 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_338 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_338 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10436 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1_adj_1781 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_134 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12582 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10948 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11751 ), 
    .DI1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10007 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4758 ), 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4758 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10007 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_134 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_340 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_340 ( 
    .M1(\i2c_slave_top/data_out_1 ), .M0(\i2c_slave_top/data_out_0 ), 
    .LSR(\i2c_slave_top/state_1_N_839_0 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_0 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_1 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_341 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_341 ( 
    .M1(\i2c_slave_top/data_out_3 ), .M0(\i2c_slave_top/data_out_2 ), 
    .LSR(\i2c_slave_top/state_1_N_839_0 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_2 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_3 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_342 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_342 ( 
    .M1(\i2c_slave_top/data_out_5 ), .M0(\i2c_slave_top/data_out_4 ), 
    .LSR(\i2c_slave_top/state_1_N_839_0 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_4 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_5 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_343 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_343 ( 
    .M1(\i2c_slave_top/data_out_7 ), .M0(\i2c_slave_top/data_out_6 ), 
    .LSR(\i2c_slave_top/state_1_N_839_0 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_6 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_344 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_344 ( 
    .DI0(\n12948\002/BUF1 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i_N_418 )
    , .CLK(clk_10mhz_c), .F0(\n12948\002/BUF1 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done )
    );
  i2c_slave_top_i2cslave_controller_top_SLICE_345 
    \i2c_slave_top/i2cslave_controller_top/SLICE_345 ( 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/out_n__inv ), 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect_i_N_340 )
    , 
    .CLK(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/out_n__inv ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_346 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_346 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12636 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12636 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_134 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_350 )
    , .CE(reset_n), 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3913 ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_350 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12549 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_347 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_347 ( 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_349 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_349 ( 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i )
    , 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_351 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_351 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_134 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10574 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11129 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10398 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_353 )
    , 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_353 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10398 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_352 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_352 ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i ), 
    .C0(\i2c_slave_top/data_buffer_i_1 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12636 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12012 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12012 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_353 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_353 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7232 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12589 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4256 ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4256 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12589 ));
  i2c_slave_top_i2cslave_controller_top_SLICE_354 
    \i2c_slave_top/i2cslave_controller_top/SLICE_354 ( 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i_sda ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i_sda ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_355 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_355 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12556 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12589 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_309 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_134 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_305 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11157 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_285 )
    , 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_285 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_306 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_357 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_357 ( 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_359 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_359 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12564 ), 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4762 ), 
    .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12564 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12586 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_361 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_361 ( 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg1_i )
    , .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg2_i )
    , 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg1_i )
    );
  i2c_slave_top_SLICE_363 \i2c_slave_top/SLICE_363 ( 
    .B1(\i2c_slave_top/data_buffer_i_8 ), .A1(\i2c_slave_top/data_buffer_i_2 ), 
    .C0(\i2c_slave_top/registers/byte_cnt_0 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/state_1 ), 
    .DI0(\i2c_slave_top/registers/n12009 ), 
    .CE(\i2c_slave_top/registers/state_0 ), .LSR(\i2c_slave_top/n12573 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n12009 ), 
    .Q0(\i2c_slave_top/registers/byte_cnt_0 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11887 ));
  i2c_slave_top_registers_SLICE_365 \i2c_slave_top/registers/SLICE_365 ( 
    .D1(\i2c_slave_top/n12641 ), .C1(\i2c_slave_top/registers/n12578 ), 
    .B1(\i2c_slave_top/registers/n5 ), .A1(\i2c_slave_top/n11475 ), 
    .D0(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/registers/n12578 ), 
    .B0(\i2c_slave_top/registers/n5 ), .A0(\i2c_slave_top/n11503 ), 
    .DI1(\i2c_slave_top/registers/control_15_N_539_4 ), 
    .DI0(\i2c_slave_top/registers/control_15_N_539_1 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_259 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/control_15_N_539_1 ), 
    .Q0(\i2c_slave_top/registers/control_1 ), 
    .F1(\i2c_slave_top/registers/control_15_N_539_4 ), 
    .Q1(\i2c_slave_top/registers/control_4 ));
  i2c_slave_top_registers_SLICE_366 \i2c_slave_top/registers/SLICE_366 ( 
    .D1(\i2c_slave_top/n12641 ), .C1(\i2c_slave_top/registers/n12578 ), 
    .B1(\i2c_slave_top/registers/n5 ), .A1(\i2c_slave_top/n11517 ), 
    .D0(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/registers/n12578 ), 
    .B0(\i2c_slave_top/registers/n5 ), .A0(\i2c_slave_top/n11405 ), 
    .DI1(\i2c_slave_top/registers/control_15_N_539_6 ), 
    .DI0(\i2c_slave_top/registers/control_15_N_539_5 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_259 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/control_15_N_539_5 ), 
    .Q0(\i2c_slave_top/registers/control_5 ), 
    .F1(\i2c_slave_top/registers/control_15_N_539_6 ), 
    .Q1(\i2c_slave_top/registers/control_6 ));
  i2c_slave_top_SLICE_367 \i2c_slave_top/SLICE_367 ( 
    .D1(\i2c_slave_top/n12639 ), .C1(\i2c_slave_top/n11527 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/registers/n12578 ), 
    .B0(\i2c_slave_top/registers/n5 ), .A0(\i2c_slave_top/n11601 ), 
    .DI0(\i2c_slave_top/registers/control_15_N_539_7 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_259 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/control_15_N_539_7 ), 
    .Q0(\i2c_slave_top/registers/control_7 ), .F1(\i2c_slave_top/n11601 ));
  i2c_slave_top_registers_SLICE_368 \i2c_slave_top/registers/SLICE_368 ( 
    .D1(\i2c_slave_top/n11559 ), .C1(\i2c_slave_top/n12639 ), 
    .B1(\i2c_slave_top/registers/n5 ), .A1(\i2c_slave_top/registers/n12578 ), 
    .D0(\i2c_slave_top/n11587 ), .C0(\i2c_slave_top/n12639 ), 
    .B0(\i2c_slave_top/registers/n5 ), .A0(\i2c_slave_top/registers/n12578 ), 
    .DI1(\i2c_slave_top/registers/control_15_N_539_9 ), 
    .DI0(\i2c_slave_top/registers/control_15_N_539_8 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_190 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/control_15_N_539_8 ), 
    .Q0(\i2c_slave_top/registers/control_8 ), 
    .F1(\i2c_slave_top/registers/control_15_N_539_9 ), 
    .Q1(\i2c_slave_top/registers/control_9 ));
  i2c_slave_top_registers_SLICE_369 \i2c_slave_top/registers/SLICE_369 ( 
    .D1(\i2c_slave_top/n11419 ), .C1(\i2c_slave_top/n12639 ), 
    .B1(\i2c_slave_top/registers/n5 ), .A1(\i2c_slave_top/registers/n12578 ), 
    .D0(\i2c_slave_top/n11573 ), .C0(\i2c_slave_top/n12639 ), 
    .B0(\i2c_slave_top/registers/n5 ), .A0(\i2c_slave_top/registers/n12578 ), 
    .DI1(\i2c_slave_top/registers/control_15_N_539_11 ), 
    .DI0(\i2c_slave_top/registers/control_15_N_539_10 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_190 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/control_15_N_539_10 ), 
    .Q0(\i2c_slave_top/registers/control_10 ), 
    .F1(\i2c_slave_top/registers/control_15_N_539_11 ), 
    .Q1(\i2c_slave_top/registers/control_11 ));
  i2c_slave_top_registers_SLICE_370 \i2c_slave_top/registers/SLICE_370 ( 
    .D1(\i2c_slave_top/n11545 ), .C1(\i2c_slave_top/n12639 ), 
    .B1(\i2c_slave_top/registers/n5 ), .A1(\i2c_slave_top/registers/n12578 ), 
    .D0(\i2c_slave_top/n11461 ), .C0(\i2c_slave_top/n12639 ), 
    .B0(\i2c_slave_top/registers/n5 ), .A0(\i2c_slave_top/registers/n12578 ), 
    .DI1(\i2c_slave_top/registers/control_15_N_539_13 ), 
    .DI0(\i2c_slave_top/registers/control_15_N_539_12 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_190 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/control_15_N_539_12 ), 
    .Q0(\i2c_slave_top/registers/control_12 ), 
    .F1(\i2c_slave_top/registers/control_15_N_539_13 ), 
    .Q1(\i2c_slave_top/registers/control_13 ));
  i2c_slave_top_SLICE_371 \i2c_slave_top/SLICE_371 ( 
    .D1(\i2c_slave_top/n11513 ), .C1(\i2c_slave_top/n12641 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/n11433 ), .C0(\i2c_slave_top/n12639 ), 
    .B0(\i2c_slave_top/registers/n5 ), .A0(\i2c_slave_top/registers/n12578 ), 
    .DI0(\i2c_slave_top/registers/control_15_N_539_14 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_190 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/control_15_N_539_14 ), 
    .Q0(\i2c_slave_top/registers/control_14 ), .F1(\i2c_slave_top/n11433 ));
  i2c_slave_top_registers_SLICE_372 \i2c_slave_top/registers/SLICE_372 ( 
    .B1(\i2c_slave_top/registers/count_0 ), 
    .A1(\i2c_slave_top/registers/count_1 ), 
    .A0(\i2c_slave_top/registers/count_0 ), 
    .DI1(\i2c_slave_top/registers/n24 ), .DI0(\i2c_slave_top/registers/n25 ), 
    .CE(\i2c_slave_top/registers/count_3__N_643 ), 
    .LSR(\i2c_slave_top/registers/n566 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/n25 ), .Q0(\i2c_slave_top/registers/count_0 ), 
    .F1(\i2c_slave_top/registers/n24 ), .Q1(\i2c_slave_top/registers/count_1 ));
  i2c_slave_top_registers_SLICE_373 \i2c_slave_top/registers/SLICE_373 ( 
    .D1(\i2c_slave_top/registers/count_3 ), 
    .C1(\i2c_slave_top/registers/count_2 ), 
    .B1(\i2c_slave_top/registers/count_0 ), 
    .A1(\i2c_slave_top/registers/count_1 ), 
    .C0(\i2c_slave_top/registers/count_2 ), 
    .B0(\i2c_slave_top/registers/count_0 ), 
    .A0(\i2c_slave_top/registers/count_1 ), 
    .DI1(\i2c_slave_top/registers/n22 ), .DI0(\i2c_slave_top/registers/n23 ), 
    .CE(\i2c_slave_top/registers/count_3__N_643 ), 
    .LSR(\i2c_slave_top/registers/n566 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/n23 ), .Q0(\i2c_slave_top/registers/count_2 ), 
    .F1(\i2c_slave_top/registers/n22 ), .Q1(\i2c_slave_top/registers/count_3 ));
  i2c_slave_top_registers_SLICE_374 \i2c_slave_top/registers/SLICE_374 ( 
    .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_171 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit ));
  i2c_slave_top_registers_SLICE_375 \i2c_slave_top/registers/SLICE_375 ( 
    .M1(\i2c_slave_top/n12570 ), .M0(\i2c_slave_top/n12571 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_171 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_1 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_2 ));
  i2c_slave_top_registers_SLICE_376 \i2c_slave_top/registers/SLICE_376 ( 
    .M1(\i2c_slave_top/n12568 ), .M0(\i2c_slave_top/n12569 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_171 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_3 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_4 ));
  i2c_slave_top_registers_SLICE_377 \i2c_slave_top/registers/SLICE_377 ( 
    .M1(\i2c_slave_top/n12566 ), .M0(\i2c_slave_top/n12567 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_171 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_5 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_6 ));
  i2c_slave_top_registers_SLICE_378 \i2c_slave_top/registers/SLICE_378 ( 
    .M0(\i2c_slave_top/n12603 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_171 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_7 ));
  i2c_slave_top_registers_SLICE_379 \i2c_slave_top/registers/SLICE_379 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_179 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_8 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_9 ));
  i2c_slave_top_registers_SLICE_380 \i2c_slave_top/registers/SLICE_380 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_179 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_10 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_11 ));
  i2c_slave_top_registers_SLICE_381 \i2c_slave_top/registers/SLICE_381 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_179 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_12 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_13 ));
  i2c_slave_top_registers_SLICE_382 \i2c_slave_top/registers/SLICE_382 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_179 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_14 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_15 ));
  i2c_slave_top_SLICE_383 \i2c_slave_top/SLICE_383 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(\i2c_slave_top/n12607 ), .C0(\i2c_slave_top/registers/data_vld_cnt ), 
    .B0(\i2c_slave_top/state_1_N_839_0 ), .A0(\i2c_slave_top/n12593 ), 
    .DI0(\i2c_slave_top/registers/data_vld_cnt_N_871 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/data_vld_cnt_N_871 ), 
    .Q0(\i2c_slave_top/registers/data_vld_cnt ), .F1(\i2c_slave_top/n12607 ));
  i2c_slave_top_SLICE_384 \i2c_slave_top/SLICE_384 ( 
    .D1(\i2c_slave_top/n12593 ), .C1(\i2c_slave_top/registers/addr_i_2 ), 
    .B1(\i2c_slave_top/registers/n12591 ), .A1(\i2c_slave_top/n12641 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg2_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg1_i )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI0(\i2c_slave_top/n12593 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/n12593 ), .Q0(\i2c_slave_top/registers/data_vld_dly ), 
    .F1(\i2c_slave_top/registers/n11673 ));
  i2c_slave_top_registers_SLICE_385 \i2c_slave_top/registers/SLICE_385 ( 
    .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_156 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/dds_mon_current_limit ));
  i2c_slave_top_registers_SLICE_386 \i2c_slave_top/registers/SLICE_386 ( 
    .M1(\i2c_slave_top/n12570 ), .M0(\i2c_slave_top/n12571 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_156 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/dds_mon_current_limit_1 ), 
    .Q1(\i2c_slave_top/registers/dds_mon_current_limit_2 ));
  i2c_slave_top_registers_SLICE_387 \i2c_slave_top/registers/SLICE_387 ( 
    .M1(\i2c_slave_top/n12568 ), .M0(\i2c_slave_top/n12569 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_156 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/dds_mon_current_limit_3 ), 
    .Q1(\i2c_slave_top/registers/dds_mon_current_limit_4 ));
  i2c_slave_top_registers_SLICE_388 \i2c_slave_top/registers/SLICE_388 ( 
    .M1(\i2c_slave_top/n12566 ), .M0(\i2c_slave_top/n12567 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_156 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/dds_mon_current_limit_5 ), 
    .Q1(\i2c_slave_top/registers/dds_mon_current_limit_6 ));
  i2c_slave_top_registers_SLICE_389 \i2c_slave_top/registers/SLICE_389 ( 
    .M0(\i2c_slave_top/n12603 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_156 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/dds_mon_current_limit_7 ));
  i2c_slave_top_registers_SLICE_390 \i2c_slave_top/registers/SLICE_390 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_164 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/dds_mon_current_limit_8 ), 
    .Q1(\i2c_slave_top/registers/dds_mon_current_limit_9 ));
  i2c_slave_top_registers_SLICE_391 \i2c_slave_top/registers/SLICE_391 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_164 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/dds_mon_current_limit_10 ), 
    .Q1(\i2c_slave_top/registers/dds_mon_current_limit_11 ));
  i2c_slave_top_registers_SLICE_392 \i2c_slave_top/registers/SLICE_392 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_164 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/dds_mon_current_limit_12 ), 
    .Q1(\i2c_slave_top/registers/dds_mon_current_limit_13 ));
  i2c_slave_top_registers_SLICE_393 \i2c_slave_top/registers/SLICE_393 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_164 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/dds_mon_current_limit_14 ), 
    .Q1(\i2c_slave_top/registers/dds_mon_current_limit_15 ));
  i2c_slave_top_registers_SLICE_394 \i2c_slave_top/registers/SLICE_394 ( 
    .DI0(\n12948\003/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_628 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_596 ), .F0(\n12948\003/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n6121 ));
  i2c_slave_top_registers_SLICE_395 \i2c_slave_top/registers/SLICE_395 ( 
    .C1(\i2c_slave_top/registers/n12600 ), .B1(\i2c_slave_top/n12641 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_841_0 ), 
    .D0(\i2c_slave_top/addr_start_0 ), .C0(\i2c_slave_top/state_1_N_839_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_1 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12640 ), 
    .DI0(\i2c_slave_top/registers/n5715 ), 
    .M0(\i2c_slave_top/registers/n12030 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_596 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5715 ), 
    .Q0(\i2c_slave_top/registers/n6122 ));
  SLICE_397 SLICE_397( .DI0(n12948), .LSR(\i2c_slave_top/addr_i_7__N_625 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_595 ), .F0(n12948), 
    .Q0(\i2c_slave_top/registers/n6125 ));
  i2c_slave_top_registers_SLICE_398 \i2c_slave_top/registers/SLICE_398 ( 
    .C1(\i2c_slave_top/registers/n12600 ), 
    .B1(\i2c_slave_top/registers/n12637 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_841_1 ), 
    .D0(\i2c_slave_top/addr_start_1 ), .C0(\i2c_slave_top/state_1_N_839_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_2 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12640 ), 
    .DI0(\i2c_slave_top/registers/n5810 ), 
    .M0(\i2c_slave_top/registers/n12030 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_595 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5810 ), 
    .Q0(\i2c_slave_top/registers/n6126 ));
  i2c_slave_top_registers_SLICE_400 \i2c_slave_top/registers/SLICE_400 ( 
    .DI0(\n12948\009/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_622 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_594 ), .F0(\n12948\009/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n6129 ));
  i2c_slave_top_registers_SLICE_401 \i2c_slave_top/registers/SLICE_401 ( 
    .C1(\i2c_slave_top/registers/n12600 ), 
    .B1(\i2c_slave_top/registers/addr_i_2 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_841_2 ), 
    .D0(\i2c_slave_top/addr_start_2 ), .C0(\i2c_slave_top/state_1_N_839_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12640 ), 
    .DI0(\i2c_slave_top/registers/n5814 ), 
    .M0(\i2c_slave_top/registers/n12030 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_594 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5814 ), 
    .Q0(\i2c_slave_top/registers/n6130 ));
  i2c_slave_top_registers_SLICE_403 \i2c_slave_top/registers/SLICE_403 ( 
    .DI0(\n12948\008/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_619 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_593 ), .F0(\n12948\008/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n6133 ));
  i2c_slave_top_registers_SLICE_404 \i2c_slave_top/registers/SLICE_404 ( 
    .C1(\i2c_slave_top/registers/n12600 ), 
    .B1(\i2c_slave_top/registers/n12628 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_841_3 ), 
    .D0(\i2c_slave_top/addr_start_3 ), .C0(\i2c_slave_top/state_1_N_839_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_4 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12640 ), 
    .DI0(\i2c_slave_top/registers/n5818 ), 
    .M0(\i2c_slave_top/registers/n12030 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_593 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5818 ), 
    .Q0(\i2c_slave_top/registers/n6134 ));
  i2c_slave_top_registers_SLICE_406 \i2c_slave_top/registers/SLICE_406 ( 
    .DI0(\n12948\007/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_616 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_592 ), .F0(\n12948\007/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n6137 ));
  i2c_slave_top_registers_SLICE_407 \i2c_slave_top/registers/SLICE_407 ( 
    .C1(\i2c_slave_top/registers/n12600 ), .B1(\i2c_slave_top/n12639 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_841_4 ), 
    .D0(\i2c_slave_top/addr_start_4 ), .C0(\i2c_slave_top/state_1_N_839_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12640 ), 
    .A0(\i2c_slave_top/data_buffer_i_5 ), 
    .DI0(\i2c_slave_top/registers/n5822 ), 
    .M0(\i2c_slave_top/registers/n12030 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_592 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5822 ), 
    .Q0(\i2c_slave_top/registers/n6138 ));
  i2c_slave_top_registers_SLICE_409 \i2c_slave_top/registers/SLICE_409 ( 
    .DI0(\n12948\006/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_613 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_591 ), .F0(\n12948\006/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n6141 ));
  i2c_slave_top_registers_SLICE_410 \i2c_slave_top/registers/SLICE_410 ( 
    .C1(\i2c_slave_top/registers/n12600 ), 
    .B1(\i2c_slave_top/registers/n12631 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_841_5 ), 
    .D0(\i2c_slave_top/addr_start_5 ), .C0(\i2c_slave_top/state_1_N_839_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12640 ), 
    .A0(\i2c_slave_top/data_buffer_i_6 ), 
    .DI0(\i2c_slave_top/registers/n5826 ), 
    .M0(\i2c_slave_top/registers/n12030 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_591 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5826 ), 
    .Q0(\i2c_slave_top/registers/n6142 ));
  i2c_slave_top_registers_SLICE_412 \i2c_slave_top/registers/SLICE_412 ( 
    .DI0(\n12948\005/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_610 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_590 ), .F0(\n12948\005/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n6145 ));
  i2c_slave_top_registers_SLICE_413 \i2c_slave_top/registers/SLICE_413 ( 
    .C1(\i2c_slave_top/registers/n12600 ), 
    .B1(\i2c_slave_top/registers/n12633 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_841_6 ), 
    .D0(\i2c_slave_top/addr_start_6 ), .C0(\i2c_slave_top/state_1_N_839_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12640 ), 
    .A0(\i2c_slave_top/data_buffer_i_7 ), 
    .DI0(\i2c_slave_top/registers/n5830 ), 
    .M0(\i2c_slave_top/registers/n12030 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_590 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5830 ), 
    .Q0(\i2c_slave_top/registers/n6146 ));
  i2c_slave_top_registers_SLICE_415 \i2c_slave_top/registers/SLICE_415 ( 
    .DI0(\n12948\004/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_597 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_587 ), .F0(\n12948\004/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n6149 ));
  i2c_slave_top_registers_SLICE_416 \i2c_slave_top/registers/SLICE_416 ( 
    .C1(\i2c_slave_top/registers/n12600 ), 
    .B1(\i2c_slave_top/registers/addr_i_7 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_841_7 ), 
    .D0(\i2c_slave_top/addr_start_7 ), .C0(\i2c_slave_top/state_1_N_839_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_8 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12640 ), 
    .DI0(\i2c_slave_top/registers/n5834 ), 
    .M0(\i2c_slave_top/registers/n12030 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_587 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5834 ), 
    .Q0(\i2c_slave_top/registers/n6150 ));
  i2c_slave_top_registers_SLICE_418 \i2c_slave_top/registers/SLICE_418 ( 
    .C0(\i2c_slave_top/registers/state_0 ), 
    .B0(\i2c_slave_top/registers/state_1 ), 
    .A0(\i2c_slave_top/state_1_N_839_0 ), 
    .DI0(\i2c_slave_top/registers/state_1_N_633_0 ), 
    .CE(\i2c_slave_top/registers/data_vld_dly_enable_1 ), 
    .LSR(\i2c_slave_top/n12573 ), .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/state_1_N_633_0 ), 
    .Q0(\i2c_slave_top/registers/state_0 ));
  i2c_slave_top_registers_SLICE_419 \i2c_slave_top/registers/SLICE_419 ( 
    .C0(\i2c_slave_top/state_1_N_839_0 ), 
    .B0(\i2c_slave_top/registers/state_1 ), 
    .A0(\i2c_slave_top/registers/state_0 ), 
    .DI0(\i2c_slave_top/registers/state_1_N_633_1 ), 
    .CE(\i2c_slave_top/registers/data_vld_dly_enable_3 ), 
    .LSR(\i2c_slave_top/n12573 ), .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/state_1_N_633_1 ), 
    .Q0(\i2c_slave_top/registers/state_1 ));
  i2c_slave_top_registers_SLICE_420 \i2c_slave_top/registers/SLICE_420 ( 
    .M1(\i2c_slave_top/n12570 ), .M0(\i2c_slave_top/n12571 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_197 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/static_control_1 ), 
    .Q1(\i2c_slave_top/registers/static_control_2 ));
  i2c_slave_top_registers_SLICE_421 \i2c_slave_top/registers/SLICE_421 ( 
    .M1(\i2c_slave_top/n12568 ), .M0(\i2c_slave_top/n12569 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_197 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/static_control_3 ), 
    .Q1(\i2c_slave_top/registers/static_control_4 ));
  i2c_slave_top_registers_SLICE_422 \i2c_slave_top/registers/SLICE_422 ( 
    .M1(\i2c_slave_top/n12566 ), .M0(\i2c_slave_top/n12567 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_197 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/static_control_5 ), 
    .Q1(\i2c_slave_top/registers/static_control_6 ));
  i2c_slave_top_registers_SLICE_423 \i2c_slave_top/registers/SLICE_423 ( 
    .M1(\i2c_slave_top/n12571 ), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_205 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/static_control_8 ), 
    .Q1(\i2c_slave_top/registers/static_control_9 ));
  i2c_slave_top_registers_SLICE_424 \i2c_slave_top/registers/SLICE_424 ( 
    .M1(\i2c_slave_top/n12569 ), .M0(\i2c_slave_top/n12570 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_205 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/static_control_10 ), 
    .Q1(\i2c_slave_top/registers/static_control_11 ));
  i2c_slave_top_registers_SLICE_425 \i2c_slave_top/registers/SLICE_425 ( 
    .M1(\i2c_slave_top/n12567 ), .M0(\i2c_slave_top/n12568 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_205 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/static_control_12 ), 
    .Q1(\i2c_slave_top/registers/static_control_13 ));
  i2c_slave_top_registers_SLICE_426 \i2c_slave_top/registers/SLICE_426 ( 
    .M1(\i2c_slave_top/n12603 ), .M0(\i2c_slave_top/n12566 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_205 ), .CLK(clk_10mhz_c), 
    .Q0(\i2c_slave_top/registers/static_control_14 ), 
    .Q1(\i2c_slave_top/registers/static_control_15 ));
  i2c_slave_top_registers_SLICE_428 \i2c_slave_top/registers/SLICE_428 ( 
    .D1(\i2c_slave_top/registers/addr_i_2 ), 
    .C1(\i2c_slave_top/registers/n6133 ), .B1(\i2c_slave_top/registers/n6134 ), 
    .A1(\i2c_slave_top/registers/n6135 ), .D0(\i2c_slave_top/n11531 ), 
    .C0(\i2c_slave_top/n12639 ), .B0(\i2c_slave_top/registers/n5 ), 
    .A0(\i2c_slave_top/registers/n12578 ), 
    .DI0(\i2c_slave_top/registers/control_15_N_539_15 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_190 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/control_15_N_539_15 ), .Q0(mcu_gpio_c_15), 
    .F1(\i2c_slave_top/registers/n12578 ));
  reset_generator_SLICE_429 \reset_generator/SLICE_429 ( 
    .A0(\reset_generator/clk_d2 ), .DI0(\reset_generator/clk_d2_N_8 ), 
    .LSR(rstn_c), .CLK(clk_10mhz_c), .F0(\reset_generator/clk_d2_N_8 ), 
    .Q0(\reset_generator/clk_d2 ));
  reset_generator_SLICE_430 \reset_generator/SLICE_430 ( 
    .M1(\reset_generator/in_d1 ), .M0(rstn_c), .LSR(rstn_c), 
    .CLK(\reset_generator/clk_d2 ), .Q0(\reset_generator/in_d1 ), 
    .Q1(\reset_generator/in_d2 ));
  SLICE_433 SLICE_433( .D0(state_1), .C0(n12611), .B0(state_0), 
    .A0(seed_adc_convert_c), .DI0(n12007), 
    .CE(\adc_control/clk_10mhz_c_enable_10 ), .CLK(clk_10mhz_c), .F0(n12007), 
    .Q0(seed_adc_convert_c));
  dds_control_interface_SLICE_434 \dds_control_interface/SLICE_434 ( 
    .D0(\dds_control_interface/state_1 ), 
    .C0(\dds_control_interface/data_temp_15 ), 
    .B0(\dds_control_interface/data_15 ), .A0(\dds_control_interface/state_2 ), 
    .DI0(\dds_control_interface/mosi_N_1431 ), 
    .LSR(\dds_control_interface/state_3__N_1254 ), 
    .CLK(\dds_control_interface/data_temp_15__N_1301 ), 
    .F0(\dds_control_interface/mosi_N_1431 ), .Q0(seed_mod_mosi_c));
  dds_control_interface_SLICE_435 \dds_control_interface/SLICE_435 ( 
    .M0(\dds_control_interface/sck_temp2 ), .CLK(clk_10mhz_c), 
    .Q0(seed_mod_sck_c));
  dds_control_interface_SLICE_436 \dds_control_interface/SLICE_436 ( 
    .M0(\dds_control_interface/ss0_temp2 ), .CLK(clk_10mhz_c), 
    .Q0(seed_mod_ss_c));
  dds_gain_control_SLICE_437 \dds_gain_control/SLICE_437 ( 
    .D1(\dds_gain_control/n11657 ), .C1(\dds_gain_control/n11659 ), 
    .B1(\dds_gain_control/n11010 ), .A1(\dds_gain_control/n12 ), 
    .D0(seed_spare1_c), .C0(\dds_gain_control/cstate_0 ), 
    .B0(\dds_gain_control/n6859 ), .A0(\dds_gain_control/cstate_2 ), 
    .DI0(\dds_gain_control/n11018 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_264 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/n11018 ), .Q0(seed_spare1_c), 
    .F1(\dds_gain_control/n6859 ));
  dds_gain_control_SLICE_438 \dds_gain_control/SLICE_438 ( 
    .C0(\dds_gain_control/data_temp_23 ), .B0(\dds_gain_control/state_2 ), 
    .A0(\dds_gain_control/state_1 ), .DI0(\dds_gain_control/mosi_N_1226 ), 
    .CE(\dds_gain_control/seed_spare1_c_enable_34 ), 
    .LSR(\dds_gain_control/state_3__N_882 ), .CLK(seed_spare1_c), 
    .F0(\dds_gain_control/mosi_N_1226 ), .Q0(seed_spare2_c));
  dds_gain_control_SLICE_440 \dds_gain_control/SLICE_440 ( 
    .B1(\dds_gain_control/n8 ), .A1(\dds_gain_control/n5540 ), 
    .D0(\dds_gain_control/dac_state_1 ), .C0(\dds_gain_control/n12561 ), 
    .B0(\dds_gain_control/dac_state_0 ), .A0(\dds_gain_control/dac_state_2 ), 
    .DI0(\dds_gain_control/n4801 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_3 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/n4801 ), .Q0(seed_spare4_c), 
    .F1(\dds_gain_control/n12561 ));
  adc_control_SLICE_441 \adc_control/SLICE_441 ( .B1(state_3), .A1(state_2), 
    .D0(\adc_control/n11695 ), .C0(\adc_control/n10 ), .B0(n12611), 
    .A0(state_0), .DI0(\adc_control/state_3_N_1501_0 ), .CLK(clk_10mhz_c), 
    .F0(\adc_control/state_3_N_1501_0 ), .Q0(state_0), .F1(n12611));
  adc_control_SLICE_442 \adc_control/SLICE_442 ( .C0(state_1), .B0(state_0), 
    .A0(\adc_control/data_ready_N_1720 ), .DI0(\adc_control/n2092 ), 
    .CE(\adc_control/clk_10mhz_c_enable_24 ), .CLK(clk_10mhz_c), 
    .F0(\adc_control/n2092 ), .Q0(state_1));
  adc_control_SLICE_443 \adc_control/SLICE_443 ( .M1(state_3), .M0(state_2), 
    .CE(\adc_control/clk_10mhz_c_enable_23 ), .CLK(clk_10mhz_c), .Q0(state_2), 
    .Q1(state_3));
  i2c_slave_top_registers_SLICE_446 \i2c_slave_top/registers/SLICE_446 ( 
    .D1(\i2c_slave_top/registers/n12637 ), 
    .C1(\i2c_slave_top/registers/addr_i_2 ), 
    .B1(\i2c_slave_top/registers/n12588 ), 
    .A1(\i2c_slave_top/registers/n12602 ), 
    .C0(\i2c_slave_top/registers/addr_i_2 ), 
    .B0(\i2c_slave_top/registers/n98 ), .A0(\i2c_slave_top/registers/n214 ), 
    .M1(\i2c_slave_top/n12641 ), .FXB(\i2c_slave_top/registers/n11909 ), 
    .FXA(\i2c_slave_top/registers/n11908 ), 
    .OFX0(\i2c_slave_top/registers/n11909 ), 
    .F1(\i2c_slave_top/registers/n98 ), 
    .OFX1(\i2c_slave_top/registers/n11910 ));
  i2c_slave_top_registers_i9313_SLICE_447 
    \i2c_slave_top/registers/i9313/SLICE_447 ( .C1(adc_current_data_4), 
    .B1(\i2c_slave_top/registers/dds_mon_current_limit_4 ), 
    .A1(\i2c_slave_top/registers/addr_i_2 ), 
    .C0(\i2c_slave_top/registers/addr_i_2 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_4 ), 
    .A0(cw_current_limit_4), .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n12003 ));
  i2c_slave_top_registers_i9316_SLICE_448 
    \i2c_slave_top/registers/i9316/SLICE_448 ( .C1(adc_current_data_5), 
    .B1(\i2c_slave_top/registers/dds_mon_current_limit_5 ), 
    .A1(\i2c_slave_top/registers/addr_i_2 ), 
    .C0(\i2c_slave_top/registers/addr_i_2 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_5 ), 
    .A0(cw_current_limit_5), .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n12006 ));
  i2c_slave_top_registers_i9292_SLICE_449 
    \i2c_slave_top/registers/i9292/SLICE_449 ( .C1(dds_gain_12), 
    .B1(dds_gain_4), .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(adc_voltage_data_12), .A0(adc_voltage_data_4), 
    .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n11982 ));
  i2c_slave_top_registers_i9295_SLICE_450 
    \i2c_slave_top/registers/i9295/SLICE_450 ( .C1(dds_gain_13), 
    .B1(dds_gain_5), .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(adc_voltage_data_13), .A0(adc_voltage_data_5), 
    .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n11985 ));
  i2c_slave_top_registers_i9298_SLICE_451 
    \i2c_slave_top/registers/i9298/SLICE_451 ( .C1(dds_gain_14), 
    .B1(dds_gain_6), .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(adc_voltage_data_14), .A0(adc_voltage_data_6), 
    .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n11988 ));
  i2c_slave_top_registers_i9301_SLICE_452 
    \i2c_slave_top/registers/i9301/SLICE_452 ( .C1(dds_gain_15), 
    .B1(dds_gain_7), .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(adc_voltage_data_15), .A0(adc_voltage_data_7), 
    .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n11991 ));
  i2c_slave_top_registers_i9304_SLICE_453 
    \i2c_slave_top/registers/i9304/SLICE_453 ( .C1(adc_current_data_1), 
    .B1(\i2c_slave_top/registers/dds_mon_current_limit_1 ), 
    .A1(\i2c_slave_top/registers/addr_i_2 ), 
    .C0(\i2c_slave_top/registers/addr_i_2 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_1 ), 
    .A0(cw_current_limit_1), .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n11994 ));
  i2c_slave_top_registers_i9307_SLICE_454 
    \i2c_slave_top/registers/i9307/SLICE_454 ( .C1(adc_current_data_2), 
    .B1(\i2c_slave_top/registers/dds_mon_current_limit_2 ), 
    .A1(\i2c_slave_top/registers/addr_i_2 ), 
    .C0(\i2c_slave_top/registers/addr_i_2 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_2 ), 
    .A0(cw_current_limit_2), .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n11997 ));
  i2c_slave_top_registers_i9218_SLICE_455 
    \i2c_slave_top/registers/i9218/SLICE_455 ( 
    .D1(\i2c_slave_top/registers/n12602 ), 
    .C1(\i2c_slave_top/registers/n11893 ), 
    .B1(\i2c_slave_top/registers/n12633 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), 
    .D0(\i2c_slave_top/registers/n182 ), .C0(\i2c_slave_top/registers/n12637 ), 
    .B0(\i2c_slave_top/registers/n12588 ), 
    .A0(\i2c_slave_top/registers/n12590 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .OFX0(\i2c_slave_top/registers/n11908 ));
  i2c_slave_top_registers_i9238_SLICE_456 
    \i2c_slave_top/registers/i9238/SLICE_456 ( 
    .C1(\i2c_slave_top/registers/n2203 ), .B1(cw_gain_5), 
    .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/registers/n2216 ), .A0(\i2c_slave_top/registers/n2289 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .OFX0(\i2c_slave_top/registers/n11928 ));
  i2c_slave_top_registers_i9241_SLICE_457 
    \i2c_slave_top/registers/i9241/SLICE_457 ( 
    .C1(\i2c_slave_top/registers/n2202 ), .B1(cw_gain_6), 
    .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/registers/n2215 ), .A0(\i2c_slave_top/registers/n2288 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .OFX0(\i2c_slave_top/registers/n11931 ));
  i2c_slave_top_registers_i9244_SLICE_458 
    \i2c_slave_top/registers/i9244/SLICE_458 ( 
    .C1(\i2c_slave_top/registers/n2201 ), .B1(cw_gain_7), 
    .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/registers/n2214 ), .A0(\i2c_slave_top/registers/n2287 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .OFX0(\i2c_slave_top/registers/n11934 ));
  i2c_slave_top_registers_i9223_SLICE_459 
    \i2c_slave_top/registers/i9223/SLICE_459 ( 
    .C1(\i2c_slave_top/registers/n2208 ), .B1(cw_gain_0), 
    .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/registers/n2221 ), .A0(\i2c_slave_top/registers/n2294 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .OFX0(\i2c_slave_top/registers/n11913 ));
  i2c_slave_top_registers_i9642_SLICE_460 
    \i2c_slave_top/registers/i9642/SLICE_460 ( .C1(dds_gain_9), 
    .B1(adc_voltage_data_9), .A1(\i2c_slave_top/registers/n12637 ), 
    .C0(dds_gain_1), .B0(\i2c_slave_top/registers/n12637 ), 
    .A0(adc_voltage_data_1), .M0(\i2c_slave_top/n12641 ), 
    .OFX0(\i2c_slave_top/registers/n12470 ));
  i2c_slave_top_registers_i9226_SLICE_461 
    \i2c_slave_top/registers/i9226/SLICE_461 ( 
    .C1(\i2c_slave_top/registers/n2207 ), .B1(cw_gain_1), 
    .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/registers/n2220 ), .A0(\i2c_slave_top/registers/n2293 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .OFX0(\i2c_slave_top/registers/n11916 ));
  i2c_slave_top_registers_i9639_SLICE_462 
    \i2c_slave_top/registers/i9639/SLICE_462 ( .C1(dds_gain_10), 
    .B1(adc_voltage_data_10), .A1(\i2c_slave_top/registers/n12637 ), 
    .C0(dds_gain_2), .B0(\i2c_slave_top/registers/n12637 ), 
    .A0(adc_voltage_data_2), .M0(\i2c_slave_top/n12641 ), 
    .OFX0(\i2c_slave_top/registers/n12466 ));
  i2c_slave_top_registers_i9636_SLICE_463 
    \i2c_slave_top/registers/i9636/SLICE_463 ( .C1(dds_gain_11), 
    .B1(adc_voltage_data_11), .A1(\i2c_slave_top/registers/n12637 ), 
    .C0(dds_gain_3), .B0(\i2c_slave_top/registers/n12637 ), 
    .A0(adc_voltage_data_3), .M0(\i2c_slave_top/n12641 ), 
    .OFX0(\i2c_slave_top/registers/n12463 ));
  i2c_slave_top_registers_i9229_SLICE_464 
    \i2c_slave_top/registers/i9229/SLICE_464 ( 
    .C1(\i2c_slave_top/registers/n2206 ), .B1(cw_gain_2), 
    .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/registers/n2219 ), .A0(\i2c_slave_top/registers/n2292 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .OFX0(\i2c_slave_top/registers/n11919 ));
  i2c_slave_top_registers_i9232_SLICE_465 
    \i2c_slave_top/registers/i9232/SLICE_465 ( 
    .C1(\i2c_slave_top/registers/n2205 ), .B1(cw_gain_3), 
    .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/registers/n2218 ), .A0(\i2c_slave_top/registers/n2291 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .OFX0(\i2c_slave_top/registers/n11922 ));
  i2c_slave_top_registers_i9235_SLICE_466 
    \i2c_slave_top/registers/i9235/SLICE_466 ( 
    .C1(\i2c_slave_top/registers/n2204 ), .B1(cw_gain_4), 
    .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/registers/n2217 ), .A0(\i2c_slave_top/registers/n2290 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .OFX0(\i2c_slave_top/registers/n11925 ));
  i2c_slave_top_registers_i9247_SLICE_467 
    \i2c_slave_top/registers/i9247/SLICE_467 ( .C1(adc_current_data_8), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_8 ), 
    .A1(\i2c_slave_top/registers/n12637 ), 
    .C0(\i2c_slave_top/registers/n12637 ), 
    .B0(\i2c_slave_top/registers/dds_mon_current_limit_8 ), 
    .A0(cw_current_limit_8), .M1(\i2c_slave_top/n12641 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .FXB(\i2c_slave_top/registers/n11937 ), 
    .FXA(\i2c_slave_top/registers/n11943 ), 
    .OFX0(\i2c_slave_top/registers/n11937 ), 
    .OFX1(\i2c_slave_top/registers/n2357 ));
  i2c_slave_top_registers_i9217_SLICE_468 
    \i2c_slave_top/registers/i9217/SLICE_468 ( .C1(adc_current_data_7), 
    .B1(\i2c_slave_top/registers/dds_mon_current_limit_7 ), 
    .A1(\i2c_slave_top/registers/addr_i_2 ), 
    .C0(\i2c_slave_top/registers/addr_i_2 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_7 ), 
    .A0(cw_current_limit_7), .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n11907 ));
  i2c_slave_top_registers_i9250_SLICE_469 
    \i2c_slave_top/registers/i9250/SLICE_469 ( .C1(dds_gain_8), 
    .B1(dds_gain_0), .A1(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(adc_voltage_data_8), .A0(adc_voltage_data_0), 
    .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n11940 ));
  i2c_slave_top_registers_i9253_SLICE_470 
    \i2c_slave_top/registers/i9253/SLICE_470 ( .C1(adc_current_data_0), 
    .B1(\i2c_slave_top/registers/dds_mon_current_limit ), 
    .A1(\i2c_slave_top/registers/addr_i_2 ), 
    .C0(\i2c_slave_top/registers/addr_i_2 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit ), 
    .A0(cw_current_limit_0), .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n11943 ));
  i2c_slave_top_registers_i9310_SLICE_471 
    \i2c_slave_top/registers/i9310/SLICE_471 ( .C1(adc_current_data_3), 
    .B1(\i2c_slave_top/registers/dds_mon_current_limit_3 ), 
    .A1(\i2c_slave_top/registers/addr_i_2 ), 
    .C0(\i2c_slave_top/registers/addr_i_2 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_3 ), 
    .A0(cw_current_limit_3), .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n12000 ));
  i2c_slave_top_registers_i9259_SLICE_472 
    \i2c_slave_top/registers/i9259/SLICE_472 ( .C1(adc_current_data_9), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_9 ), 
    .A1(\i2c_slave_top/registers/n12637 ), 
    .C0(\i2c_slave_top/registers/n12637 ), 
    .B0(\i2c_slave_top/registers/dds_mon_current_limit_9 ), 
    .A0(cw_current_limit_9), .M1(\i2c_slave_top/n12641 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .FXB(\i2c_slave_top/registers/n11949 ), 
    .FXA(\i2c_slave_top/registers/n11994 ), 
    .OFX0(\i2c_slave_top/registers/n11949 ), 
    .OFX1(\i2c_slave_top/registers/n2356 ));
  i2c_slave_top_registers_i9262_SLICE_473 
    \i2c_slave_top/registers/i9262/SLICE_473 ( .C1(adc_current_data_10), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_10 ), 
    .A1(\i2c_slave_top/registers/n12637 ), 
    .C0(\i2c_slave_top/registers/n12637 ), 
    .B0(\i2c_slave_top/registers/dds_mon_current_limit_10 ), 
    .A0(cw_current_limit_10), .M1(\i2c_slave_top/n12641 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .FXB(\i2c_slave_top/registers/n11952 ), 
    .FXA(\i2c_slave_top/registers/n11997 ), 
    .OFX0(\i2c_slave_top/registers/n11952 ), 
    .OFX1(\i2c_slave_top/registers/n2355 ));
  i2c_slave_top_registers_i9265_SLICE_474 
    \i2c_slave_top/registers/i9265/SLICE_474 ( .C1(adc_current_data_6), 
    .B1(\i2c_slave_top/registers/dds_mon_current_limit_6 ), 
    .A1(\i2c_slave_top/registers/addr_i_2 ), 
    .C0(\i2c_slave_top/registers/addr_i_2 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_6 ), 
    .A0(cw_current_limit_6), .M0(\i2c_slave_top/registers/n12637 ), 
    .OFX0(\i2c_slave_top/registers/n11955 ));
  i2c_slave_top_registers_i9268_SLICE_475 
    \i2c_slave_top/registers/i9268/SLICE_475 ( .C1(adc_current_data_11), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_11 ), 
    .A1(\i2c_slave_top/registers/n12637 ), 
    .C0(\i2c_slave_top/registers/n12637 ), 
    .B0(\i2c_slave_top/registers/dds_mon_current_limit_11 ), 
    .A0(cw_current_limit_11), .M1(\i2c_slave_top/n12641 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .FXB(\i2c_slave_top/registers/n11958 ), 
    .FXA(\i2c_slave_top/registers/n12000 ), 
    .OFX0(\i2c_slave_top/registers/n11958 ), 
    .OFX1(\i2c_slave_top/registers/n2354 ));
  i2c_slave_top_registers_i9271_SLICE_476 
    \i2c_slave_top/registers/i9271/SLICE_476 ( .C1(adc_current_data_12), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_12 ), 
    .A1(\i2c_slave_top/registers/n12637 ), 
    .C0(\i2c_slave_top/registers/n12637 ), 
    .B0(\i2c_slave_top/registers/dds_mon_current_limit_12 ), 
    .A0(cw_current_limit_12), .M1(\i2c_slave_top/n12641 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .FXB(\i2c_slave_top/registers/n11961 ), 
    .FXA(\i2c_slave_top/registers/n12003 ), 
    .OFX0(\i2c_slave_top/registers/n11961 ), 
    .OFX1(\i2c_slave_top/registers/n2353 ));
  i2c_slave_top_registers_i9274_SLICE_477 
    \i2c_slave_top/registers/i9274/SLICE_477 ( .C1(adc_current_data_13), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_13 ), 
    .A1(\i2c_slave_top/registers/n12637 ), 
    .C0(\i2c_slave_top/registers/n12637 ), 
    .B0(\i2c_slave_top/registers/dds_mon_current_limit_13 ), 
    .A0(cw_current_limit_13), .M1(\i2c_slave_top/n12641 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .FXB(\i2c_slave_top/registers/n11964 ), 
    .FXA(\i2c_slave_top/registers/n12006 ), 
    .OFX0(\i2c_slave_top/registers/n11964 ), 
    .OFX1(\i2c_slave_top/registers/n2352 ));
  i2c_slave_top_registers_i9277_SLICE_478 
    \i2c_slave_top/registers/i9277/SLICE_478 ( .C1(adc_current_data_14), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_14 ), 
    .A1(\i2c_slave_top/registers/n12637 ), 
    .C0(\i2c_slave_top/registers/n12637 ), 
    .B0(\i2c_slave_top/registers/dds_mon_current_limit_14 ), 
    .A0(cw_current_limit_14), .M1(\i2c_slave_top/n12641 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .FXB(\i2c_slave_top/registers/n11967 ), 
    .FXA(\i2c_slave_top/registers/n11955 ), 
    .OFX0(\i2c_slave_top/registers/n11967 ), 
    .OFX1(\i2c_slave_top/registers/n2351 ));
  i2c_slave_top_registers_i9280_SLICE_479 
    \i2c_slave_top/registers/i9280/SLICE_479 ( .C1(adc_current_data_15), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_15 ), 
    .A1(\i2c_slave_top/registers/n12637 ), 
    .C0(\i2c_slave_top/registers/n12637 ), 
    .B0(\i2c_slave_top/registers/dds_mon_current_limit_15 ), 
    .A0(cw_current_limit_15), .M1(\i2c_slave_top/n12641 ), 
    .M0(\i2c_slave_top/registers/addr_i_2 ), 
    .FXB(\i2c_slave_top/registers/n11970 ), 
    .FXA(\i2c_slave_top/registers/n11907 ), 
    .OFX0(\i2c_slave_top/registers/n11970 ), 
    .OFX1(\i2c_slave_top/registers/n2350 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i9677_SLICE_480 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480 
    ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_2 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_6 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12535 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i9675_SLICE_481 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481 
    ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_5 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_4 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_1 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_0 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .FXB(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12532 ), 
    .FXA(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12535 ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12532 ), 
    .OFX1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_309 )
    );
  dds_gain_control_i9687_SLICE_482 \dds_gain_control/i9687/SLICE_482 ( 
    .D1(\dds_gain_control/n5540 ), .C1(\dds_gain_control/n8 ), 
    .B1(\dds_gain_control/dac_state_0 ), .A1(\dds_gain_control/dac_state_1 ), 
    .C0(\dds_gain_control/dac_state_0 ), .B0(\dds_gain_control/data_20 ), 
    .A0(\dds_gain_control/dac_state_1 ), .M0(\dds_gain_control/dac_state_2 ), 
    .OFX0(\dds_gain_control/n6870 ));
  dds_gain_control_i9685_SLICE_483 \dds_gain_control/i9685/SLICE_483 ( 
    .D1(\dds_gain_control/n50 ), .C1(\dds_gain_control/n5540 ), 
    .B1(\dds_gain_control/dac_state_2 ), .A1(\dds_gain_control/dac_state_0 ), 
    .D0(\dds_gain_control/data_ready_d ), .C0(\dds_gain_control/dac_state_2 ), 
    .B0(\dds_gain_control/dac_state_0 ), .A0(\dds_gain_control/spi_ready ), 
    .M0(\dds_gain_control/dac_state_1 ), .OFX0(\dds_gain_control/n6840 ));
  dds_gain_control_i9683_SLICE_484 \dds_gain_control/i9683/SLICE_484 ( 
    .D1(\dds_gain_control/n5540 ), .C1(\dds_gain_control/n8 ), 
    .B1(\dds_gain_control/dac_state_0 ), 
    .A1(\dds_gain_control/clk_10mhz_c_enable_229 ), 
    .D0(\dds_gain_control/n5540 ), .C0(\dds_gain_control/n8 ), 
    .B0(\dds_gain_control/dac_state_0 ), 
    .A0(\dds_gain_control/clk_10mhz_c_enable_229 ), 
    .M0(\dds_gain_control/n50 ), .OFX0(\dds_gain_control/n6197 ));
  adc_control_i9689_SLICE_485 \adc_control/i9689/SLICE_485 ( 
    .D1(\adc_control/n15 ), .C1(\adc_control/capture_state_0 ), 
    .B1(\adc_control/capture_state_1 ), .A1(\adc_control/capture_state_3 ), 
    .D0(\adc_control/data_ready ), .C0(\adc_control/capture_state_0 ), 
    .B0(\adc_control/capture_state_1 ), .A0(\adc_control/capture_state_3 ), 
    .M0(\adc_control/capture_state_2 ), 
    .OFX0(\adc_control/adc_sck_temp_enable_64 ));
  i2c_slave_top_registers_SLICE_486 \i2c_slave_top/registers/SLICE_486 ( 
    .D1(\i2c_slave_top/registers/n12588 ), 
    .C1(\i2c_slave_top/registers/n12637 ), 
    .B1(\i2c_slave_top/registers/n11303 ), .A1(\i2c_slave_top/registers/n182 ), 
    .D0(\i2c_slave_top/registers/n12628 ), 
    .C0(\i2c_slave_top/registers/n12588 ), 
    .B0(\i2c_slave_top/registers/n12562 ), 
    .A0(\i2c_slave_top/registers/n11201 ), .F0(\i2c_slave_top/registers/n182 ), 
    .F1(\i2c_slave_top/registers/n214 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_487 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_487 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12556 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12589 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10578 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11903 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10995 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_350 )
    , 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_4 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10578 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_488 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_488 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12636 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12549 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11305 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n389 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11305 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_489 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_489 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/d_ff ), 
    .B1(reset_n), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n595 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10356 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/d_ff ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_490 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_490 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11899 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10578 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12612 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12616 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12550 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_11 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_2 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_11 )
    );
  dds_gain_control_SLICE_491 \dds_gain_control/SLICE_491 ( 
    .D1(\dds_gain_control/n12645 ), 
    .C1(\dds_gain_control/clk_10mhz_c_enable_2 ), 
    .B1(\dds_gain_control/n6859 ), .A1(\dds_gain_control/cstate_0 ), 
    .D0(\dds_gain_control/cstate_0 ), .C0(\dds_gain_control/data_20 ), 
    .B0(\dds_gain_control/cstate_2 ), .A0(\dds_gain_control/cstate_1 ), 
    .F0(\dds_gain_control/clk_10mhz_c_enable_2 ), 
    .F1(\dds_gain_control/clk_10mhz_c_enable_232 ));
  i2c_slave_top_registers_SLICE_492 \i2c_slave_top/registers/SLICE_492 ( 
    .C1(\i2c_slave_top/registers/n12628 ), .B1(\i2c_slave_top/n12639 ), 
    .A1(\i2c_slave_top/registers/n12631 ), 
    .D0(\i2c_slave_top/registers/n10794 ), 
    .C0(\i2c_slave_top/registers/n12548 ), 
    .B0(\i2c_slave_top/registers/n11910 ), 
    .A0(\i2c_slave_top/registers/n12588 ), 
    .F0(\i2c_slave_top/registers/n6165 ), 
    .F1(\i2c_slave_top/registers/n12548 ));
  i2c_slave_top_registers_SLICE_493 \i2c_slave_top/registers/SLICE_493 ( 
    .C1(\i2c_slave_top/registers/n6129 ), .B1(\i2c_slave_top/registers/n6130 ), 
    .A1(\i2c_slave_top/registers/n6131 ), 
    .D0(\i2c_slave_top/registers/addr_i_2 ), 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/n5589 ), 
    .A0(\i2c_slave_top/registers/n12602 ), 
    .M0(\i2c_slave_top/registers/n5814 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_622 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n10794 ), 
    .Q0(\i2c_slave_top/registers/n6131 ), 
    .F1(\i2c_slave_top/registers/addr_i_2 ));
  i2c_slave_top_registers_SLICE_494 \i2c_slave_top/registers/SLICE_494 ( 
    .C1(\i2c_slave_top/registers/n12637 ), 
    .B1(\i2c_slave_top/registers/n12633 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), 
    .D0(\i2c_slave_top/registers/n12546 ), 
    .C0(\i2c_slave_top/registers/n12552 ), 
    .B0(\i2c_slave_top/registers/n12565 ), .A0(\i2c_slave_top/n12593 ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_205 ), 
    .F1(\i2c_slave_top/registers/n12552 ));
  i2c_slave_top_registers_SLICE_495 \i2c_slave_top/registers/SLICE_495 ( 
    .C1(\i2c_slave_top/registers/n6141 ), .B1(\i2c_slave_top/registers/n6142 ), 
    .A1(\i2c_slave_top/registers/n6143 ), 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_8 ), .A0(dds_control_8), 
    .F0(\i2c_slave_top/registers/n2221 ), 
    .F1(\i2c_slave_top/registers/n12631 ));
  i2c_slave_top_registers_SLICE_496 \i2c_slave_top/registers/SLICE_496 ( 
    .C1(\i2c_slave_top/registers/n12637 ), 
    .B1(\i2c_slave_top/registers/n12633 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), 
    .D0(\i2c_slave_top/registers/n11685 ), .C0(\i2c_slave_top/n12593 ), 
    .B0(\i2c_slave_top/registers/n12554 ), 
    .A0(\i2c_slave_top/registers/n12602 ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_222 ), 
    .F1(\i2c_slave_top/registers/n12554 ));
  i2c_slave_top_registers_SLICE_497 \i2c_slave_top/registers/SLICE_497 ( 
    .C1(\i2c_slave_top/registers/n6121 ), .B1(\i2c_slave_top/registers/n6122 ), 
    .A1(\i2c_slave_top/registers/n6123 ), 
    .D0(\i2c_slave_top/registers/n12591 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/registers/addr_i_2 ), 
    .A0(\i2c_slave_top/registers/n12631 ), 
    .F0(\i2c_slave_top/registers/n11685 ), .F1(\i2c_slave_top/n12641 ));
  i2c_slave_top_registers_SLICE_498 \i2c_slave_top/registers/SLICE_498 ( 
    .D1(\i2c_slave_top/registers/n11287 ), 
    .C1(\i2c_slave_top/registers/addr_i_2 ), 
    .B1(\i2c_slave_top/registers/n12554 ), .A1(\i2c_slave_top/n12593 ), 
    .D0(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/registers/n12590 ), 
    .B0(\i2c_slave_top/registers/n12591 ), .A0(\i2c_slave_top/n12639 ), 
    .F0(\i2c_slave_top/registers/n11287 ), 
    .F1(\i2c_slave_top/registers/clk_10mhz_c_enable_214 ));
  i2c_slave_top_registers_SLICE_499 \i2c_slave_top/registers/SLICE_499 ( 
    .D1(\i2c_slave_top/n12641 ), .C1(\i2c_slave_top/n12639 ), 
    .B1(\i2c_slave_top/registers/n12638 ), 
    .A1(\i2c_slave_top/state_1_N_839_0 ), 
    .D0(\i2c_slave_top/registers/addr_i_2 ), 
    .C0(\i2c_slave_top/registers/n11727 ), 
    .B0(\i2c_slave_top/registers/n10458 ), .A0(\i2c_slave_top/n12593 ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_104 ), 
    .F1(\i2c_slave_top/registers/n11727 ));
  i2c_slave_top_registers_SLICE_500 \i2c_slave_top/registers/SLICE_500 ( 
    .C1(\i2c_slave_top/registers/n6125 ), .B1(\i2c_slave_top/registers/n6126 ), 
    .A1(\i2c_slave_top/registers/n6127 ), 
    .C0(\i2c_slave_top/registers/n12637 ), .B0(dds_current_limit_15), 
    .A0(cw_gain_15), .M0(\i2c_slave_top/registers/n5810 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_625 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n2201 ), .Q0(\i2c_slave_top/registers/n6127 ), 
    .F1(\i2c_slave_top/registers/n12637 ));
  i2c_slave_top_SLICE_501 \i2c_slave_top/SLICE_501 ( 
    .D1(\i2c_slave_top/n12641 ), .C1(\i2c_slave_top/n12593 ), 
    .B1(\i2c_slave_top/registers/n12638 ), 
    .A1(\i2c_slave_top/state_1_N_839_0 ), 
    .D0(\i2c_slave_top/registers/n12552 ), 
    .C0(\i2c_slave_top/registers/n12544 ), 
    .B0(\i2c_slave_top/registers/n12553 ), 
    .A0(\i2c_slave_top/registers/addr_i_2 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_134 ), 
    .Q0(\i2c_slave_top/state_1_N_839_0 ), 
    .F1(\i2c_slave_top/registers/n12544 ));
  i2c_slave_top_registers_SLICE_502 \i2c_slave_top/registers/SLICE_502 ( 
    .D1(\i2c_slave_top/registers/addr_i_2 ), 
    .C1(\i2c_slave_top/registers/n6137 ), .B1(\i2c_slave_top/registers/n6138 ), 
    .A1(\i2c_slave_top/registers/n6139 ), .D0(\i2c_slave_top/registers/n10 ), 
    .C0(\i2c_slave_top/registers/n12588 ), 
    .B0(\i2c_slave_top/registers/n5589 ), 
    .A0(\i2c_slave_top/registers/n12590 ), 
    .M0(\i2c_slave_top/registers/n5822 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_616 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n2273 ), .Q0(\i2c_slave_top/registers/n6139 ), 
    .F1(\i2c_slave_top/registers/n10 ));
  i2c_slave_top_registers_SLICE_503 \i2c_slave_top/registers/SLICE_503 ( 
    .D1(\i2c_slave_top/registers/addr_i_7 ), 
    .C1(\i2c_slave_top/registers/n12633 ), 
    .B1(\i2c_slave_top/registers/n12628 ), 
    .A1(\i2c_slave_top/registers/n12631 ), .D0(\i2c_slave_top/registers/n13 ), 
    .C0(\i2c_slave_top/registers/n17 ), .B0(\i2c_slave_top/n12641 ), 
    .A0(\i2c_slave_top/registers/n12560 ), 
    .F0(\i2c_slave_top/registers/n2378 ), 
    .F1(\i2c_slave_top/registers/n12560 ));
  i2c_slave_top_registers_SLICE_504 \i2c_slave_top/registers/SLICE_504 ( 
    .C1(\i2c_slave_top/registers/n6137 ), .B1(\i2c_slave_top/registers/n6138 ), 
    .A1(\i2c_slave_top/registers/n6139 ), 
    .C0(\i2c_slave_top/registers/n12637 ), .B0(\i2c_slave_top/n12639 ), 
    .A0(\i2c_slave_top/registers/addr_i_2 ), 
    .F0(\i2c_slave_top/registers/n17 ), .F1(\i2c_slave_top/n12639 ));
  i2c_slave_top_registers_SLICE_505 \i2c_slave_top/registers/SLICE_505 ( 
    .D1(\i2c_slave_top/registers/n11219 ), .C1(\i2c_slave_top/n12639 ), 
    .B1(\i2c_slave_top/registers/n5 ), .A1(\i2c_slave_top/registers/n12578 ), 
    .C0(\i2c_slave_top/registers/n193 ), .B0(\i2c_slave_top/n12641 ), 
    .A0(\i2c_slave_top/registers/n566 ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_190 ), 
    .F1(\i2c_slave_top/registers/n193 ));
  i2c_slave_top_registers_SLICE_506 \i2c_slave_top/registers/SLICE_506 ( 
    .D1(\i2c_slave_top/registers/n12554 ), 
    .C1(\i2c_slave_top/registers/n11257 ), 
    .B1(\i2c_slave_top/registers/n12628 ), 
    .A1(\i2c_slave_top/registers/n12583 ), 
    .C0(\i2c_slave_top/registers/n6133 ), .B0(\i2c_slave_top/registers/n6134 ), 
    .A0(\i2c_slave_top/registers/n6135 ), 
    .F0(\i2c_slave_top/registers/n12628 ), 
    .F1(\i2c_slave_top/registers/clk_10mhz_c_enable_111 ));
  i2c_slave_top_registers_SLICE_507 \i2c_slave_top/registers/SLICE_507 ( 
    .D1(\i2c_slave_top/registers/n12602 ), 
    .C1(\i2c_slave_top/registers/addr_i_2 ), 
    .B1(\i2c_slave_top/registers/n12633 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), .D0(\i2c_slave_top/n12639 ), 
    .C0(\i2c_slave_top/registers/n6133 ), .B0(\i2c_slave_top/registers/n6134 ), 
    .A0(\i2c_slave_top/registers/n6135 ), 
    .F0(\i2c_slave_top/registers/n12602 ), 
    .F1(\i2c_slave_top/registers/n12562 ));
  i2c_slave_top_registers_SLICE_508 \i2c_slave_top/registers/SLICE_508 ( 
    .D1(\i2c_slave_top/registers/n12590 ), 
    .C1(\i2c_slave_top/registers/n12637 ), 
    .B1(\i2c_slave_top/registers/n12633 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), 
    .D0(\i2c_slave_top/registers/n12631 ), 
    .C0(\i2c_slave_top/registers/n6133 ), .B0(\i2c_slave_top/registers/n6134 ), 
    .A0(\i2c_slave_top/registers/n6135 ), .M0(\i2c_slave_top/registers/n5818 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_619 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n12590 ), 
    .Q0(\i2c_slave_top/registers/n6135 ), 
    .F1(\i2c_slave_top/registers/n10458 ));
  i2c_slave_top_registers_SLICE_509 \i2c_slave_top/registers/SLICE_509 ( 
    .D1(\i2c_slave_top/registers/n12554 ), 
    .C1(\i2c_slave_top/registers/n11673 ), 
    .B1(\i2c_slave_top/registers/n12628 ), 
    .A1(\i2c_slave_top/registers/n12583 ), .D0(\i2c_slave_top/n12639 ), 
    .C0(\i2c_slave_top/registers/n6141 ), .B0(\i2c_slave_top/registers/n6142 ), 
    .A0(\i2c_slave_top/registers/n6143 ), 
    .F0(\i2c_slave_top/registers/n12583 ), 
    .F1(\i2c_slave_top/registers/clk_10mhz_c_enable_119 ));
  i2c_slave_top_registers_SLICE_510 \i2c_slave_top/registers/SLICE_510 ( 
    .B1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A1(\i2c_slave_top/registers/byte_cnt_0 ), 
    .D0(\i2c_slave_top/registers/n12638 ), 
    .C0(\i2c_slave_top/registers/n6141 ), .B0(\i2c_slave_top/registers/n6142 ), 
    .A0(\i2c_slave_top/registers/n6143 ), 
    .F0(\i2c_slave_top/registers/n11219 ), 
    .F1(\i2c_slave_top/registers/n12638 ));
  i2c_slave_top_registers_SLICE_511 \i2c_slave_top/registers/SLICE_511 ( 
    .D1(\i2c_slave_top/n12593 ), .C1(\i2c_slave_top/state_1_N_839_0 ), 
    .B1(\i2c_slave_top/registers/n12588 ), 
    .A1(\i2c_slave_top/registers/n12637 ), 
    .D0(\i2c_slave_top/registers/addr_i_7 ), 
    .C0(\i2c_slave_top/registers/n6145 ), .B0(\i2c_slave_top/registers/n6146 ), 
    .A0(\i2c_slave_top/registers/n6147 ), .M0(\i2c_slave_top/registers/n5830 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_610 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n12588 ), 
    .Q0(\i2c_slave_top/registers/n6147 ), .F1(\i2c_slave_top/registers/n5 ));
  i2c_slave_top_SLICE_512 \i2c_slave_top/SLICE_512 ( 
    .D1(\i2c_slave_top/n11527 ), .C1(\i2c_slave_top/n12641 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/registers/n12631 ), 
    .C0(\i2c_slave_top/data_buffer_i_8 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), .F0(\i2c_slave_top/n11527 ), 
    .F1(\i2c_slave_top/n11531 ));
  i2c_slave_top_registers_SLICE_513 \i2c_slave_top/registers/SLICE_513 ( 
    .D1(\i2c_slave_top/registers/n12591 ), .C1(\i2c_slave_top/n12641 ), 
    .B1(\i2c_slave_top/registers/n12552 ), .A1(\i2c_slave_top/n12593 ), 
    .C0(\i2c_slave_top/state_1_N_839_0 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), 
    .F0(\i2c_slave_top/registers/n12591 ), 
    .F1(\i2c_slave_top/registers/n11217 ));
  i2c_slave_top_SLICE_514 \i2c_slave_top/SLICE_514 ( 
    .D1(\i2c_slave_top/n11471 ), .C1(\i2c_slave_top/n12641 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/registers/n12631 ), 
    .C0(\i2c_slave_top/data_buffer_i_5 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), .F0(\i2c_slave_top/n11471 ), 
    .F1(\i2c_slave_top/n11461 ));
  i2c_slave_top_registers_SLICE_515 \i2c_slave_top/registers/SLICE_515 ( 
    .D1(\i2c_slave_top/n12639 ), .C1(\i2c_slave_top/registers/addr_i_2 ), 
    .B1(\i2c_slave_top/registers/n12638 ), 
    .A1(\i2c_slave_top/state_1_N_839_0 ), .D0(\i2c_slave_top/n12641 ), 
    .C0(\i2c_slave_top/registers/n11641 ), .B0(\i2c_slave_top/n12593 ), 
    .A0(\i2c_slave_top/registers/n10458 ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_96 ), 
    .F1(\i2c_slave_top/registers/n11641 ));
  i2c_slave_top_SLICE_516 \i2c_slave_top/SLICE_516 ( 
    .D1(\i2c_slave_top/n12639 ), .C1(\i2c_slave_top/n11513 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/registers/n12631 ), 
    .C0(\i2c_slave_top/data_buffer_i_7 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), .F0(\i2c_slave_top/n11513 ), 
    .F1(\i2c_slave_top/n11517 ));
  i2c_slave_top_SLICE_517 \i2c_slave_top/SLICE_517 ( 
    .D1(\i2c_slave_top/n11541 ), .C1(\i2c_slave_top/n12641 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/registers/n12631 ), 
    .C0(\i2c_slave_top/data_buffer_i_6 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), .F0(\i2c_slave_top/n11541 ), 
    .F1(\i2c_slave_top/n11545 ));
  i2c_slave_top_SLICE_518 \i2c_slave_top/SLICE_518 ( 
    .D1(\i2c_slave_top/n12639 ), .C1(\i2c_slave_top/n11555 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/registers/n12631 ), 
    .C0(\i2c_slave_top/data_buffer_i_2 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), .F0(\i2c_slave_top/n11555 ), 
    .F1(\i2c_slave_top/n11503 ));
  i2c_slave_top_SLICE_519 \i2c_slave_top/SLICE_519 ( 
    .D1(\i2c_slave_top/n11415 ), .C1(\i2c_slave_top/n12641 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/registers/n12631 ), 
    .C0(\i2c_slave_top/data_buffer_i_4 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), .F0(\i2c_slave_top/n11415 ), 
    .F1(\i2c_slave_top/n11419 ));
  i2c_slave_top_registers_SLICE_520 \i2c_slave_top/registers/SLICE_520 ( 
    .D1(\i2c_slave_top/registers/n11349 ), .C1(\i2c_slave_top/n12593 ), 
    .B1(\i2c_slave_top/registers/n12548 ), 
    .A1(\i2c_slave_top/registers/n12552 ), 
    .D0(\i2c_slave_top/state_1_N_839_0 ), 
    .C0(\i2c_slave_top/registers/addr_i_2 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), 
    .F0(\i2c_slave_top/registers/n11349 ), 
    .F1(\i2c_slave_top/registers/n10394 ));
  i2c_slave_top_SLICE_521 \i2c_slave_top/SLICE_521 ( 
    .D1(\i2c_slave_top/n12639 ), .C1(\i2c_slave_top/n11443 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/registers/n12631 ), 
    .C0(\i2c_slave_top/data_buffer_i_1 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), .F0(\i2c_slave_top/n11443 ), 
    .F1(\i2c_slave_top/n11447 ));
  i2c_slave_top_SLICE_522 \i2c_slave_top/SLICE_522 ( 
    .D1(\i2c_slave_top/n11569 ), .C1(\i2c_slave_top/n12641 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/registers/n12631 ), 
    .C0(\i2c_slave_top/data_buffer_i_3 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), 
    .CE(\i2c_slave_top/registers/data_vld_dly_enable_2 ), 
    .LSR(\i2c_slave_top/n12573 ), .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/n11569 ), .Q0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .F1(\i2c_slave_top/n11573 ));
  i2c_slave_top_registers_SLICE_523 \i2c_slave_top/registers/SLICE_523 ( 
    .D1(\i2c_slave_top/registers/n12554 ), 
    .C1(\i2c_slave_top/registers/n11257 ), 
    .B1(\i2c_slave_top/registers/n12583 ), 
    .A1(\i2c_slave_top/registers/n12628 ), 
    .D0(\i2c_slave_top/registers/n12591 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/registers/addr_i_2 ), .A0(\i2c_slave_top/n12593 ), 
    .F0(\i2c_slave_top/registers/n11257 ), 
    .F1(\i2c_slave_top/registers/clk_10mhz_c_enable_156 ));
  i2c_slave_top_registers_SLICE_524 \i2c_slave_top/registers/SLICE_524 ( 
    .D1(\i2c_slave_top/registers/count_3 ), 
    .C1(\i2c_slave_top/registers/count_1 ), 
    .B1(\i2c_slave_top/registers/count_2 ), 
    .A1(\i2c_slave_top/registers/count_3__N_643 ), 
    .C0(\i2c_slave_top/registers/n193 ), .B0(\i2c_slave_top/n12641 ), 
    .A0(\i2c_slave_top/registers/n566 ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_259 ), 
    .F1(\i2c_slave_top/registers/n566 ));
  i2c_slave_top_registers_SLICE_525 \i2c_slave_top/registers/SLICE_525 ( 
    .D1(\i2c_slave_top/registers/control_5 ), 
    .C1(\i2c_slave_top/registers/control_12 ), 
    .B1(\i2c_slave_top/registers/control_8 ), 
    .A1(\i2c_slave_top/registers/control_6 ), 
    .D0(\i2c_slave_top/registers/n11793 ), 
    .C0(\i2c_slave_top/registers/n11791 ), 
    .B0(\i2c_slave_top/registers/n11801 ), 
    .A0(\i2c_slave_top/registers/n11797 ), 
    .F0(\i2c_slave_top/registers/count_3__N_643 ), 
    .F1(\i2c_slave_top/registers/n11793 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_526 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_526 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12575 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12636 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5125 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12576 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9701 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10356 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5939 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5125 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_527 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_527 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10312 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12634 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10312 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12556 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_528 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_528 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_134 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12615 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12609 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12609 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11091 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_529 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_529 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12589 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12471 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_530 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_530 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11091 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9701 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1_adj_1782 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11047 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12576 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10356 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12636 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11047 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10532 ));
  i2c_slave_top_i2cslave_controller_top_SLICE_531 
    \i2c_slave_top/i2cslave_controller_top/SLICE_531 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_134 )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i_N_418 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , .M0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_N_71 ), 
    .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4762 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i_N_418 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_532 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_532 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12586 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3569 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5972 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12612 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12612 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3408 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_533 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_533 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12614 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12549 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3569 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11865 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3569 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_534 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_534 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10602 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_306 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12589 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12586 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10312 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10602 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_305 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_535 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_535 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12614 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12579 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12614 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10620 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_536 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_536 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12580 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12615 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12634 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12580 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3420 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_537 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_537 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5972 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12616 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12550 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11865 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12550 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6119 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_538 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_538 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12621 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12621 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11129 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_539 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_539 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12622 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12622 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9701 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_540 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_540 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10576 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10353 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10353 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10574 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_541 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_541 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12636 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9829 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12636 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_542 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_542 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12551 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12623 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12556 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_134 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12623 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10576 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_543 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_543 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12551 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_544 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_544 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12630 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12632 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12630 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11157 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_545 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_545 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5939 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10532 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12599 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_5 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12599 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_546 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_546 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5939 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10532 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12598 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_6 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12598 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_547 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_547 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5939 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10532 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12557 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_7 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12557 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_548 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_548 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10356 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12576 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9701 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5125 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12576 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9759 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_549 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_549 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12556 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10620 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11870 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11870 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5972 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_550 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_550 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9759 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10532 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12596 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12596 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_551 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_551 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9759 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10532 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12555 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12555 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_12 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_552 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_552 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9759 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10532 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12595 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_9 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12595 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_553 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_553 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9759 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10532 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12592 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_10 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12592 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_554 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_554 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12635 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n595 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1_adj_1782 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n595 ));
  dds_gain_control_SLICE_555 \dds_gain_control/SLICE_555 ( 
    .B1(\dds_gain_control/n50 ), .A1(\dds_gain_control/n5540 ), 
    .D0(\dds_gain_control/n12946 ), .C0(\dds_gain_control/dac_state_1 ), 
    .B0(\dds_gain_control/dac_state_2 ), .A0(\dds_gain_control/dac_state_0 ), 
    .F0(\dds_gain_control/clk_10mhz_c_enable_3 ), 
    .F1(\dds_gain_control/n12946 ));
  dds_gain_control_SLICE_556 \dds_gain_control/SLICE_556 ( 
    .D1(\dds_gain_control/state_1 ), .C1(\dds_gain_control/n9264 ), 
    .B1(\dds_gain_control/state_2 ), .A1(seed_spare3_c), 
    .D0(\dds_gain_control/count_5 ), .C0(\dds_gain_control/n11769 ), 
    .B0(\dds_gain_control/n11771 ), .A0(\dds_gain_control/count_1 ), 
    .M0(\dds_gain_control/cstate_2 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_2 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/n9264 ), .Q0(seed_spare3_c), 
    .F1(\dds_gain_control/seed_spare1_c_enable_29 ));
  dds_gain_control_SLICE_557 \dds_gain_control/SLICE_557 ( 
    .B1(\dds_gain_control/total_count_6 ), 
    .A1(\dds_gain_control/total_count_10 ), 
    .D0(\dds_gain_control/total_count_11 ), .C0(\dds_gain_control/n11651 ), 
    .B0(\dds_gain_control/n11649 ), .A0(\dds_gain_control/total_count_15 ), 
    .F0(\dds_gain_control/n11010 ), .F1(\dds_gain_control/n11651 ));
  adc_control_SLICE_558 \adc_control/SLICE_558 ( .B1(\adc_control/count_1 ), 
    .A1(\adc_control/count_0 ), .D0(\adc_control/n5 ), 
    .C0(\adc_control/count_2 ), .B0(\adc_control/adc_sck_temp_enable_72 ), 
    .A0(\adc_control/count_3 ), .F0(\adc_control/adc_sck_temp_enable_20 ), 
    .F1(\adc_control/n5 ));
  adc_control_SLICE_559 \adc_control/SLICE_559 ( .B1(\adc_control/count_1 ), 
    .A1(\adc_control/count_0 ), .D0(\adc_control/n5_adj_1747 ), 
    .C0(\adc_control/count_2 ), .B0(\adc_control/adc_sck_temp_enable_72 ), 
    .A0(\adc_control/count_3 ), .F0(\adc_control/adc_sck_temp_enable_21 ), 
    .F1(\adc_control/n5_adj_1747 ));
  adc_control_SLICE_560 \adc_control/SLICE_560 ( 
    .D1(\adc_control/capture_state_2 ), .C1(\adc_control/n15 ), 
    .B1(\adc_control/n12610 ), .A1(\adc_control/capture_state_3 ), 
    .B0(\adc_control/capture_state_1 ), .A0(\adc_control/capture_state_0 ), 
    .F0(\adc_control/n12610 ), .F1(\adc_control/n6163 ));
  adc_control_SLICE_561 \adc_control/SLICE_561 ( .D1(\adc_control/n6 ), 
    .C1(\adc_control/n5 ), .B1(\adc_control/n12572 ), 
    .A1(\adc_control/capture_state_2 ), .C0(\adc_control/capture_state_3 ), 
    .B0(\adc_control/capture_state_1 ), .A0(\adc_control/capture_state_0 ), 
    .F0(\adc_control/n12572 ), .F1(\adc_control/adc_sck_temp_enable_32 ));
  adc_control_SLICE_562 \adc_control/SLICE_562 ( .D1(\adc_control/n7954 ), 
    .C1(\adc_control/count_3 ), .B1(\adc_control/adc_sck_temp_enable_72 ), 
    .A1(\adc_control/count_2 ), .D0(\adc_control/capture_state_3 ), 
    .C0(\adc_control/capture_state_2 ), .B0(\adc_control/capture_state_1 ), 
    .A0(\adc_control/capture_state_0 ), 
    .F0(\adc_control/adc_sck_temp_enable_72 ), 
    .F1(\adc_control/adc_sck_temp_enable_26 ));
  adc_control_SLICE_563 \adc_control/SLICE_563 ( .D1(state_0), 
    .C1(\adc_control/n10 ), .B1(\adc_control/convert_count_6 ), 
    .A1(\adc_control/n12613 ), .B0(\adc_control/convert_count_5 ), 
    .A0(\adc_control/convert_count_7 ), .F0(\adc_control/n12613 ), 
    .F1(\adc_control/clk_10mhz_c_enable_10 ));
  adc_control_SLICE_564 \adc_control/SLICE_564 ( .D1(\adc_control/n11695 ), 
    .C1(\adc_control/n10 ), .B1(n12611), .A1(state_0), .D0(state_1), 
    .C0(\adc_control/convert_count_6 ), .B0(\adc_control/convert_count_5 ), 
    .A0(\adc_control/convert_count_7 ), .F0(\adc_control/n11695 ), 
    .F1(\adc_control/clk_10mhz_c_enable_24 ));
  adc_control_SLICE_565 \adc_control/SLICE_565 ( .B1(\adc_control/count_1 ), 
    .A1(\adc_control/count_0 ), .D0(\adc_control/n5_adj_1748 ), 
    .C0(\adc_control/count_3 ), .B0(\adc_control/adc_sck_temp_enable_72 ), 
    .A0(\adc_control/count_2 ), .F0(\adc_control/adc_sck_temp_enable_27 ), 
    .F1(\adc_control/n5_adj_1748 ));
  adc_control_SLICE_566 \adc_control/SLICE_566 ( .D1(\adc_control/n10 ), 
    .C1(\adc_control/n12617 ), .B1(\adc_control/convert_count_6 ), 
    .A1(\adc_control/n12613 ), .B0(state_0), .A0(state_1), 
    .F0(\adc_control/n12617 ), .F1(\adc_control/clk_10mhz_c_enable_23 ));
  adc_control_SLICE_567 \adc_control/SLICE_567 ( .D1(\adc_control/n10 ), 
    .C1(\adc_control/clk_10mhz_c_enable_255 ), 
    .B1(\adc_control/convert_count_6 ), .A1(\adc_control/n12613 ), 
    .D0(state_2), .C0(state_3), .B0(state_0), .A0(state_1), 
    .F0(\adc_control/clk_10mhz_c_enable_255 ), .F1(\adc_control/n6279 ));
  adc_control_SLICE_568 \adc_control/SLICE_568 ( .B1(\adc_control/count_1 ), 
    .A1(\adc_control/count_0 ), .D0(\adc_control/n7954 ), 
    .C0(\adc_control/count_2 ), .B0(\adc_control/adc_sck_temp_enable_72 ), 
    .A0(\adc_control/count_3 ), .F0(\adc_control/adc_sck_temp_enable_22 ), 
    .F1(\adc_control/n7954 ));
  adc_control_SLICE_569 \adc_control/SLICE_569 ( .B1(\adc_control/count_3 ), 
    .A1(\adc_control/count_2 ), .D0(\adc_control/n6 ), 
    .C0(\adc_control/n7954 ), .B0(\adc_control/n12572 ), 
    .A0(\adc_control/capture_state_2 ), 
    .F0(\adc_control/adc_sck_temp_enable_30 ), .F1(\adc_control/n6 ));
  adc_control_SLICE_570 \adc_control/SLICE_570 ( .B1(state_0), 
    .A1(\adc_control/data_ready_N_1720 ), .D0(state_1), .C0(n12611), 
    .B0(\adc_control/clk_10mhz_c_enable_10 ), .A0(\adc_control/n12581 ), 
    .F0(\adc_control/clk_10mhz_c_enable_260 ), .F1(\adc_control/n12581 ));
  adc_control_SLICE_571 \adc_control/SLICE_571 ( 
    .D1(\adc_control/sck_count_1 ), .C1(\adc_control/sck_count_3 ), 
    .B1(\adc_control/sck_count_0 ), .A1(\adc_control/sck_count_2 ), 
    .D0(\adc_control/data_ready_N_1720 ), .C0(n12611), .B0(state_0), 
    .A0(state_1), .F0(\adc_control/n6276 ), 
    .F1(\adc_control/data_ready_N_1720 ));
  adc_control_SLICE_572 \adc_control/SLICE_572 ( 
    .B1(\adc_control/convert_count_1 ), .A1(\adc_control/convert_count_0 ), 
    .D0(\adc_control/convert_count_2 ), .C0(\adc_control/convert_count_3 ), 
    .B0(\adc_control/convert_count_4 ), .A0(\adc_control/n4 ), 
    .F0(\adc_control/n10 ), .F1(\adc_control/n4 ));
  adc_control_SLICE_573 \adc_control/SLICE_573 ( .B1(\adc_control/count_5 ), 
    .A1(\adc_control/count_4 ), .D0(\adc_control/n11743 ), 
    .C0(\adc_control/n11745 ), .B0(\adc_control/n5_adj_1747 ), 
    .A0(\adc_control/n6 ), .F0(\adc_control/n15 ), .F1(\adc_control/n11743 ));
  dds_control_interface_SLICE_574 \dds_control_interface/SLICE_574 ( 
    .D1(\dds_control_interface/state_1 ), .C1(\dds_control_interface/n11 ), 
    .B1(\dds_control_interface/ss0_temp ), 
    .A1(\dds_control_interface/state_2 ), .D0(\dds_control_interface/count_2 ), 
    .C0(\dds_control_interface/n11823 ), .B0(\dds_control_interface/n11825 ), 
    .A0(\dds_control_interface/count_6 ), .F0(\dds_control_interface/n11 ), 
    .F1(\dds_control_interface/state_3__N_1257 ));
  SLICE_575 SLICE_575( .C1(\dds_control_interface/index_2 ), 
    .B1(\dds_control_interface/data_valid_dbg ), .A1(reset_n), 
    .D0(\dds_control_interface/n11755 ), .C0(\dds_control_interface/n12625 ), 
    .B0(\dds_control_interface/n12626 ), .A0(\dds_control_interface/n12624 ), 
    .M0(\reset_generator/in_d3 ), .CE(\reset_generator/reset_n_N_4 ), 
    .LSR(rstn_c), .CLK(\reset_generator/clk_d2 ), 
    .F0(\dds_control_interface/clk_10mhz_c_enable_223 ), .Q0(reset_n), 
    .F1(\dds_control_interface/n11755 ));
  dds_control_interface_SLICE_576 \dds_control_interface/SLICE_576 ( 
    .D1(\dds_control_interface/cstate_2 ), 
    .C1(\dds_control_interface/cstate_1 ), .B1(\dds_control_interface/n7021 ), 
    .A1(\dds_control_interface/n40 ), .B0(\dds_control_interface/data_valid ), 
    .A0(\dds_control_interface/cstate_0 ), .F0(\dds_control_interface/n40 ), 
    .F1(\dds_control_interface/clk_10mhz_c_enable_233 ));
  dds_control_interface_SLICE_577 \dds_control_interface/SLICE_577 ( 
    .B1(\dds_control_interface/n10303 ), .A1(\dds_control_interface/n9734 ), 
    .D0(\dds_control_interface/total_count_8 ), 
    .C0(\dds_control_interface/total_count_11 ), 
    .B0(\dds_control_interface/total_count_6 ), 
    .A0(\dds_control_interface/n11319 ), .F0(\dds_control_interface/n10303 ), 
    .F1(\dds_control_interface/n10305 ));
  dds_control_interface_SLICE_578 \dds_control_interface/SLICE_578 ( 
    .B1(\dds_control_interface/total_count_3 ), 
    .A1(\dds_control_interface/total_count_2 ), 
    .D0(\dds_control_interface/total_count_0 ), 
    .C0(\dds_control_interface/total_count_1 ), 
    .B0(\dds_control_interface/n11321 ), 
    .A0(\dds_control_interface/total_count_4 ), 
    .F0(\dds_control_interface/n9734 ), .F1(\dds_control_interface/n11321 ));
  dds_control_interface_SLICE_579 \dds_control_interface/SLICE_579 ( 
    .D1(\dds_control_interface/n12625 ), .C1(\dds_control_interface/n12626 ), 
    .B1(control_0), .A1(\dds_control_interface/n12584 ), 
    .C0(\dds_control_interface/index_2 ), .B0(\dds_control_interface/index_1 ), 
    .A0(\dds_control_interface/index_0 ), .F0(\dds_control_interface/n12584 ), 
    .F1(\dds_control_interface/clk_10mhz_c_enable_74 ));
  dds_control_interface_SLICE_580 \dds_control_interface/SLICE_580 ( 
    .B1(\dds_control_interface/data_valid_dbg ), .A1(reset_n), 
    .D0(\dds_control_interface/n12626 ), .C0(\dds_control_interface/n12627 ), 
    .B0(\dds_control_interface/test_run ), 
    .A0(\dds_control_interface/transfer_completed_temp_d ), 
    .F0(\dds_control_interface/clk_10mhz_c_enable_230 ), 
    .F1(\dds_control_interface/n12627 ));
  i2c_slave_top_registers_SLICE_581 \i2c_slave_top/registers/SLICE_581 ( 
    .D1(\i2c_slave_top/registers/state_0 ), 
    .C1(\i2c_slave_top/registers/byte_cnt_0 ), 
    .B1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A1(\i2c_slave_top/registers/state_1 ), 
    .D0(\i2c_slave_top/registers/state_0 ), 
    .C0(\i2c_slave_top/registers/byte_cnt_0 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/state_1 ), 
    .F0(\i2c_slave_top/registers/n12600 ), 
    .F1(\i2c_slave_top/registers/data_vld_dly_enable_2 ));
  i2c_slave_top_registers_SLICE_582 \i2c_slave_top/registers/SLICE_582 ( 
    .D1(\i2c_slave_top/registers/n10394 ), 
    .C1(\i2c_slave_top/registers/n6121 ), .B1(\i2c_slave_top/registers/n6122 ), 
    .A1(\i2c_slave_top/registers/n6123 ), 
    .D0(\i2c_slave_top/registers/n10394 ), 
    .C0(\i2c_slave_top/registers/n6121 ), .B0(\i2c_slave_top/registers/n6122 ), 
    .A0(\i2c_slave_top/registers/n6123 ), .M0(\i2c_slave_top/registers/n5715 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_628 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_149 ), 
    .Q0(\i2c_slave_top/registers/n6123 ), 
    .F1(\i2c_slave_top/registers/clk_10mhz_c_enable_141 ));
  i2c_slave_top_registers_SLICE_583 \i2c_slave_top/registers/SLICE_583 ( 
    .D1(\i2c_slave_top/registers/addr_i_2 ), 
    .C1(\i2c_slave_top/registers/n11217 ), 
    .B1(\i2c_slave_top/registers/n12628 ), 
    .A1(\i2c_slave_top/registers/n12583 ), 
    .D0(\i2c_slave_top/registers/addr_i_2 ), 
    .C0(\i2c_slave_top/registers/n11217 ), 
    .B0(\i2c_slave_top/registers/n12583 ), 
    .A0(\i2c_slave_top/registers/n12628 ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_171 ), 
    .F1(\i2c_slave_top/registers/clk_10mhz_c_enable_126 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_584 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_584 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C1(\i2c_slave_top/addr_start_2 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C0(\i2c_slave_top/addr_start_2 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_622 ), 
    .F1(\i2c_slave_top/addr_i_7__N_594 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_585 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_585 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C1(\i2c_slave_top/addr_start_5 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C0(\i2c_slave_top/addr_start_5 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_613 ), 
    .F1(\i2c_slave_top/addr_i_7__N_591 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_586 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_586 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C1(\i2c_slave_top/addr_start_6 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C0(\i2c_slave_top/addr_start_6 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_590 ), 
    .F1(\i2c_slave_top/addr_i_7__N_610 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_587 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_587 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C1(\i2c_slave_top/addr_start_7 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C0(\i2c_slave_top/addr_start_7 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_587 ), 
    .F1(\i2c_slave_top/addr_i_7__N_597 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_588 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_588 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C1(\i2c_slave_top/addr_start_0 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C0(\i2c_slave_top/addr_start_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_628 ), 
    .F1(\i2c_slave_top/addr_i_7__N_596 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_589 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_589 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C1(\i2c_slave_top/addr_start_1 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C0(\i2c_slave_top/addr_start_1 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_625 ), 
    .F1(\i2c_slave_top/addr_i_7__N_595 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_590 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_590 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C1(\i2c_slave_top/addr_start_4 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C0(\i2c_slave_top/addr_start_4 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_616 ), 
    .F1(\i2c_slave_top/addr_i_7__N_592 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_591 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_591 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C1(\i2c_slave_top/addr_start_3 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , .C0(\i2c_slave_top/addr_start_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_619 ), 
    .F1(\i2c_slave_top/addr_i_7__N_593 ));
  adc_control_SLICE_592 \adc_control/SLICE_592 ( .D1(\adc_control/n5 ), 
    .C1(\adc_control/count_2 ), .B1(\adc_control/adc_sck_temp_enable_72 ), 
    .A1(\adc_control/count_3 ), .D0(\adc_control/n5 ), 
    .C0(\adc_control/count_3 ), .B0(\adc_control/adc_sck_temp_enable_72 ), 
    .A0(\adc_control/count_2 ), .F0(\adc_control/adc_sck_temp_enable_28 ), 
    .F1(\adc_control/adc_sck_temp_enable_24 ));
  adc_control_SLICE_593 \adc_control/SLICE_593 ( 
    .D1(\adc_control/n5_adj_1747 ), .C1(\adc_control/count_2 ), 
    .B1(\adc_control/adc_sck_temp_enable_72 ), .A1(\adc_control/count_3 ), 
    .D0(\adc_control/n5_adj_1747 ), .C0(\adc_control/count_3 ), 
    .B0(\adc_control/adc_sck_temp_enable_72 ), .A0(\adc_control/count_2 ), 
    .F0(\adc_control/adc_sck_temp_enable_29 ), 
    .F1(\adc_control/adc_sck_temp_enable_25 ));
  i2c_slave_top_registers_SLICE_594 \i2c_slave_top/registers/SLICE_594 ( 
    .C1(\i2c_slave_top/registers/state_1 ), 
    .B1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A1(\i2c_slave_top/registers/state_0 ), 
    .C0(\i2c_slave_top/registers/state_0 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/state_1 ), 
    .F0(\i2c_slave_top/registers/data_vld_dly_enable_1 ), 
    .F1(\i2c_slave_top/registers/data_vld_dly_enable_3 ));
  i2c_slave_top_registers_SLICE_595 \i2c_slave_top/registers/SLICE_595 ( 
    .C1(\i2c_slave_top/registers/n12631 ), .B1(\i2c_slave_top/n12639 ), 
    .A1(\i2c_slave_top/registers/n12628 ), .D0(\i2c_slave_top/n12639 ), 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/n12628 ), 
    .A0(\i2c_slave_top/registers/addr_i_2 ), 
    .F0(\i2c_slave_top/registers/n12546 ), 
    .F1(\i2c_slave_top/registers/n11303 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_596 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_596 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10948 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12582 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_597 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_597 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11883 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11899 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_598 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_598 ( 
    .D1(\i2c_slave_top/n11443 ), .C1(\i2c_slave_top/n12641 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/n11555 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .F0(\i2c_slave_top/n11559 ), .F1(\i2c_slave_top/n11587 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_599 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_599 ( 
    .D1(\i2c_slave_top/n12639 ), .C1(\i2c_slave_top/n11471 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/n12639 ), .C0(\i2c_slave_top/n11541 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .F0(\i2c_slave_top/n11405 ), .F1(\i2c_slave_top/n11475 ));
  dds_gain_control_SLICE_600 \dds_gain_control/SLICE_600 ( 
    .C1(\dds_gain_control/cstate_0 ), .B1(\dds_gain_control/cstate_1 ), 
    .A1(\dds_gain_control/cstate_2 ), .C0(\dds_gain_control/cstate_0 ), 
    .B0(\dds_gain_control/cstate_1 ), .A0(\dds_gain_control/cstate_2 ), 
    .F0(\dds_gain_control/n17 ), .F1(\dds_gain_control/n3915 ));
  dds_gain_control_SLICE_601 \dds_gain_control/SLICE_601 ( 
    .C1(\dds_gain_control/cstate_0 ), .B1(\dds_gain_control/cstate_2 ), 
    .A1(\dds_gain_control/cstate_1 ), .C0(\dds_gain_control/cstate_0 ), 
    .B0(\dds_gain_control/cstate_2 ), .A0(\dds_gain_control/cstate_1 ), 
    .F0(\dds_gain_control/clk_10mhz_c_enable_264 ), 
    .F1(\dds_gain_control/clk_10mhz_c_enable_263 ));
  adc_control_SLICE_602 \adc_control/SLICE_602 ( .D1(\adc_control/n6 ), 
    .C1(\adc_control/n5_adj_1748 ), .B1(\adc_control/n12572 ), 
    .A1(\adc_control/capture_state_2 ), .D0(\adc_control/n6 ), 
    .C0(\adc_control/n5_adj_1747 ), .B0(\adc_control/n12572 ), 
    .A0(\adc_control/capture_state_2 ), 
    .F0(\adc_control/adc_sck_temp_enable_4 ), 
    .F1(\adc_control/adc_sck_temp_enable_31 ));
  dds_control_interface_SLICE_603 \dds_control_interface/SLICE_603 ( 
    .C1(\dds_control_interface/ss0_temp ), 
    .B1(\dds_control_interface/state_2 ), .A1(\dds_control_interface/state_1 ), 
    .C0(\dds_control_interface/state_1 ), 
    .B0(\dds_control_interface/ss0_temp ), 
    .A0(\dds_control_interface/state_2 ), 
    .F0(\dds_control_interface/data_temp_15__N_1301 ), 
    .F1(\dds_control_interface/count_7__N_1284 ));
  dds_control_interface_SLICE_604 \dds_control_interface/SLICE_604 ( 
    .D1(\dds_control_interface/count_7 ), .C1(\dds_control_interface/count_3 ), 
    .B1(\dds_control_interface/count_0 ), .A1(\dds_control_interface/count_5 ), 
    .B0(\dds_control_interface/count_1 ), .A0(\dds_control_interface/count_4 ), 
    .F0(\dds_control_interface/n11823 ), .F1(\dds_control_interface/n11825 ));
  dds_gain_control_SLICE_605 \dds_gain_control/SLICE_605 ( 
    .B1(\dds_gain_control/total_count_5 ), 
    .A1(\dds_gain_control/total_count_4 ), 
    .B0(\dds_gain_control/total_count_13 ), 
    .A0(\dds_gain_control/total_count_12 ), .F0(\dds_gain_control/n11659 ), 
    .F1(\dds_gain_control/n12 ));
  dds_gain_control_SLICE_606 \dds_gain_control/SLICE_606 ( 
    .D1(\dds_gain_control/dac_count_13 ), .C1(\dds_gain_control/dac_count_7 ), 
    .B1(\dds_gain_control/dac_count_15 ), .A1(\dds_gain_control/dac_count_11 ), 
    .B0(\dds_gain_control/dac_count_14 ), .A0(\dds_gain_control/dac_count_6 ), 
    .F0(\dds_gain_control/n11373 ), .F1(\dds_gain_control/n11375 ));
  dds_gain_control_SLICE_607 \dds_gain_control/SLICE_607 ( 
    .D1(\dds_gain_control/dac_count_12 ), .C1(\dds_gain_control/dac_count_10 ), 
    .B1(\dds_gain_control/dac_count_9 ), .A1(\dds_gain_control/dac_count_8 ), 
    .B0(\dds_gain_control/dac_count_4 ), .A0(\dds_gain_control/dac_count_5 ), 
    .F0(\dds_gain_control/n11367 ), .F1(\dds_gain_control/n11383 ));
  dds_gain_control_SLICE_608 \dds_gain_control/SLICE_608 ( 
    .D1(\dds_gain_control/count_2 ), .C1(\dds_gain_control/count_6 ), 
    .B1(\dds_gain_control/count_7 ), .A1(\dds_gain_control/count_0 ), 
    .B0(\dds_gain_control/count_3 ), .A0(\dds_gain_control/count_4 ), 
    .F0(\dds_gain_control/n11769 ), .F1(\dds_gain_control/n11771 ));
  i2c_slave_top_registers_SLICE_609 \i2c_slave_top/registers/SLICE_609 ( 
    .D1(\i2c_slave_top/registers/control_11 ), 
    .C1(\i2c_slave_top/registers/control_1 ), .B1(control_3), 
    .A1(mcu_gpio_c_15), .D0(\i2c_slave_top/registers/control_9 ), 
    .C0(\i2c_slave_top/registers/control_4 ), 
    .B0(\i2c_slave_top/registers/control_13 ), 
    .A0(\i2c_slave_top/registers/control_7 ), 
    .F0(\i2c_slave_top/registers/n11791 ), 
    .F1(\i2c_slave_top/registers/n11801 ));
  i2c_slave_top_registers_SLICE_610 \i2c_slave_top/registers/SLICE_610 ( 
    .C1(\i2c_slave_top/registers/n6145 ), .B1(\i2c_slave_top/registers/n6146 ), 
    .A1(\i2c_slave_top/registers/n6147 ), .C0(\i2c_slave_top/registers/n6149 ), 
    .B0(\i2c_slave_top/registers/n6150 ), .A0(\i2c_slave_top/registers/n6151 ), 
    .M0(\i2c_slave_top/registers/n5834 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_597 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/addr_i_7 ), 
    .Q0(\i2c_slave_top/registers/n6151 ), 
    .F1(\i2c_slave_top/registers/n12633 ));
  dds_control_interface_SLICE_611 \dds_control_interface/SLICE_611 ( 
    .B1(\dds_control_interface/transfer_done ), .A1(static_control_7), 
    .B0(\dds_control_interface/test_run ), 
    .A0(\dds_control_interface/transfer_completed_temp_d ), 
    .F0(\dds_control_interface/n12625 ), .F1(\dds_control_interface/n12626 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_612 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_612 ( 
    .B1(\i2c_slave_top/data_buffer_i_3 ), .A1(\i2c_slave_top/data_buffer_i_6 ), 
    .B0(\i2c_slave_top/data_buffer_i_4 ), .A0(\i2c_slave_top/data_buffer_i_5 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11713 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11711 ));
  adc_control_SLICE_613 \adc_control/SLICE_613 ( 
    .D1(\adc_control/capture_state_2 ), .C1(\adc_control/capture_state_3 ), 
    .B1(\adc_control/capture_state_1 ), .A1(\adc_control/capture_state_0 ), 
    .D0(\adc_control/n5_adj_1748 ), .C0(\adc_control/count_2 ), 
    .B0(\adc_control/adc_sck_temp_enable_72 ), .A0(\adc_control/count_3 ), 
    .F0(\adc_control/adc_sck_temp_enable_23 ), 
    .F1(\adc_control/adc_sck_temp_enable_62 ));
  i2c_slave_top_registers_SLICE_614 \i2c_slave_top/registers/SLICE_614 ( 
    .D1(\i2c_slave_top/n12639 ), .C1(\i2c_slave_top/registers/n6141 ), 
    .B1(\i2c_slave_top/registers/n6142 ), .A1(\i2c_slave_top/registers/n6143 ), 
    .D0(\i2c_slave_top/registers/n12554 ), 
    .C0(\i2c_slave_top/registers/n11673 ), 
    .B0(\i2c_slave_top/registers/n12583 ), 
    .A0(\i2c_slave_top/registers/n12628 ), 
    .M0(\i2c_slave_top/registers/n5826 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_613 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_164 ), 
    .Q0(\i2c_slave_top/registers/n6143 ), 
    .F1(\i2c_slave_top/registers/n11201 ));
  dds_gain_control_SLICE_615 \dds_gain_control/SLICE_615 ( 
    .B1(\dds_gain_control/data_20 ), .A1(seed_spare3_c), 
    .B0(\dds_gain_control/cstate_1 ), .A0(\dds_gain_control/cstate_2 ), 
    .F0(\dds_gain_control/n12645 ), 
    .F1(\dds_gain_control/data_temp_23_N_1109_22 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_616 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_616 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5905 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9759 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10532 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12589 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12634 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_3 )
    );
  dds_control_interface_SLICE_617 \dds_control_interface/SLICE_617 ( 
    .D1(\dds_control_interface/cstate_2 ), 
    .C1(\dds_control_interface/cstate_0 ), 
    .B1(\dds_control_interface/total_count_15_N_1339_6 ), 
    .A1(\dds_control_interface/total_count_6 ), 
    .D0(\dds_control_interface/total_count_9 ), 
    .C0(\dds_control_interface/total_count_5 ), 
    .B0(\dds_control_interface/total_count_10 ), 
    .A0(\dds_control_interface/total_count_14 ), 
    .F0(\dds_control_interface/n10433 ), 
    .F1(\dds_control_interface/n9_adj_1740 ));
  dds_control_interface_SLICE_618 \dds_control_interface/SLICE_618 ( 
    .D1(\dds_control_interface/cstate_2 ), 
    .C1(\dds_control_interface/cstate_0 ), 
    .B1(\dds_control_interface/total_count_15_N_1339_8 ), 
    .A1(\dds_control_interface/total_count_8 ), 
    .D0(\dds_control_interface/total_count_15 ), 
    .C0(\dds_control_interface/total_count_13 ), 
    .B0(\dds_control_interface/total_count_12 ), 
    .A0(\dds_control_interface/total_count_7 ), 
    .F0(\dds_control_interface/n11319 ), 
    .F1(\dds_control_interface/n9_adj_1734 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_619 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_619 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3__N_78 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/n12573 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12575 ));
  i2c_slave_top_registers_SLICE_620 \i2c_slave_top/registers/SLICE_620 ( 
    .B1(n3233), .A1(\i2c_slave_top/registers/control_1 ), 
    .D0(\i2c_slave_top/registers/control_14 ), .C0(control_0), 
    .B0(data_23_N_925_19), .A0(\i2c_slave_top/registers/control_10 ), 
    .F0(\i2c_slave_top/registers/n11797 ), .F1(clk_10mhz_c_enable_89));
  SLICE_621 SLICE_621( .A0(status_2), .F0(seed_laser_en_led_n_c));
  i2c_slave_top_registers_SLICE_622 \i2c_slave_top/registers/SLICE_622 ( 
    .C0(\i2c_slave_top/registers/n12631 ), .B0(status_2), .A0(dds_control_0), 
    .F0(\i2c_slave_top/registers/n2294 ));
  i2c_slave_top_registers_SLICE_623 \i2c_slave_top/registers/SLICE_623 ( 
    .B0(\i2c_slave_top/registers/state_1 ), 
    .A0(\i2c_slave_top/registers/state_0 ), 
    .F0(\i2c_slave_top/registers/n12030 ));
  i2c_slave_top_registers_SLICE_624 \i2c_slave_top/registers/SLICE_624 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_9 ), .A0(dds_control_9), 
    .F0(\i2c_slave_top/registers/n2220 ));
  i2c_slave_top_registers_SLICE_625 \i2c_slave_top/registers/SLICE_625 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_1 ), .A0(dds_control_1), 
    .F0(\i2c_slave_top/registers/n2293 ));
  i2c_slave_top_registers_SLICE_626 \i2c_slave_top/registers/SLICE_626 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_10 ), .A0(dds_control_10), 
    .F0(\i2c_slave_top/registers/n2219 ));
  i2c_slave_top_registers_SLICE_627 \i2c_slave_top/registers/SLICE_627 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_2 ), .A0(dds_control_2), 
    .F0(\i2c_slave_top/registers/n2292 ));
  i2c_slave_top_registers_SLICE_628 \i2c_slave_top/registers/SLICE_628 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_11 ), .A0(dds_control_11), 
    .F0(\i2c_slave_top/registers/n2218 ));
  i2c_slave_top_registers_SLICE_629 \i2c_slave_top/registers/SLICE_629 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_3 ), .A0(dds_control_3), 
    .F0(\i2c_slave_top/registers/n2291 ));
  i2c_slave_top_registers_SLICE_630 \i2c_slave_top/registers/SLICE_630 ( 
    .C0(\i2c_slave_top/registers/data_vld_cnt ), 
    .B0(\i2c_slave_top/state_1_N_839_0 ), .A0(\i2c_slave_top/n12593 ), 
    .F0(\i2c_slave_top/registers/clk_N_1433_enable_8 ));
  i2c_slave_top_registers_SLICE_631 \i2c_slave_top/registers/SLICE_631 ( 
    .C0(\i2c_slave_top/registers/n12637 ), .B0(dds_current_limit_14), 
    .A0(cw_gain_14), .F0(\i2c_slave_top/registers/n2202 ));
  i2c_slave_top_registers_SLICE_632 \i2c_slave_top/registers/SLICE_632 ( 
    .C0(\i2c_slave_top/n12639 ), .B0(\i2c_slave_top/registers/addr_i_2 ), 
    .A0(\i2c_slave_top/registers/n12637 ), .F0(\i2c_slave_top/registers/n13 ));
  i2c_slave_top_registers_SLICE_633 \i2c_slave_top/registers/SLICE_633 ( 
    .C0(\i2c_slave_top/registers/n12637 ), .B0(dds_current_limit_13), 
    .A0(cw_gain_13), .F0(\i2c_slave_top/registers/n2203 ));
  i2c_slave_top_registers_SLICE_634 \i2c_slave_top/registers/SLICE_634 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_12 ), .A0(dds_control_12), 
    .F0(\i2c_slave_top/registers/n2217 ));
  i2c_slave_top_registers_SLICE_635 \i2c_slave_top/registers/SLICE_635 ( 
    .C0(\i2c_slave_top/registers/n12637 ), .B0(dds_current_limit_12), 
    .A0(cw_gain_12), .F0(\i2c_slave_top/registers/n2204 ));
  i2c_slave_top_registers_SLICE_636 \i2c_slave_top/registers/SLICE_636 ( 
    .C0(\i2c_slave_top/registers/n12637 ), 
    .B0(\i2c_slave_top/registers/n12631 ), 
    .A0(\i2c_slave_top/registers/addr_i_2 ), 
    .F0(\i2c_slave_top/registers/n11893 ));
  i2c_slave_top_registers_SLICE_637 \i2c_slave_top/registers/SLICE_637 ( 
    .C0(\i2c_slave_top/registers/n12637 ), .B0(dds_current_limit_11), 
    .A0(cw_gain_11), .F0(\i2c_slave_top/registers/n2205 ));
  i2c_slave_top_registers_SLICE_638 \i2c_slave_top/registers/SLICE_638 ( 
    .C0(\i2c_slave_top/registers/n12637 ), .B0(dds_current_limit_10), 
    .A0(cw_gain_10), .F0(\i2c_slave_top/registers/n2206 ));
  i2c_slave_top_registers_SLICE_639 \i2c_slave_top/registers/SLICE_639 ( 
    .C0(\i2c_slave_top/registers/n12637 ), .B0(dds_current_limit_9), 
    .A0(cw_gain_9), .F0(\i2c_slave_top/registers/n2207 ));
  i2c_slave_top_registers_SLICE_640 \i2c_slave_top/registers/SLICE_640 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_4 ), .A0(dds_control_4), 
    .F0(\i2c_slave_top/registers/n2290 ));
  i2c_slave_top_registers_SLICE_641 \i2c_slave_top/registers/SLICE_641 ( 
    .C0(\i2c_slave_top/registers/n12637 ), .B0(dds_current_limit_8), 
    .A0(cw_gain_8), .F0(\i2c_slave_top/registers/n2208 ));
  i2c_slave_top_registers_SLICE_642 \i2c_slave_top/registers/SLICE_642 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_13 ), .A0(dds_control_13), 
    .F0(\i2c_slave_top/registers/n2216 ));
  i2c_slave_top_registers_SLICE_643 \i2c_slave_top/registers/SLICE_643 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_5 ), .A0(dds_control_5), 
    .F0(\i2c_slave_top/registers/n2289 ));
  i2c_slave_top_registers_SLICE_644 \i2c_slave_top/registers/SLICE_644 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_14 ), .A0(dds_control_14), 
    .F0(\i2c_slave_top/registers/n2215 ));
  i2c_slave_top_registers_SLICE_645 \i2c_slave_top/registers/SLICE_645 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_6 ), .A0(dds_control_6), 
    .F0(\i2c_slave_top/registers/n2288 ));
  i2c_slave_top_registers_SLICE_646 \i2c_slave_top/registers/SLICE_646 ( 
    .C0(\i2c_slave_top/registers/n12631 ), 
    .B0(\i2c_slave_top/registers/static_control_15 ), .A0(dds_control_15), 
    .F0(\i2c_slave_top/registers/n2214 ));
  i2c_slave_top_registers_SLICE_647 \i2c_slave_top/registers/SLICE_647 ( 
    .D0(\i2c_slave_top/n12641 ), .C0(\i2c_slave_top/registers/n6125 ), 
    .B0(\i2c_slave_top/registers/n6126 ), .A0(\i2c_slave_top/registers/n6127 ), 
    .F0(\i2c_slave_top/registers/n5589 ));
  i2c_slave_top_registers_SLICE_648 \i2c_slave_top/registers/SLICE_648 ( 
    .C0(\i2c_slave_top/registers/n12631 ), .B0(static_control_7), 
    .A0(dds_control_7), .F0(\i2c_slave_top/registers/n2287 ));
  i2c_slave_top_registers_SLICE_649 \i2c_slave_top/registers/SLICE_649 ( 
    .D0(\i2c_slave_top/state_1_N_839_0 ), .C0(\i2c_slave_top/n12641 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), 
    .F0(\i2c_slave_top/registers/n12565 ));
  i2c_slave_top_registers_SLICE_650 \i2c_slave_top/registers/SLICE_650 ( 
    .B0(\i2c_slave_top/registers/control_1 ), .A0(data_23_N_925_19), 
    .F0(clk_10mhz_c_enable_54));
  i2c_slave_top_registers_SLICE_651 \i2c_slave_top/registers/SLICE_651 ( 
    .D0(\i2c_slave_top/registers/n11217 ), 
    .C0(\i2c_slave_top/registers/n12631 ), .B0(\i2c_slave_top/n12639 ), 
    .A0(\i2c_slave_top/registers/n12578 ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_197 ));
  i2c_slave_top_registers_SLICE_652 \i2c_slave_top/registers/SLICE_652 ( 
    .C0(\i2c_slave_top/registers/n12628 ), .B0(\i2c_slave_top/n12639 ), 
    .A0(\i2c_slave_top/registers/n12631 ), 
    .F0(\i2c_slave_top/registers/n12553 ));
  i2c_slave_top_registers_SLICE_653 \i2c_slave_top/registers/SLICE_653 ( 
    .D0(\i2c_slave_top/registers/n12552 ), 
    .C0(\i2c_slave_top/registers/n12544 ), 
    .B0(\i2c_slave_top/registers/n12548 ), 
    .A0(\i2c_slave_top/registers/addr_i_2 ), 
    .F0(\i2c_slave_top/registers/clk_10mhz_c_enable_179 ));
  i2c_slave_top_registers_SLICE_654 \i2c_slave_top/registers/SLICE_654 ( 
    .C0(\i2c_slave_top/registers/addr_i_2 ), .B0(dds_current_limit_3), 
    .A0(system_reset_n_c_3), .F0(\i2c_slave_top/registers/n2267 ));
  i2c_slave_top_registers_SLICE_655 \i2c_slave_top/registers/SLICE_655 ( 
    .C0(\i2c_slave_top/registers/addr_i_2 ), .B0(dds_current_limit_2), 
    .A0(status_2), .M0(\i2c_slave_top/n12594 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_197 ), .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/registers/n2268 ), .Q0(status_2));
  i2c_slave_top_registers_SLICE_656 \i2c_slave_top/registers/SLICE_656 ( 
    .C0(\i2c_slave_top/registers/addr_i_2 ), .B0(dds_current_limit_1), 
    .A0(seed_compared_c_1), .F0(\i2c_slave_top/registers/n2269 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_657 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_657 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_134 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12471 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12472 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_658 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_658 ( 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10995 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_659 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_659 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12615 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_660 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_660 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12616 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_661 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_661 ( 
    .B0(reset_n), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3913 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_662 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_662 ( 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_169_0 )
    , .M0(\i2c_slave_top/i2cslave_controller_top/out_n__inv ), 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect_i_N_340 )
    , 
    .CLK(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11751 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_663 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_663 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12632 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_664 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_664 ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_129 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_128 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11903 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_665 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_665 ( 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12579 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_666 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_666 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12640 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_667 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_667 ( 
    .D0(\i2c_slave_top/n12639 ), .C0(\i2c_slave_top/n11415 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .F0(\i2c_slave_top/n11391 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_668 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_668 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1_adj_1781 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_669 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_669 ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12587 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12589 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10436 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_670 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_670 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i )
    , .F0(n7927));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_671 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_671 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i )
    , .A0(reset_n), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect_i_N_340 )
    );
  i2c_slave_top_i2cslave_controller_top_filter_sda_inst_SLICE_672 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/SLICE_672 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 ), 
    .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_N_71 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 ));
  i2c_slave_top_i2cslave_controller_top_filter_scl_inst_SLICE_673 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/SLICE_673 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 ), 
    .CLK(clk_10mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_N_71 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 ));
  dds_gain_control_SLICE_674 \dds_gain_control/SLICE_674 ( 
    .D0(\dds_gain_control/dac_count_1 ), .C0(\dds_gain_control/dac_count_2 ), 
    .B0(\dds_gain_control/dac_count_3 ), .A0(\dds_gain_control/dac_count_0 ), 
    .F0(\dds_gain_control/n8 ));
  dds_gain_control_SLICE_675 \dds_gain_control/SLICE_675 ( 
    .B0(\dds_gain_control/n6840 ), .A0(\dds_gain_control/n6870 ), 
    .F0(\dds_gain_control/clk_10mhz_c_enable_265 ));
  dds_gain_control_SLICE_676 \dds_gain_control/SLICE_676 ( 
    .B0(\dds_gain_control/total_count_8 ), 
    .A0(\dds_gain_control/total_count_9 ), .F0(\dds_gain_control/n11649 ));
  dds_gain_control_SLICE_677 \dds_gain_control/SLICE_677 ( 
    .C0(\dds_gain_control/state_1 ), .B0(\dds_gain_control/state_2 ), 
    .A0(seed_spare3_c), .F0(\dds_gain_control/seed_spare1_c_enable_34 ));
  dds_gain_control_SLICE_678 \dds_gain_control/SLICE_678 ( 
    .B0(\dds_gain_control/state_2 ), .A0(\dds_gain_control/state_1 ), 
    .F0(\dds_gain_control/seed_spare1_c_enable_20 ));
  dds_gain_control_SLICE_679 \dds_gain_control/SLICE_679 ( 
    .B0(\dds_gain_control/data_valid_reset ), .A0(reset_n), 
    .M0(\dds_gain_control/cstate_2 ), 
    .CE(\dds_gain_control/clk_10mhz_c_enable_263 ), .CLK(clk_10mhz_c), 
    .F0(\dds_gain_control/state_3__N_882 ), 
    .Q0(\dds_gain_control/data_valid_reset ));
  dds_gain_control_SLICE_680 \dds_gain_control/SLICE_680 ( 
    .B0(data_23_N_925_19), .A0(\dds_gain_control/n3252 ), 
    .F0(\dds_gain_control/clk_10mhz_c_enable_251 ));
  reset_generator_SLICE_681 \reset_generator/SLICE_681 ( 
    .B0(\reset_generator/in_d3 ), .A0(\reset_generator/in_d2 ), 
    .M0(\reset_generator/in_d2 ), .LSR(rstn_c), .CLK(\reset_generator/clk_d2 ), 
    .F0(\reset_generator/reset_n_N_4 ), .Q0(\reset_generator/in_d3 ));
  adc_control_SLICE_682 \adc_control/SLICE_682 ( .B0(\adc_control/data_ready ), 
    .A0(\adc_control/adc_sck_temp ), .F0(seed_adc_sck_c));
  adc_control_SLICE_683 \adc_control/SLICE_683 ( .B0(\adc_control/count_6 ), 
    .A0(\adc_control/count_7 ), .F0(\adc_control/n11745 ));
  dds_control_interface_SLICE_684 \dds_control_interface/SLICE_684 ( 
    .B0(\dds_control_interface/index_2 ), .A0(\dds_control_interface/index_0 ), 
    .F0(\dds_control_interface/n12608 ));
  dds_control_interface_SLICE_685 \dds_control_interface/SLICE_685 ( 
    .B0(\dds_control_interface/mosi_reset ), .A0(reset_n), 
    .F0(\dds_control_interface/state_3__N_1254 ));
  dds_control_interface_SLICE_686 \dds_control_interface/SLICE_686 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_11 ), 
    .A0(\dds_control_interface/total_count_11 ), 
    .F0(\dds_control_interface/n9 ));
  dds_control_interface_SLICE_687 \dds_control_interface/SLICE_687 ( 
    .D0(\dds_control_interface/transfer_completed_temp_d ), 
    .C0(\dds_control_interface/test_run ), 
    .B0(\dds_control_interface/transfer_done ), .A0(static_control_7), 
    .M0(\dds_control_interface/transfer_completed_temp ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/n12585 ), 
    .Q0(\dds_control_interface/transfer_completed_temp_d ));
  SLICE_688 SLICE_688( .C0(control_0), 
    .B0(\dds_control_interface/transfer_done ), .A0(static_control_7), 
    .M0(\i2c_slave_top/n12603 ), 
    .CE(\i2c_slave_top/registers/clk_10mhz_c_enable_197 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/clk_10mhz_c_enable_9 ), .Q0(static_control_7));
  dds_control_interface_SLICE_689 \dds_control_interface/SLICE_689 ( 
    .B0(\dds_control_interface/data_valid_dbg ), .A0(reset_n), 
    .M0(\dds_control_interface/cstate_0 ), 
    .CE(\dds_control_interface/clk_10mhz_c_enable_261 ), .CLK(clk_10mhz_c), 
    .F0(\dds_control_interface/clk_10mhz_c_enable_59 ), 
    .Q0(\dds_control_interface/data_valid_dbg ));
  dds_control_interface_SLICE_690 \dds_control_interface/SLICE_690 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_10 ), 
    .A0(\dds_control_interface/total_count_10 ), 
    .F0(\dds_control_interface/n9_adj_1732 ));
  dds_control_interface_SLICE_691 \dds_control_interface/SLICE_691 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_9 ), 
    .A0(\dds_control_interface/total_count_9 ), 
    .F0(\dds_control_interface/n9_adj_1733 ));
  dds_control_interface_SLICE_692 \dds_control_interface/SLICE_692 ( 
    .B0(\dds_control_interface/cstate_2 ), 
    .A0(\dds_control_interface/cstate_1 ), 
    .F0(\dds_control_interface/clk_10mhz_c_enable_261 ));
  dds_control_interface_SLICE_693 \dds_control_interface/SLICE_693 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_0 ), 
    .A0(\dds_control_interface/total_count_0 ), 
    .F0(\dds_control_interface/n9_adj_1735 ));
  dds_control_interface_SLICE_694 \dds_control_interface/SLICE_694 ( 
    .B0(\dds_control_interface/cstate_2 ), 
    .A0(\dds_control_interface/cstate_0 ), 
    .F0(\dds_control_interface/clk_10mhz_c_enable_262 ));
  dds_control_interface_SLICE_695 \dds_control_interface/SLICE_695 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_15 ), 
    .A0(\dds_control_interface/total_count_15 ), 
    .F0(\dds_control_interface/n9_adj_1736 ));
  dds_control_interface_SLICE_696 \dds_control_interface/SLICE_696 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_14 ), 
    .A0(\dds_control_interface/total_count_14 ), 
    .F0(\dds_control_interface/n9_adj_1737 ));
  dds_control_interface_SLICE_697 \dds_control_interface/SLICE_697 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_13 ), 
    .A0(\dds_control_interface/total_count_13 ), 
    .F0(\dds_control_interface/n9_adj_1738 ));
  dds_control_interface_SLICE_698 \dds_control_interface/SLICE_698 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_7 ), 
    .A0(\dds_control_interface/total_count_7 ), 
    .F0(\dds_control_interface/n9_adj_1739 ));
  dds_control_interface_SLICE_699 \dds_control_interface/SLICE_699 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_5 ), 
    .A0(\dds_control_interface/total_count_5 ), 
    .F0(\dds_control_interface/n9_adj_1741 ));
  dds_control_interface_SLICE_700 \dds_control_interface/SLICE_700 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_12 ), 
    .A0(\dds_control_interface/total_count_12 ), 
    .F0(\dds_control_interface/n9_adj_1742 ));
  dds_control_interface_SLICE_701 \dds_control_interface/SLICE_701 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_4 ), 
    .A0(\dds_control_interface/total_count_4 ), 
    .F0(\dds_control_interface/n9_adj_1743 ));
  dds_control_interface_SLICE_702 \dds_control_interface/SLICE_702 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_3 ), 
    .A0(\dds_control_interface/total_count_3 ), 
    .F0(\dds_control_interface/n9_adj_1744 ));
  dds_control_interface_SLICE_703 \dds_control_interface/SLICE_703 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_2 ), 
    .A0(\dds_control_interface/total_count_2 ), 
    .F0(\dds_control_interface/n9_adj_1745 ));
  dds_control_interface_SLICE_704 \dds_control_interface/SLICE_704 ( 
    .D0(\dds_control_interface/cstate_2 ), 
    .C0(\dds_control_interface/cstate_0 ), 
    .B0(\dds_control_interface/total_count_15_N_1339_1 ), 
    .A0(\dds_control_interface/total_count_1 ), 
    .F0(\dds_control_interface/n9_adj_1746 ));
  SLICE_705 SLICE_705( .F0(VCC_net));
  SLICE_706 SLICE_706( .F0(GND_net));
  seed_laser_disable seed_laser_disable_I( .PADDO(VCC_net), 
    .seed_laser_disable(seed_laser_disable));
  seed_mod_ss seed_mod_ss_I( .PADDO(seed_mod_ss_c), .seed_mod_ss(seed_mod_ss));
  seed_mod_sck seed_mod_sck_I( .PADDO(seed_mod_sck_c), 
    .seed_mod_sck(seed_mod_sck));
  seed_mod_mosi seed_mod_mosi_I( .PADDO(seed_mod_mosi_c), 
    .seed_mod_mosi(seed_mod_mosi));
  sda sda_I( .PADDI(sda_out), .PADDT(n7927), .PADDO(GND_net), .sda(sda));
  scl scl_I( .PADDI(scl_out), .PADDO(GND_net), .scl(scl));
  seed_laser_en_led_n seed_laser_en_led_n_I( .PADDO(seed_laser_en_led_n_c), 
    .seed_laser_en_led_n(seed_laser_en_led_n));
  seed_adc_sck seed_adc_sck_I( .PADDO(seed_adc_sck_c), 
    .seed_adc_sck(seed_adc_sck));
  seed_adc_convert seed_adc_convert_I( .PADDO(seed_adc_convert_c), 
    .seed_adc_convert(seed_adc_convert));
  over_current_shutdown_n over_current_shutdown_n_I( .PADDO(VCC_net), 
    .over_current_shutdown_n(over_current_shutdown_n));
  seed_dac_mosi seed_dac_mosi_I( .PADDO(seed_spare2_c), 
    .seed_dac_mosi(seed_dac_mosi));
  seed_dac_ss seed_dac_ss_I( .PADDO(seed_spare3_c), .seed_dac_ss(seed_dac_ss));
  seed_dac_sck seed_dac_sck_I( .PADDO(seed_spare1_c), 
    .seed_dac_sck(seed_dac_sck));
  seed_ldac_n seed_ldac_n_I( .PADDO(seed_spare4_c), .seed_ldac_n(seed_ldac_n));
  seed_reset_n seed_reset_n_I( .PADDO(VCC_net), .seed_reset_n(seed_reset_n));
  heartbeat_n heartbeat_n_I( .PADDO(heartbeat_n_c_7), 
    .heartbeat_n(heartbeat_n));
  mcu_gpio mcu_gpio_I( .PADDO(mcu_gpio_c_15), .mcu_gpio(mcu_gpio));
  seed_spare1 seed_spare1_I( .PADDO(seed_spare1_c), .seed_spare1(seed_spare1));
  seed_spare2 seed_spare2_I( .PADDO(seed_spare2_c), .seed_spare2(seed_spare2));
  seed_spare3 seed_spare3_I( .PADDO(seed_spare3_c), .seed_spare3(seed_spare3));
  seed_spare4 seed_spare4_I( .PADDO(seed_spare4_c), .seed_spare4(seed_spare4));
  seed_gpio1 seed_gpio1_I( .PADDO(GND_net), .seed_gpio1(seed_gpio1));
  seed_gpio2 seed_gpio2_I( .PADDO(GND_net), .seed_gpio2(seed_gpio2));
  seed_gpio3 seed_gpio3_I( .PADDO(GND_net), .seed_gpio3(seed_gpio3));
  seed_gpio4 seed_gpio4_I( .PADDO(GND_net), .seed_gpio4(seed_gpio4));
  spare_led1_n spare_led1_n_I( .PADDO(GND_net), .spare_led1_n(spare_led1_n));
  spare_led2_n spare_led2_n_I( .PADDO(GND_net), .spare_led2_n(spare_led2_n));
  rstn rstn_I( .PADDI(rstn_c), .rstn(rstn));
  system_reset_n system_reset_n_I( .PADDI(system_reset_n_c_3), 
    .system_reset_n(system_reset_n));
  clk_10mhz clk_10mhz_I( .PADDI(clk_10mhz_c), .clk_10mhz(clk_10mhz));
  seed_adc_sdo1 seed_adc_sdo1_I( .PADDI(seed_adc_sdo1_c), 
    .seed_adc_sdo1(seed_adc_sdo1));
  seed_adc_sdo2 seed_adc_sdo2_I( .PADDI(seed_adc_sdo2_c), 
    .seed_adc_sdo2(seed_adc_sdo2));
  seed_compared seed_compared_I( .PADDI(seed_compared_c_1), 
    .seed_compared(seed_compared));
  GSR_INST GSR_INST( .GSRNET(reset_n));
  PUR PUR_INST( .PUR(VCC_net));
endmodule

module i2c_slave_top_registers_SLICE_0 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu2 \i2c_slave_top/registers/add_237_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h5aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module i2c_slave_top_registers_SLICE_1 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu2 \i2c_slave_top/registers/add_237_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_2 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu2 \i2c_slave_top/registers/add_237_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_3 ( input A1, output F1, FCO );
  wire   GNDI;

  ccu20001 \i2c_slave_top/registers/add_237_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module i2c_slave_top_registers_SLICE_4 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20002 \i2c_slave_top/registers/add_237_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_5 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \dds_gain_control/dac_count_1536__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \dds_gain_control/dac_count_1536__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \dds_gain_control/dac_count_1536_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'hfaaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_6 ( input A1, DI1, CE, LSR, CLK, output F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre \dds_gain_control/dac_count_1536__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20004 \dds_gain_control/dac_count_1536_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20004 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_7 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1108_add_2_15 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_8 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1108_add_2_13 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_9 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1108_add_2_11 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_10 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1108_add_2_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_11 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1108_add_2_7 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_12 ( input B1, A1, B0, A0, FCI, output F0, F1 );
  wire   GNDI;

  ccu20006 \dds_gain_control/add_602_17 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5a5a;
  defparam inst1.INIT1 = 16'h5a5a;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_13 ( input B1, A1, B0, A0, FCI, output F0, F1, 
    FCO );
  wire   GNDI;

  ccu20006 \dds_gain_control/add_602_15 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_14 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1108_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_15 ( input B1, A1, B0, A0, FCI, output F0, F1, 
    FCO );
  wire   GNDI;

  ccu20006 \dds_gain_control/add_602_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_16 ( input B1, A1, C0, B0, A0, FCI, output F0, 
    F1, FCO );
  wire   GNDI;

  ccu20007 \dds_gain_control/add_602_3 ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h56a6;
  defparam inst1.INIT1 = 16'h5a5a;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_17 ( input B1, A1, B0, A0, FCI, output F0, F1, 
    FCO );
  wire   GNDI;

  ccu20006 \dds_gain_control/add_602_13 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_18 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1108_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_19 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20008 \dds_gain_control/sub_1108_add_2_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h0000;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_20 ( input B0, A0, FCI, output F1 );
  wire   GNDI;

  ccu20009 \dds_gain_control/sub_1110_add_2_17 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_21 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1110_add_2_15 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_22 ( input B1, A1, B0, A0, FCI, output F0, F1, 
    FCO );
  wire   GNDI;

  ccu20006 \dds_gain_control/add_602_11 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_23 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1110_add_2_13 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_24 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1110_add_2_11 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_25 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1110_add_2_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_26 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1110_add_2_7 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_27 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1110_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_28 ( input B1, A1, B0, A0, FCI, output F0, F1, 
    FCO );
  wire   GNDI;

  ccu20006 \dds_gain_control/add_602_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_29 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20010 \dds_gain_control/sub_10_add_2_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20010 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_30 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \dds_gain_control/sub_1110_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_31 ( input B1, A1, B0, A0, FCI, output F0, F1, 
    FCO );
  wire   GNDI;

  ccu20006 \dds_gain_control/add_602_7 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_32 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \dds_gain_control/sub_10_add_2_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20011 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_33 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \dds_gain_control/sub_10_add_2_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_34 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \dds_gain_control/sub_10_add_2_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_35 ( input A1, output F1, FCO );
  wire   GNDI;

  ccu20001 \dds_gain_control/sub_10_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_36 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20008 \dds_gain_control/sub_1110_add_2_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_37 ( input A1, output FCO );
  wire   GNDI;

  ccu20012 \dds_gain_control/add_602_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20012 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0fff;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_38 ( input A0, DI0, CE, LSR, CLK, FCI, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre \dds_gain_control/dac_count_1536__i15 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20013 \dds_gain_control/dac_count_1536_add_4_17 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20013 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module dds_gain_control_SLICE_39 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \dds_gain_control/dac_count_1536__i14 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \dds_gain_control/dac_count_1536__i13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \dds_gain_control/dac_count_1536_add_4_15 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_40 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \dds_gain_control/dac_count_1536__i12 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \dds_gain_control/dac_count_1536__i11 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \dds_gain_control/dac_count_1536_add_4_13 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_41 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \dds_gain_control/dac_count_1536__i10 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \dds_gain_control/dac_count_1536__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \dds_gain_control/dac_count_1536_add_4_11 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_42 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \dds_gain_control/dac_count_1536__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \dds_gain_control/dac_count_1536__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \dds_gain_control/dac_count_1536_add_4_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_43 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \dds_gain_control/dac_count_1536__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \dds_gain_control/dac_count_1536__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \dds_gain_control/dac_count_1536_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_44 ( input B0, A0, FCI, output F1 );
  wire   GNDI;

  ccu20009 \dds_gain_control/sub_1108_add_2_17 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_45 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \dds_gain_control/dac_count_1536__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \dds_gain_control/dac_count_1536__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \dds_gain_control/dac_count_1536_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_46 ( input A0, DI0, CE, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/count_i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20010 \adc_control/sub_12_add_2_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_47 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/count_i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/count_i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20011 \adc_control/sub_12_add_2_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_48 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/count_i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \adc_control/count_i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20011 \adc_control/sub_12_add_2_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0014 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3JY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module adc_control_SLICE_49 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0014 \adc_control/count_i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/count_i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20011 \adc_control/sub_12_add_2_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_50 ( input A1, DI1, CE, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0014 \adc_control/count_i0 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20001 \adc_control/sub_12_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_51 ( input A0, DI0, CE, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/convert_count_1540__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20013 \adc_control/convert_count_1540_add_4_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_52 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/convert_count_1540__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/convert_count_1540__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \adc_control/convert_count_1540_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_53 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/convert_count_1540__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/convert_count_1540__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \adc_control/convert_count_1540_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_54 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/convert_count_1540__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/convert_count_1540__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \adc_control/convert_count_1540_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_55 ( input A1, DI1, CE, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/convert_count_1540__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20004 \adc_control/convert_count_1540_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_56 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20010 \dds_control_interface/sub_11_add_2_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_57 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \dds_control_interface/sub_11_add_2_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_58 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \dds_control_interface/sub_11_add_2_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_59 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \dds_control_interface/sub_11_add_2_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_60 ( input A1, output F1, FCO );
  wire   GNDI;

  ccu20001 \dds_control_interface/sub_11_add_2_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_61 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20002 \dds_control_interface/add_604_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_62 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu2 \dds_control_interface/add_604_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_63 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu2 \dds_control_interface/add_604_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_64 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu2 \dds_control_interface/add_604_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_65 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu2 \dds_control_interface/add_604_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_66 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu2 \dds_control_interface/add_604_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_67 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu2 \dds_control_interface/add_604_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_68 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu2 \dds_control_interface/add_604_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_69 ( input C1, B1, A1, output F1, FCO );
  wire   GNDI;

  ccu20015 \dds_control_interface/add_604_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20015 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'he1e1;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module heart_beat_SLICE_70 ( input A0, DI0, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre0016 \heart_beat/prescale_1535__i15 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20013 \heart_beat/prescale_1535_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0016 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module heart_beat_SLICE_71 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0016 \heart_beat/prescale_1535__i14 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \heart_beat/prescale_1535__i13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \heart_beat/prescale_1535_add_4_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_72 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0016 \heart_beat/prescale_1535__i12 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \heart_beat/prescale_1535__i11 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \heart_beat/prescale_1535_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_73 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0016 \heart_beat/prescale_1535__i10 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \heart_beat/prescale_1535__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \heart_beat/prescale_1535_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_74 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0016 \heart_beat/prescale_1535__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \heart_beat/prescale_1535__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \heart_beat/prescale_1535_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_75 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0016 \heart_beat/prescale_1535__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \heart_beat/prescale_1535__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \heart_beat/prescale_1535_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_76 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0016 \heart_beat/prescale_1535__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \heart_beat/prescale_1535__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \heart_beat/prescale_1535_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_77 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0016 \heart_beat/prescale_1535__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \heart_beat/prescale_1535__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \heart_beat/prescale_1535_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_78 ( input A1, DI1, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre0016 \heart_beat/prescale_1535__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \heart_beat/prescale_1535_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_79 ( input A0, DI0, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre0016 \heart_beat/count_1534_1701__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20013 \heart_beat/count_1534_1701_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_80 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0016 \heart_beat/count_1534_1701__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \heart_beat/count_1534_1701__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \heart_beat/count_1534_1701_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_81 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0016 \heart_beat/count_1534_1701__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \heart_beat/count_1534_1701__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \heart_beat/count_1534_1701_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_82 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0016 \heart_beat/count_1534_1701__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \heart_beat/count_1534_1701__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \heart_beat/count_1534_1701_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_83 ( input A1, DI1, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre0016 \heart_beat/count_1534_1701__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \heart_beat/count_1534_1701_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_84 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut4 \adc_control/i9602_3_lut_rep_283_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40017 \adc_control/i9318_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0016 \adc_control/adc_sck_temp_134 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEF01) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_85 ( input CE, CLK, output Q0, Q1 );
  wire   GNDI, VCCI, CE_dly, CLK_dly;

  vmuxregsre0016 \adc_control/capture_state_i1 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0016 \adc_control/capture_state_i0 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_86 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40018 \adc_control/i1_2_lut_rep_245 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 \adc_control/i6892_1_lut_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre \adc_control/capture_state_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/capture_state_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_87 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_88 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_89 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_90 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_91 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_92 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_93 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_94 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_95 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_96 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i9 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_97 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_98 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i11 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_99 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_100 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/current_data_i13 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_101 ( input B0, A0, DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40020 \adc_control/i5414_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/data_ready_133 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_102 ( input B1, A1, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40021 \adc_control/i7021_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \adc_control/i7019_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre \adc_control/sck_count_1539__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/sck_count_1539__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_103 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40023 \adc_control/i7035_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40024 \adc_control/i7028_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \adc_control/sck_count_1539__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/sck_count_1539__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7878) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_104 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_105 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_106 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_107 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_108 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_109 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_110 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_111 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_112 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_113 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i9 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_114 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_115 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i11 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_116 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_117 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \adc_control/voltage_data_i13 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_118 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_current_data_temp_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_current_data_temp_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_119 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_current_data_temp_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_current_data_temp_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_120 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_current_data_temp_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_current_data_temp_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_121 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_current_data_temp_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_current_data_temp_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_122 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_current_data_temp_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_current_data_temp_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_123 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_current_data_temp_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_current_data_temp_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_124 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_current_data_temp_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_current_data_temp_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_125 ( input CE, CLK, output Q0, Q1 );
  wire   GNDI, VCCI, CE_dly, CLK_dly;

  vmuxregsre0016 \adc_control/adc_current_data_temp_i15 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0016 \adc_control/adc_current_data_temp_i14 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_126 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_127 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_128 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_129 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_130 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_131 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_132 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_133 ( input CE, CLK, output Q0, Q1 );
  wire   GNDI, VCCI, CE_dly, CLK_dly;

  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i15 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0016 \adc_control/adc_voltage_data_temp_i14 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_134 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40025 \i2c_slave_top/registers/i1_4_lut_adj_316 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40025 \i2c_slave_top/registers/i1_4_lut_adj_331 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/control_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/control_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_135 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_253_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_276_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0027 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module i2c_slave_top_SLICE_136 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_251_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_252_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_137 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i5405_2_lut_rep_249_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i5404_2_lut_rep_250_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_138 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_285_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i5406_2_lut_rep_248_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_139 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_140 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_141 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_142 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/cw_current_limit_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_143 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_144 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_145 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_146 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_147 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_148 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_149 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i13 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_150 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i15 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_gain_i14 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_151 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40028 \i2c_slave_top/registers/i1_3_lut_adj_347 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40029 \i2c_slave_top/registers/i1_3_lut_adj_348 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/data_i19 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_i16 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBABA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5454) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0030 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module i2c_slave_top_SLICE_152 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40031 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_261 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40025 \i2c_slave_top/registers/i1_4_lut_adj_308 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/control_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_153 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_154 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_155 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_156 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_157 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_158 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_159 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_160 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_control_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_161 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40032 \dds_control_interface/i9191_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40033 \dds_control_interface/i1_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0034 \dds_control_interface/count_7__I_84_i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0034 \dds_control_interface/count_7__I_84_i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00F4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0034 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1B INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module dds_control_interface_SLICE_162 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40032 \dds_control_interface/i9192_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40032 \dds_control_interface/i9193_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0034 \dds_control_interface/count_7__I_84_i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0034 \dds_control_interface/count_7__I_84_i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_163 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40033 \dds_control_interface/i1_2_lut_4_lut_adj_114 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40033 \dds_control_interface/i1_2_lut_4_lut_adj_113 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0035 \dds_control_interface/count_7__I_84_i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0035 \dds_control_interface/count_7__I_84_i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0035 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1D INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module dds_control_interface_SLICE_164 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40033 \dds_control_interface/i1_2_lut_4_lut_adj_116 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40033 \dds_control_interface/i1_2_lut_4_lut_adj_115 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0035 \dds_control_interface/count_7__I_84_i8 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0035 \dds_control_interface/count_7__I_84_i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_165 ( input B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40036 \dds_control_interface/i9452_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \dds_control_interface/cstate__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9999) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_166 ( input C1, B1, A1, D0, C0, B0, A0, DI0, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40037 \dds_control_interface/i4383_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40038 \dds_control_interface/i9448_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \dds_control_interface/cstate__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6262) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h303A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_167 ( input B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40018 \dds_control_interface/i1_2_lut_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \dds_control_interface/cstate__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_168 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40039 \dds_control_interface/mux_289_i2_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40040 \dds_control_interface/mux_289_i1_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \dds_control_interface/data_i0_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_control_interface/data_i0_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A3A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_169 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40039 \dds_control_interface/mux_289_i4_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40039 \dds_control_interface/mux_289_i3_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \dds_control_interface/data_i0_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_control_interface/data_i0_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_170 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40041 \dds_control_interface/i23_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40039 \dds_control_interface/mux_289_i5_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \dds_control_interface/data_i0_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_control_interface/data_i0_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F08) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_171 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40042 \dds_control_interface/mux_289_i8_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40043 \dds_control_interface/mux_289_i7_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \dds_control_interface/data_i0_i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_control_interface/data_i0_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCA0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0ACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_172 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40039 \dds_control_interface/mux_289_i10_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40039 \dds_control_interface/mux_289_i9_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \dds_control_interface/data_i0_i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_control_interface/data_i0_i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_173 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40044 \dds_control_interface/i5401_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40039 \dds_control_interface/mux_289_i11_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \dds_control_interface/data_i0_i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_control_interface/data_i0_i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h10F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_174 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40044 \dds_control_interface/i5403_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40044 \dds_control_interface/i5402_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \dds_control_interface/data_i0_i13 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_control_interface/data_i0_i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_175 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40039 \dds_control_interface/mux_289_i16_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40039 \dds_control_interface/mux_289_i15_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \dds_control_interface/data_i0_i15 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_control_interface/data_i0_i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_176 ( input D1, C1, B1, A1, C0, B0, A0, DI1, 
    DI0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_105 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40046 \dds_control_interface/i1_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5140) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0404) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_177 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_103 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_106 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_178 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_101 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_98 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_179 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_100 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_102 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i9 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i8 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_180 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40045 \dds_control_interface/i1_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_99 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i11 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i10 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_181 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_107 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_104 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i13 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i12 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_182 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_109 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_108 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i15 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i14 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_183 ( input D0, C0, B0, A0, DI0, LSR, CLK, 
    output F0, Q0 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40045 \dds_control_interface/i1_4_lut_4_lut_adj_110 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0035 \dds_control_interface/data_temp_15__I_0_i16 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_184 ( input B1, A1, D0, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40047 \dds_control_interface/i5498_2_lut_rep_306 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 \dds_control_interface/i5253_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \dds_control_interface/data_valid_324 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h70FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_186 ( input C1, B1, A1, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40049 \dds_control_interface/i6999_2_lut_3_lut_4_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \dds_control_interface/i1_2_lut_3_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_control_interface/index_1537_1538__i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_control_interface/index_1537_1538__i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC6C6) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB5B5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_187 ( input C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40051 \dds_control_interface/i7006_3_lut_4_lut_4_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \dds_control_interface/index_1537_1538__i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_188 ( input A0, DI0, LSR, CLK, output F0, 
    Q0 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40022 \dds_control_interface/ss0_temp_d_I_0_1_lut ( .A(A0), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \dds_control_interface/mosi_reset_287 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module dds_control_interface_SLICE_189 ( input C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40052 \dds_control_interface/i1_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \dds_control_interface/i1_4_lut_adj_120 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \dds_control_interface/sck_temp_285 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_190 ( input M0, CLK, output Q0 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly;

  vmuxregsre0016 \dds_control_interface/sck_temp2_278 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
  endspecify

endmodule

module dds_control_interface_SLICE_191 ( input A0, DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40022 \dds_control_interface/i4425_1_lut_rep_301 ( .A(A0), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_control_interface/ss0_temp_284 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_192 ( input M0, LSR, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, LSR_dly;

  vmuxregsre0014 \dds_control_interface/ss0_temp2_279 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_193 ( input M0, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  vmuxregsre0016 \dds_control_interface/ss0_temp_d_286 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_194 ( input M0, CLK, output Q0 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly;

  vmuxregsre0027 \dds_control_interface/ss0_temp_dd_275 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
  endspecify

endmodule

module dds_control_interface_SLICE_195 ( input B1, A1, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40020 \dds_control_interface/i1_2_lut_rep_328 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \dds_control_interface/i1_1_lut_rep_287 ( .A(A0), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0035 \dds_control_interface/state_3__I_0_332_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0035 \dds_control_interface/state_3__I_0_332_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_196 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0030 \dds_control_interface/test_mode_d_326 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_197 ( input B0, A0, DI0, LSR, CLK, output 
    F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40018 \dds_control_interface/i5283_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \dds_control_interface/test_run_325 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_198 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_control_interface/i1_4_lut_adj_146 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40053 \dds_control_interface/i1_4_lut_adj_122 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \dds_control_interface/total_count_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_control_interface/total_count_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_199 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_control_interface/i1_4_lut_adj_142 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40053 \dds_control_interface/i1_4_lut_adj_144 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \dds_control_interface/total_count_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_control_interface/total_count_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_200 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_control_interface/i1_4_lut_adj_137 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40053 \dds_control_interface/i1_4_lut_adj_139 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \dds_control_interface/total_count_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_control_interface/total_count_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_201 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_control_interface/i1_4_lut_adj_134 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40053 \dds_control_interface/i1_4_lut_adj_136 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \dds_control_interface/total_count_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_control_interface/total_count_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_202 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_control_interface/i1_4_lut_adj_119 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40053 \dds_control_interface/i1_4_lut_adj_121 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \dds_control_interface/total_count_i9 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_control_interface/total_count_i8 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_203 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_control_interface/i1_4_lut_adj_111 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40053 \dds_control_interface/i1_4_lut_adj_112 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \dds_control_interface/total_count_i11 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_control_interface/total_count_i10 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_204 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_control_interface/i1_4_lut_adj_132 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40053 \dds_control_interface/i1_4_lut_adj_138 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \dds_control_interface/total_count_i13 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_control_interface/total_count_i12 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_205 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_control_interface/i1_4_lut_adj_129 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40053 \dds_control_interface/i1_4_lut_adj_131 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \dds_control_interface/total_count_i15 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_control_interface/total_count_i14 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_206 ( input C1, B1, A1, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40054 \dds_control_interface/i1_3_lut_adj_125 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40055 \dds_control_interface/i9489_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0016 \dds_control_interface/transfer_completed_temp_288 ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4141) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_208 ( input DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40056 \dds_control_interface/n12948\000/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \dds_control_interface/transfer_done_328 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_209 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_210 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_211 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_212 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_213 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_214 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_215 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_216 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \i2c_slave_top/registers/dds_current_limit_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_217 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_218 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_219 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_220 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_221 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_222 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_223 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_224 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_gain_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_225 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40019 \dds_gain_control/i1_2_lut_adj_242 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40057 \dds_gain_control/i1_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0058 \dds_gain_control/count_i0_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/count_i0_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0058 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module dds_gain_control_SLICE_226 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40057 \dds_gain_control/i1_2_lut_adj_240 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 \dds_gain_control/i1_2_lut_adj_241 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/count_i0_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0058 \dds_gain_control/count_i0_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_227 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40057 \dds_gain_control/i1_2_lut_adj_238 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 \dds_gain_control/i1_2_lut_adj_239 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/count_i0_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0058 \dds_gain_control/count_i0_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_228 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40057 \dds_gain_control/i1_2_lut_adj_236 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40057 \dds_gain_control/i1_2_lut_adj_237 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/count_i0_i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/count_i0_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_229 ( input C1, B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40059 \dds_gain_control/i1_2_lut_3_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \dds_gain_control/i1_2_lut_rep_302 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \dds_gain_control/cstate__i1 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \dds_gain_control/cstate__i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_230 ( input B1, A1, B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40047 \dds_gain_control/i1_2_lut_adj_220 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40057 \dds_gain_control/i1_2_lut_rep_224 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \dds_gain_control/cstate__i2 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_231 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_232 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_233 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_234 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_235 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_236 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_237 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_238 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/cw_current_limit_reg_i0_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_239 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_240 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_241 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_242 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_243 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_244 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_245 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i13 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_246 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i15 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/cw_gain_reg_i0_i14 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_247 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40060 \dds_gain_control/i1_4_lut_adj_207 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40061 \dds_gain_control/i9514_2_lut_rep_225_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \dds_gain_control/dac_state__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1F1F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_248 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40062 \dds_gain_control/i1_4_lut_adj_198 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40063 \dds_gain_control/i1_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \dds_gain_control/dac_state__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE0E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_249 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40064 \dds_gain_control/i1_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \dds_gain_control/i1_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0016 \dds_gain_control/dac_state__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2828) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF7FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_250 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40066 \dds_gain_control/data_23__I_0_i2_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \dds_gain_control/data_23__I_0_i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/data_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_251 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40066 \dds_gain_control/data_23__I_0_i4_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \dds_gain_control/data_23__I_0_i3_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/data_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_252 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40066 \dds_gain_control/data_23__I_0_i6_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \dds_gain_control/data_23__I_0_i5_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/data_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_253 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40066 \dds_gain_control/data_23__I_0_i8_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \dds_gain_control/data_23__I_0_i7_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/data_i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_254 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40066 \dds_gain_control/data_23__I_0_i10_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \dds_gain_control/data_23__I_0_i9_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/data_i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_255 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40066 \dds_gain_control/data_23__I_0_i12_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \dds_gain_control/data_23__I_0_i11_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/data_i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_256 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40066 \dds_gain_control/data_23__I_0_i14_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \dds_gain_control/data_23__I_0_i13_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/data_i13 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_257 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40066 \dds_gain_control/data_23__I_0_i16_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \dds_gain_control/data_23__I_0_i15_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \dds_gain_control/data_i15 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_258 ( input DI0, CE, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40056 \dds_gain_control/n12948\001/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \dds_gain_control/data_i20 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_259 ( input M0, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  vmuxregsre0016 \dds_gain_control/data_ready_d_136 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_260 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40055 \dds_gain_control/i1_2_lut_3_lut_adj_233 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40046 \dds_gain_control/i1_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0030 \dds_gain_control/data_temp__i18 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_temp__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_261 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_261/dds_gain_control/SLICE_261_K1_H1 , 
         \dds_gain_control/SLICE_261/dds_gain_control/i12_adj_183/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_261_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_261/dds_gain_control/SLICE_261_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_183/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_261/dds_gain_control/i12_adj_183/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_261_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_261/dds_gain_control/i12_adj_183/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_261/dds_gain_control/SLICE_261_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module dds_gain_control_SLICE_262 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_262/dds_gain_control/SLICE_262_K1_H1 , 
         \dds_gain_control/SLICE_262/dds_gain_control/i12_adj_188/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_262_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_262/dds_gain_control/SLICE_262_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_188/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_262/dds_gain_control/i12_adj_188/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_262_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_262/dds_gain_control/i12_adj_188/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_262/dds_gain_control/SLICE_262_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_263 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_263/dds_gain_control/SLICE_263_K1_H1 , 
         \dds_gain_control/SLICE_263/dds_gain_control/i12_adj_191/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_263_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_263/dds_gain_control/SLICE_263_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_191/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_263/dds_gain_control/i12_adj_191/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_263_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_263/dds_gain_control/i12_adj_191/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_263/dds_gain_control/SLICE_263_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_264 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_264/dds_gain_control/SLICE_264_K1_H1 , 
         \dds_gain_control/SLICE_264/dds_gain_control/i12_adj_194/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_264_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_264/dds_gain_control/SLICE_264_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_194/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_264/dds_gain_control/i12_adj_194/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_264_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_264/dds_gain_control/i12_adj_194/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_264/dds_gain_control/SLICE_264_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_265 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_265/dds_gain_control/SLICE_265_K1_H1 , 
         \dds_gain_control/SLICE_265/dds_gain_control/i12_adj_195/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_265_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_265/dds_gain_control/SLICE_265_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_195/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_265/dds_gain_control/i12_adj_195/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_265_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_265/dds_gain_control/i12_adj_195/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_265/dds_gain_control/SLICE_265_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_266 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_266/dds_gain_control/SLICE_266_K1_H1 , 
         \dds_gain_control/SLICE_266/dds_gain_control/i12/GATE_H0 , VCCI, 
         DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_266_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_266/dds_gain_control/SLICE_266_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12/GATE ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_266/dds_gain_control/i12/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_266_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_266/dds_gain_control/i12/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_266/dds_gain_control/SLICE_266_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_267 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_267/dds_gain_control/SLICE_267_K1_H1 , 
         \dds_gain_control/SLICE_267/dds_gain_control/i12_adj_196/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_267_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_267/dds_gain_control/SLICE_267_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_196/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_267/dds_gain_control/i12_adj_196/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_267_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_267/dds_gain_control/i12_adj_196/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_267/dds_gain_control/SLICE_267_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_268 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_268/dds_gain_control/SLICE_268_K1_H1 , 
         \dds_gain_control/SLICE_268/dds_gain_control/i12_adj_197/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_268_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_268/dds_gain_control/SLICE_268_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_197/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_268/dds_gain_control/i12_adj_197/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_268_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_268/dds_gain_control/i12_adj_197/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_268/dds_gain_control/SLICE_268_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_269 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_269/dds_gain_control/SLICE_269_K1_H1 , 
         \dds_gain_control/SLICE_269/dds_gain_control/i12_adj_199/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_269_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_269/dds_gain_control/SLICE_269_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_199/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_269/dds_gain_control/i12_adj_199/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_269_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_269/dds_gain_control/i12_adj_199/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_269/dds_gain_control/SLICE_269_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_270 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_270/dds_gain_control/SLICE_270_K1_H1 , 
         \dds_gain_control/SLICE_270/dds_gain_control/i12_adj_200/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_270_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_270/dds_gain_control/SLICE_270_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_200/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_270/dds_gain_control/i12_adj_200/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i11 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_270_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_270/dds_gain_control/i12_adj_200/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_270/dds_gain_control/SLICE_270_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_271 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_271/dds_gain_control/SLICE_271_K1_H1 , 
         \dds_gain_control/SLICE_271/dds_gain_control/i12_adj_202/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_271_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_271/dds_gain_control/SLICE_271_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_202/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_271/dds_gain_control/i12_adj_202/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_271_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_271/dds_gain_control/i12_adj_202/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_271/dds_gain_control/SLICE_271_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_272 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_272/dds_gain_control/SLICE_272_K1_H1 , 
         \dds_gain_control/SLICE_272/dds_gain_control/i12_adj_226/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_272_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_272/dds_gain_control/SLICE_272_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_226/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_272/dds_gain_control/i12_adj_226/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_272_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_272/dds_gain_control/i12_adj_226/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_272/dds_gain_control/SLICE_272_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_273 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_273/dds_gain_control/SLICE_273_K1_H1 , 
         \dds_gain_control/SLICE_273/dds_gain_control/i12_adj_244/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_273_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_273/dds_gain_control/SLICE_273_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_244/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_273/dds_gain_control/i12_adj_244/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_273_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_273/dds_gain_control/i12_adj_244/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_273/dds_gain_control/SLICE_273_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_274 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_274/dds_gain_control/SLICE_274_K1_H1 , 
         \dds_gain_control/SLICE_274/dds_gain_control/i12_adj_245/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_274_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_274/dds_gain_control/SLICE_274_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_245/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_274/dds_gain_control/i12_adj_245/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i15 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_274_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_274/dds_gain_control/i12_adj_245/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_274/dds_gain_control/SLICE_274_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_275 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_275/dds_gain_control/SLICE_275_K1_H1 , 
         \dds_gain_control/SLICE_275/dds_gain_control/i12_adj_204/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_275_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_275/dds_gain_control/SLICE_275_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_204/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_275/dds_gain_control/i12_adj_204/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i16 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_275_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_275/dds_gain_control/i12_adj_204/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_275/dds_gain_control/SLICE_275_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_276 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_276/dds_gain_control/SLICE_276_K1_H1 , 
         \dds_gain_control/SLICE_276/dds_gain_control/i12_adj_175/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_276_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_276/dds_gain_control/SLICE_276_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_175/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_276/dds_gain_control/i12_adj_175/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i17 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_276_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_276/dds_gain_control/i12_adj_175/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_276/dds_gain_control/SLICE_276_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_277 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40068 \dds_gain_control/i5393_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \dds_gain_control/i1_2_lut_3_lut_adj_229 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \dds_gain_control/data_temp__i21 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_temp__i19 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7520) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_278 ( input B1, A1, B0, A0, DI0, M0, CE, LSR, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \dds_gain_control/SLICE_278/dds_gain_control/SLICE_278_K1_H1 , 
         \dds_gain_control/SLICE_278/dds_gain_control/i12_adj_179/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dds_gain_control/SLICE_278_K1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\dds_gain_control/SLICE_278/dds_gain_control/SLICE_278_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \dds_gain_control/i12_adj_179/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\dds_gain_control/SLICE_278/dds_gain_control/i12_adj_179/GATE_H0 ));
  vmuxregsre0030 \dds_gain_control/data_temp__i20 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \dds_gain_control/SLICE_278_K0K1MUX ( 
    .D0(\dds_gain_control/SLICE_278/dds_gain_control/i12_adj_179/GATE_H0 ), 
    .D1(\dds_gain_control/SLICE_278/dds_gain_control/SLICE_278_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_279 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40055 \dds_gain_control/i1_2_lut_3_lut_adj_232 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40068 \dds_gain_control/i5394_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \dds_gain_control/data_temp__i23 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/data_temp__i22 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_281 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_282 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_283 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_284 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_285 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_286 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_287 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_288 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/dds_current_limit_reg_i0_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_289 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_290 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_291 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/dds_gain_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_292 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/dds_gain_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_293 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_294 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_295 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/dds_gain_reg_i0_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_296 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \dds_gain_control/dds_gain_reg_i0_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 \dds_gain_control/dds_gain_reg_i0_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_297 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0027 \dds_gain_control/data_ready_128 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_298 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40069 \dds_gain_control/i1_2_lut_rep_240_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40070 \dds_gain_control/i1_3_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \dds_gain_control/state__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \dds_gain_control/state__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0527) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_299 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_gain_control/i1_4_lut_adj_235 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40053 \dds_gain_control/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0016 \dds_gain_control/total_count_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/total_count_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_300 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_gain_control/i1_4_lut_adj_230 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40053 \dds_gain_control/i1_4_lut_adj_234 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0016 \dds_gain_control/total_count_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/total_count_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_301 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_gain_control/i1_4_lut_adj_212 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40053 \dds_gain_control/i1_4_lut_adj_216 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0016 \dds_gain_control/total_count_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/total_count_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_302 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_gain_control/i1_4_lut_adj_210 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40053 \dds_gain_control/i1_4_lut_adj_211 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0016 \dds_gain_control/total_count_i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/total_count_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_303 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_gain_control/i1_4_lut_adj_208 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40053 \dds_gain_control/i1_4_lut_adj_209 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0016 \dds_gain_control/total_count_i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/total_count_i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_304 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_gain_control/i1_4_lut_adj_213 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40053 \dds_gain_control/i1_4_lut_adj_246 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0016 \dds_gain_control/total_count_i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/total_count_i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_305 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_gain_control/i1_4_lut_adj_228 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40053 \dds_gain_control/i1_4_lut_adj_189 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0016 \dds_gain_control/total_count_i13 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/total_count_i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_306 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40053 \dds_gain_control/i1_4_lut_adj_224 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40053 \dds_gain_control/i1_4_lut_adj_227 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0016 \dds_gain_control/total_count_i15 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/total_count_i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_307 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/addr_start_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0016 \i2c_slave_top/registers/addr_start_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_308 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/addr_start_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0016 \i2c_slave_top/registers/addr_start_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_309 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/addr_start_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0016 \i2c_slave_top/registers/addr_start_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_310 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/addr_start_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0016 \i2c_slave_top/registers/addr_start_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_311
   ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut4 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_286 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i1 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_312
   ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut4 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_256 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i2 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_313
   ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_294 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i3 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_314
   ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40072 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_50_i6_2_lut_rep_325 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_295 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i4 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_315
   ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40019 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_311 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_296 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i5 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_316
   ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40072 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_279_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_250 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i6 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_317
   ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40057 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i5451_2_lut_rep_324 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_298 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i7 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_318
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40073 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_252 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_299 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i8 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_319 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   
         \i2c_slave_top/registers/SLICE_319/i2c_slave_top/registers/SLICE_319_K1_H1 
         , GNDI, 
         \i2c_slave_top/registers/SLICE_319/i2c_slave_top/registers/mux_1002_i1/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40075 \i2c_slave_top/registers/SLICE_319_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\i2c_slave_top/registers/SLICE_319/i2c_slave_top/registers/SLICE_319_K1_H1 )
    );
  lut40076 \i2c_slave_top/registers/mux_1002_i1/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_319/i2c_slave_top/registers/mux_1002_i1/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/data_out_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_319_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_319/i2c_slave_top/registers/mux_1002_i1/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_319/i2c_slave_top/registers/SLICE_319_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCA0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40076 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_320 ( input C1, B1, A1, C0, B0, A0, DI0, 
    M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_320/i2c_slave_top/registers/SLICE_320_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_320/i2c_slave_top/registers/mux_1002_i2/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/SLICE_320_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_320/i2c_slave_top/registers/SLICE_320_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/mux_1002_i2/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_320/i2c_slave_top/registers/mux_1002_i2/GATE_H0 )
    );
  vmuxregsre \i2c_slave_top/registers/data_out_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_320_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_320/i2c_slave_top/registers/mux_1002_i2/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_320/i2c_slave_top/registers/SLICE_320_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_321 ( input C1, B1, A1, C0, B0, A0, DI0, 
    M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_321/i2c_slave_top/registers/SLICE_321_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_321/i2c_slave_top/registers/mux_1002_i3/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/SLICE_321_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_321/i2c_slave_top/registers/SLICE_321_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/mux_1002_i3/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_321/i2c_slave_top/registers/mux_1002_i3/GATE_H0 )
    );
  vmuxregsre \i2c_slave_top/registers/data_out_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_321_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_321/i2c_slave_top/registers/mux_1002_i3/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_321/i2c_slave_top/registers/SLICE_321_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_322 ( input C1, B1, A1, C0, B0, A0, DI0, 
    M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_322/i2c_slave_top/registers/SLICE_322_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_322/i2c_slave_top/registers/mux_1002_i4/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/SLICE_322_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_322/i2c_slave_top/registers/SLICE_322_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/mux_1002_i4/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_322/i2c_slave_top/registers/mux_1002_i4/GATE_H0 )
    );
  vmuxregsre \i2c_slave_top/registers/data_out_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_322_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_322/i2c_slave_top/registers/mux_1002_i4/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_322/i2c_slave_top/registers/SLICE_322_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_323 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   
         \i2c_slave_top/registers/SLICE_323/i2c_slave_top/registers/SLICE_323_K1_H1 
         , GNDI, 
         \i2c_slave_top/registers/SLICE_323/i2c_slave_top/registers/mux_1002_i5/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40075 \i2c_slave_top/registers/SLICE_323_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\i2c_slave_top/registers/SLICE_323/i2c_slave_top/registers/SLICE_323_K1_H1 )
    );
  lut40076 \i2c_slave_top/registers/mux_1002_i5/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_323/i2c_slave_top/registers/mux_1002_i5/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/data_out_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_323_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_323/i2c_slave_top/registers/mux_1002_i5/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_323/i2c_slave_top/registers/SLICE_323_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_324 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   
         \i2c_slave_top/registers/SLICE_324/i2c_slave_top/registers/SLICE_324_K1_H1 
         , GNDI, 
         \i2c_slave_top/registers/SLICE_324/i2c_slave_top/registers/mux_1002_i6/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40075 \i2c_slave_top/registers/SLICE_324_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\i2c_slave_top/registers/SLICE_324/i2c_slave_top/registers/SLICE_324_K1_H1 )
    );
  lut40076 \i2c_slave_top/registers/mux_1002_i6/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_324/i2c_slave_top/registers/mux_1002_i6/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/data_out_i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_324_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_324/i2c_slave_top/registers/mux_1002_i6/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_324/i2c_slave_top/registers/SLICE_324_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_325 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   
         \i2c_slave_top/registers/SLICE_325/i2c_slave_top/registers/SLICE_325_K1_H1 
         , GNDI, 
         \i2c_slave_top/registers/SLICE_325/i2c_slave_top/registers/mux_1002_i7/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40075 \i2c_slave_top/registers/SLICE_325_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\i2c_slave_top/registers/SLICE_325/i2c_slave_top/registers/SLICE_325_K1_H1 )
    );
  lut40076 \i2c_slave_top/registers/mux_1002_i7/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_325/i2c_slave_top/registers/mux_1002_i7/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/data_out_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_325_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_325/i2c_slave_top/registers/mux_1002_i7/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_325/i2c_slave_top/registers/SLICE_325_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_326 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   
         \i2c_slave_top/registers/SLICE_326/i2c_slave_top/registers/SLICE_326_K1_H1 
         , GNDI, 
         \i2c_slave_top/registers/SLICE_326/i2c_slave_top/registers/mux_1002_i8/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40075 \i2c_slave_top/registers/SLICE_326_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\i2c_slave_top/registers/SLICE_326/i2c_slave_top/registers/SLICE_326_K1_H1 )
    );
  lut40076 \i2c_slave_top/registers/mux_1002_i8/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_326/i2c_slave_top/registers/mux_1002_i8/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/data_out_i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_326_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_326/i2c_slave_top/registers/mux_1002_i8/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_326/i2c_slave_top/registers/SLICE_326_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_filter_scl_inst_SLICE_327 ( 
    input A0, DI0, M1, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40022 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_I_0_1_lut ( 
    .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2_14 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1_13 ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_filter_sda_inst_SLICE_330 ( 
    input A0, DI0, M1, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40022 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_I_0_1_lut ( 
    .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2_14 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1_13 ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_filter_sda_inst_SLICE_332 ( 
    input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_16 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_333
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, CLK_NOTIN, GNDI, DI0_dly, CLK_dly;

  lut40077 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_279 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40078 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_284 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_768 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40078 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_334
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, M0, CE, LSR, CLK, output OFX0, 
    Q0 );
  wire   
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_1222_i1/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40079 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334_K1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334_K1_H1 )
    );
  lut40080 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_1222_i1/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_1222_i1/GATE_H0 )
    );
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i0 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_1222_i1/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0006) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_335
   ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CE, LSR, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40081 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i5416_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40082 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i5415_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i2 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i1 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8484) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_336
   ( input D0, C0, B0, A0, DI0, CE, LSR, CLK, output F0, Q0 );
  wire   VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40083 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9612_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i3 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF1E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_337
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, Q0, 
    F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40053 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40062 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_247 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i5 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0058 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i6 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_338
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, Q0, 
    F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40084 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_281 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40085 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2149_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i1 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i2 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_340
   ( input M1, M0, LSR, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i1 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i0 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_341
   ( input M1, M0, LSR, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i3 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i2 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_342
   ( input M1, M0, LSR, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i5 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i4 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_343
   ( input M1, M0, LSR, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i7 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i6 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_344
   ( input DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40056 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12948\002/BUF1/BUF1 
    ( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done_788 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_345 ( input A0, DI0, LSR, 
    CLK, output F0, Q0 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40022 \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/i9860 ( 
    .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect_i_747 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_346
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, LSR, CLK, output F0, Q0, 
    F1 );
  wire   VCCI, CLK_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40078 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_231_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40078 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_134_I_0_859_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0086 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i_772 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module vmuxregsre0086 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_347
   ( input M0, CLK, output Q0 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly;

  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i_765 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_349
   ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i_766 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i_767 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_351
   ( input C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40055 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_adj_255 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40087 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_273 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_758 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40087 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_352
   ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0 );
  wire   VCCI, CLK_NOTIN, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40088 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9322_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i_771 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40088 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFE10) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_353
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40089 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_271_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40090 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_292 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0027 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i_777 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40089 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40090 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAFAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_354 ( input A0, DI0, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40022 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_I_0_1_lut ( 
    .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0027 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg_749 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_355
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40091 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_258 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40060 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_300 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0058 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_756 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40091 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_357
   ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i_750 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i_751 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_359
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40092 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i25_2_lut_rep_268_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40093 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9202_1_lut_rep_246_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i_787 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40092 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h01FE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40093 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_361
   ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg1_i_789 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg2_i_790 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_363 ( input B1, A1, C0, B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40057 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9199_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \i2c_slave_top/registers/i9319_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \i2c_slave_top/registers/byte_cnt_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF1F1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_365 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40025 \i2c_slave_top/registers/i1_4_lut_adj_307 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40025 \i2c_slave_top/registers/i1_4_lut_adj_313 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/control_i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/control_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_366 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40025 \i2c_slave_top/registers/i1_4_lut_adj_350 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40025 \i2c_slave_top/registers/i1_4_lut_adj_359 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/control_i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/control_i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_367 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40031 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_267 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40025 \i2c_slave_top/registers/i1_4_lut_adj_318 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/control_i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_368 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40095 \i2c_slave_top/registers/i1_4_lut_adj_321 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40095 \i2c_slave_top/registers/i1_4_lut_adj_320 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/control_i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/control_i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40095 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_369 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40095 \i2c_slave_top/registers/i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40095 \i2c_slave_top/registers/i1_4_lut_adj_322 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/control_i11 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/control_i10 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_370 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40095 \i2c_slave_top/registers/i1_4_lut_adj_302 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40095 \i2c_slave_top/registers/i1_4_lut_adj_301 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/control_i13 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/control_i12 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_371 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_263 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40095 \i2c_slave_top/registers/i1_4_lut_adj_303 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/control_i14 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_372 ( input B1, A1, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40021 \i2c_slave_top/registers/i7050_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \i2c_slave_top/registers/i7048_1_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/count_1541__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/count_1541__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_373 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40023 \i2c_slave_top/registers/i7064_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40024 \i2c_slave_top/registers/i7057_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/count_1541__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/count_1541__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_374 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i0 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_375 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i2 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i1 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_376 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i4 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i3 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_377 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i6 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i5 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_378 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i7 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_379 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i9 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i8 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_380 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i11 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i10 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_381 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i13 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i12 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_382 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i15 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/cw_mon_current_limit_i14 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_383 ( input B1, A1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly;

  lut40018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_289 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40096 \i2c_slave_top/registers/i6912_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/data_vld_cnt_161 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F70) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_384 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, CLK_NOTIN, GNDI, DI0_dly, CLK_dly;

  lut40097 \i2c_slave_top/registers/i1_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40098 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_rep_275_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/data_vld_dly_162 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40097 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40098 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h44F4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_385 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i0 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_386 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i2 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i1 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_387 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i4 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i3 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_388 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i6 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i5 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_389 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i7 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_390 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i9 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i8 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_391 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i11 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i10 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_392 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i13 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i12 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_393 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i15 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/dds_mon_current_limit_i14 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_394 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40056 \i2c_slave_top/registers/n12948\003/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0035 \i2c_slave_top/registers/i3478 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_395 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_395/i2c_slave_top/registers/SLICE_395_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_395/i2c_slave_top/registers/i3072/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/SLICE_395_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_395/i2c_slave_top/registers/SLICE_395_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \i2c_slave_top/registers/i3072/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_395/i2c_slave_top/registers/i3072/GATE_H0 ));
  vmuxregsre0058 \i2c_slave_top/registers/addr_i_reg_i0_3479_3480_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_395_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_395/i2c_slave_top/registers/i3072/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_395/i2c_slave_top/registers/SLICE_395_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40099 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_397 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40056 m1_lut( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0035 \i2c_slave_top/registers/i3482 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_398 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_398/i2c_slave_top/registers/SLICE_398_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_398/i2c_slave_top/registers/i3167/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/SLICE_398_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_398/i2c_slave_top/registers/SLICE_398_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \i2c_slave_top/registers/i3167/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_398/i2c_slave_top/registers/i3167/GATE_H0 ));
  vmuxregsre0058 \i2c_slave_top/registers/addr_i_reg_i1_3483_3484_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_398_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_398/i2c_slave_top/registers/i3167/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_398/i2c_slave_top/registers/SLICE_398_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_400 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40056 \i2c_slave_top/registers/n12948\009/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0035 \i2c_slave_top/registers/i3486 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_401 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_401/i2c_slave_top/registers/SLICE_401_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_401/i2c_slave_top/registers/i3171/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/SLICE_401_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_401/i2c_slave_top/registers/SLICE_401_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \i2c_slave_top/registers/i3171/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_401/i2c_slave_top/registers/i3171/GATE_H0 ));
  vmuxregsre0058 \i2c_slave_top/registers/addr_i_reg_i2_3487_3488_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_401_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_401/i2c_slave_top/registers/i3171/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_401/i2c_slave_top/registers/SLICE_401_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_403 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40056 \i2c_slave_top/registers/n12948\008/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0035 \i2c_slave_top/registers/i3490 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_404 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_404/i2c_slave_top/registers/SLICE_404_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_404/i2c_slave_top/registers/i3175/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/SLICE_404_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_404/i2c_slave_top/registers/SLICE_404_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \i2c_slave_top/registers/i3175/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_404/i2c_slave_top/registers/i3175/GATE_H0 ));
  vmuxregsre0058 \i2c_slave_top/registers/addr_i_reg_i3_3491_3492_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_404_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_404/i2c_slave_top/registers/i3175/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_404/i2c_slave_top/registers/SLICE_404_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_406 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40056 \i2c_slave_top/registers/n12948\007/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0035 \i2c_slave_top/registers/i3494 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_407 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_407/i2c_slave_top/registers/SLICE_407_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_407/i2c_slave_top/registers/i3179/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/SLICE_407_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_407/i2c_slave_top/registers/SLICE_407_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \i2c_slave_top/registers/i3179/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_407/i2c_slave_top/registers/i3179/GATE_H0 ));
  vmuxregsre0058 \i2c_slave_top/registers/addr_i_reg_i4_3495_3496_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_407_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_407/i2c_slave_top/registers/i3179/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_407/i2c_slave_top/registers/SLICE_407_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_409 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40056 \i2c_slave_top/registers/n12948\006/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0035 \i2c_slave_top/registers/i3498 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_410 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_410/i2c_slave_top/registers/SLICE_410_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_410/i2c_slave_top/registers/i3183/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/SLICE_410_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_410/i2c_slave_top/registers/SLICE_410_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \i2c_slave_top/registers/i3183/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_410/i2c_slave_top/registers/i3183/GATE_H0 ));
  vmuxregsre0058 \i2c_slave_top/registers/addr_i_reg_i5_3499_3500_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_410_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_410/i2c_slave_top/registers/i3183/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_410/i2c_slave_top/registers/SLICE_410_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_412 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40056 \i2c_slave_top/registers/n12948\005/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0035 \i2c_slave_top/registers/i3502 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_413 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_413/i2c_slave_top/registers/SLICE_413_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_413/i2c_slave_top/registers/i3187/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/SLICE_413_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_413/i2c_slave_top/registers/SLICE_413_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \i2c_slave_top/registers/i3187/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_413/i2c_slave_top/registers/i3187/GATE_H0 ));
  vmuxregsre0058 \i2c_slave_top/registers/addr_i_reg_i6_3503_3504_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_413_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_413/i2c_slave_top/registers/i3187/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_413/i2c_slave_top/registers/SLICE_413_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_415 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40056 \i2c_slave_top/registers/n12948\004/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0035 \i2c_slave_top/registers/i3506 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_416 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_416/i2c_slave_top/registers/SLICE_416_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_416/i2c_slave_top/registers/i3191/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/SLICE_416_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_416/i2c_slave_top/registers/SLICE_416_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \i2c_slave_top/registers/i3191/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_416/i2c_slave_top/registers/i3191/GATE_H0 ));
  vmuxregsre0058 \i2c_slave_top/registers/addr_i_reg_i7_3507_3508_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_416_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_416/i2c_slave_top/registers/i3191/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_416/i2c_slave_top/registers/SLICE_416_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_418 ( input C0, B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40100 \i2c_slave_top/registers/i5309_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \i2c_slave_top/registers/state_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40100 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3232) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_419 ( input C0, B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40101 \i2c_slave_top/registers/i9506_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \i2c_slave_top/registers/state_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40101 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_420 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/static_control_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/static_control_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_421 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/static_control_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/static_control_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_422 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/static_control_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/static_control_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_423 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/static_control_i10 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/static_control_i9 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_424 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/static_control_i12 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/static_control_i11 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_425 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/static_control_i14 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/static_control_i13 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_426 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \i2c_slave_top/registers/static_control_i16 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/static_control_i15 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_428 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40102 \i2c_slave_top/registers/i9181_2_lut_rep_260_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40095 \i2c_slave_top/registers/i1_4_lut_adj_304 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0016 \i2c_slave_top/registers/control_i15 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40102 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module reset_generator_SLICE_429 ( input A0, DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40022 \reset_generator/clk_d2_I_0_1_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \reset_generator/clk_d2_19 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module reset_generator_SLICE_430 ( input M1, M0, LSR, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, LSR_NOTIN, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0030 \reset_generator/in_d2_21 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0030 \reset_generator/in_d1_20 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_433 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40103 i9317_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0016 \adc_control/adc_convert_131 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40103 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAA3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_434 ( input D0, C0, B0, A0, DI0, LSR, CLK, 
    output F0, Q0 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40104 \dds_control_interface/i1_4_lut_adj_128 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0035 \dds_control_interface/mosi_I_0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40104 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5044) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_435 ( input M0, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  vmuxregsre0016 \dds_control_interface/sck_280 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_436 ( input M0, CLK, output Q0 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly;

  vmuxregsre0027 \dds_control_interface/ss0_277 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
  endspecify

endmodule

module dds_gain_control_SLICE_437 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40062 \dds_gain_control/i1_4_lut_adj_217 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40078 \dds_gain_control/i1_4_lut_adj_214 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0016 \dds_gain_control/sck_temp_126 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_438 ( input C0, B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40055 \dds_gain_control/i1_2_lut_3_lut_adj_231 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \dds_gain_control/mosi_temp_132 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_440 ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40047 \dds_gain_control/i1_2_lut_rep_243 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40105 \dds_gain_control/i1_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0027 \dds_gain_control/ldac_temp_135 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40105 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2E0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_441 ( input B1, A1, D0, C0, B0, A0, DI0, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40047 \adc_control/state_3__I_0_159_i6_2_lut_rep_293 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40106 \adc_control/i3457_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0016 \adc_control/state_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40106 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h999B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_442 ( input C0, B0, A0, DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40107 \adc_control/mux_895_Mux_1_i3_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/state_i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7C7C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_443 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0016 \adc_control/state_i3 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \adc_control/state_i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_446 ( input D1, C1, B1, A1, C0, B0, A0, 
    M1, FXB, FXA, output OFX0, F1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_446/i2c_slave_top/registers/i9219/GATE_H0 ;

  lut40093 \i2c_slave_top/registers/i5520_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40066 \i2c_slave_top/registers/i9219/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_446/i2c_slave_top/registers/i9219/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux20108 \i2c_slave_top/registers/SLICE_446_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_446/i2c_slave_top/registers/i9219/GATE_H0 )
    , .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_446_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module selmux20108 ( input D0, output Z );

  BUFBA INST1( .A(D0), .Z(Z));
endmodule

module i2c_slave_top_registers_i9313_SLICE_447 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9313/SLICE_447/i2c_slave_top/registers/i9313/SLICE_447_K1_H1 
         , 
         \i2c_slave_top/registers/i9313/SLICE_447/i2c_slave_top/registers/i9313/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9313/SLICE_447_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9313/SLICE_447/i2c_slave_top/registers/i9313/SLICE_447_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9313/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9313/SLICE_447/i2c_slave_top/registers/i9313/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9313/SLICE_447_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9313/SLICE_447/i2c_slave_top/registers/i9313/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9313/SLICE_447/i2c_slave_top/registers/i9313/SLICE_447_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40109 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_i9316_SLICE_448 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9316/SLICE_448/i2c_slave_top/registers/i9316/SLICE_448_K1_H1 
         , 
         \i2c_slave_top/registers/i9316/SLICE_448/i2c_slave_top/registers/i9316/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9316/SLICE_448_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9316/SLICE_448/i2c_slave_top/registers/i9316/SLICE_448_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9316/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9316/SLICE_448/i2c_slave_top/registers/i9316/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9316/SLICE_448_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9316/SLICE_448/i2c_slave_top/registers/i9316/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9316/SLICE_448/i2c_slave_top/registers/i9316/SLICE_448_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9292_SLICE_449 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9292/SLICE_449/i2c_slave_top/registers/i9292/SLICE_449_K1_H1 
         , 
         \i2c_slave_top/registers/i9292/SLICE_449/i2c_slave_top/registers/i9292/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9292/SLICE_449_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9292/SLICE_449/i2c_slave_top/registers/i9292/SLICE_449_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9292/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9292/SLICE_449/i2c_slave_top/registers/i9292/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9292/SLICE_449_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9292/SLICE_449/i2c_slave_top/registers/i9292/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9292/SLICE_449/i2c_slave_top/registers/i9292/SLICE_449_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9295_SLICE_450 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9295/SLICE_450/i2c_slave_top/registers/i9295/SLICE_450_K1_H1 
         , 
         \i2c_slave_top/registers/i9295/SLICE_450/i2c_slave_top/registers/i9295/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9295/SLICE_450_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9295/SLICE_450/i2c_slave_top/registers/i9295/SLICE_450_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9295/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9295/SLICE_450/i2c_slave_top/registers/i9295/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9295/SLICE_450_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9295/SLICE_450/i2c_slave_top/registers/i9295/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9295/SLICE_450/i2c_slave_top/registers/i9295/SLICE_450_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9298_SLICE_451 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9298/SLICE_451/i2c_slave_top/registers/i9298/SLICE_451_K1_H1 
         , 
         \i2c_slave_top/registers/i9298/SLICE_451/i2c_slave_top/registers/i9298/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9298/SLICE_451_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9298/SLICE_451/i2c_slave_top/registers/i9298/SLICE_451_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9298/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9298/SLICE_451/i2c_slave_top/registers/i9298/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9298/SLICE_451_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9298/SLICE_451/i2c_slave_top/registers/i9298/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9298/SLICE_451/i2c_slave_top/registers/i9298/SLICE_451_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9301_SLICE_452 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9301/SLICE_452/i2c_slave_top/registers/i9301/SLICE_452_K1_H1 
         , 
         \i2c_slave_top/registers/i9301/SLICE_452/i2c_slave_top/registers/i9301/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9301/SLICE_452_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9301/SLICE_452/i2c_slave_top/registers/i9301/SLICE_452_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9301/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9301/SLICE_452/i2c_slave_top/registers/i9301/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9301/SLICE_452_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9301/SLICE_452/i2c_slave_top/registers/i9301/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9301/SLICE_452/i2c_slave_top/registers/i9301/SLICE_452_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9304_SLICE_453 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9304/SLICE_453/i2c_slave_top/registers/i9304/SLICE_453_K1_H1 
         , 
         \i2c_slave_top/registers/i9304/SLICE_453/i2c_slave_top/registers/i9304/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9304/SLICE_453_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9304/SLICE_453/i2c_slave_top/registers/i9304/SLICE_453_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9304/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9304/SLICE_453/i2c_slave_top/registers/i9304/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9304/SLICE_453_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9304/SLICE_453/i2c_slave_top/registers/i9304/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9304/SLICE_453/i2c_slave_top/registers/i9304/SLICE_453_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9307_SLICE_454 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9307/SLICE_454/i2c_slave_top/registers/i9307/SLICE_454_K1_H1 
         , 
         \i2c_slave_top/registers/i9307/SLICE_454/i2c_slave_top/registers/i9307/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9307/SLICE_454_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9307/SLICE_454/i2c_slave_top/registers/i9307/SLICE_454_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9307/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9307/SLICE_454/i2c_slave_top/registers/i9307/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9307/SLICE_454_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9307/SLICE_454/i2c_slave_top/registers/i9307/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9307/SLICE_454/i2c_slave_top/registers/i9307/SLICE_454_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9218_SLICE_455 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, M0, output OFX0 );
  wire   
         \i2c_slave_top/registers/i9218/SLICE_455/i2c_slave_top/registers/i9218/SLICE_455_K1_H1 
         , 
         \i2c_slave_top/registers/i9218/SLICE_455/i2c_slave_top/registers/i9218/GATE_H0 
         ;

  lut40110 \i2c_slave_top/registers/i9218/SLICE_455_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), 
    .Z(\i2c_slave_top/registers/i9218/SLICE_455/i2c_slave_top/registers/i9218/SLICE_455_K1_H1 )
    );
  lut40111 \i2c_slave_top/registers/i9218/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/i9218/SLICE_455/i2c_slave_top/registers/i9218/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9218/SLICE_455_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9218/SLICE_455/i2c_slave_top/registers/i9218/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9218/SLICE_455/i2c_slave_top/registers/i9218/SLICE_455_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40110 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40111 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1F10) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_i9238_SLICE_456 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9238/SLICE_456/i2c_slave_top/registers/i9238/SLICE_456_K1_H1 
         , 
         \i2c_slave_top/registers/i9238/SLICE_456/i2c_slave_top/registers/i9238/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9238/SLICE_456_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9238/SLICE_456/i2c_slave_top/registers/i9238/SLICE_456_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9238/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9238/SLICE_456/i2c_slave_top/registers/i9238/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9238/SLICE_456_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9238/SLICE_456/i2c_slave_top/registers/i9238/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9238/SLICE_456/i2c_slave_top/registers/i9238/SLICE_456_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9241_SLICE_457 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9241/SLICE_457/i2c_slave_top/registers/i9241/SLICE_457_K1_H1 
         , 
         \i2c_slave_top/registers/i9241/SLICE_457/i2c_slave_top/registers/i9241/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9241/SLICE_457_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9241/SLICE_457/i2c_slave_top/registers/i9241/SLICE_457_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9241/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9241/SLICE_457/i2c_slave_top/registers/i9241/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9241/SLICE_457_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9241/SLICE_457/i2c_slave_top/registers/i9241/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9241/SLICE_457/i2c_slave_top/registers/i9241/SLICE_457_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9244_SLICE_458 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9244/SLICE_458/i2c_slave_top/registers/i9244/SLICE_458_K1_H1 
         , 
         \i2c_slave_top/registers/i9244/SLICE_458/i2c_slave_top/registers/i9244/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9244/SLICE_458_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9244/SLICE_458/i2c_slave_top/registers/i9244/SLICE_458_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9244/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9244/SLICE_458/i2c_slave_top/registers/i9244/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9244/SLICE_458_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9244/SLICE_458/i2c_slave_top/registers/i9244/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9244/SLICE_458/i2c_slave_top/registers/i9244/SLICE_458_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9223_SLICE_459 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9223/SLICE_459/i2c_slave_top/registers/i9223/SLICE_459_K1_H1 
         , 
         \i2c_slave_top/registers/i9223/SLICE_459/i2c_slave_top/registers/i9223/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9223/SLICE_459_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9223/SLICE_459/i2c_slave_top/registers/i9223/SLICE_459_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9223/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9223/SLICE_459/i2c_slave_top/registers/i9223/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9223/SLICE_459_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9223/SLICE_459/i2c_slave_top/registers/i9223/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9223/SLICE_459/i2c_slave_top/registers/i9223/SLICE_459_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9642_SLICE_460 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9642/SLICE_460/i2c_slave_top/registers/i9642/SLICE_460_K1_H1 
         , 
         \i2c_slave_top/registers/i9642/SLICE_460/i2c_slave_top/registers/i9642/GATE_H0 
         ;

  lut40112 \i2c_slave_top/registers/i9642/SLICE_460_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9642/SLICE_460/i2c_slave_top/registers/i9642/SLICE_460_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40113 \i2c_slave_top/registers/i9642/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9642/SLICE_460/i2c_slave_top/registers/i9642/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9642/SLICE_460_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9642/SLICE_460/i2c_slave_top/registers/i9642/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9642/SLICE_460/i2c_slave_top/registers/i9642/SLICE_460_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40112 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40113 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE2E2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_i9226_SLICE_461 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9226/SLICE_461/i2c_slave_top/registers/i9226/SLICE_461_K1_H1 
         , 
         \i2c_slave_top/registers/i9226/SLICE_461/i2c_slave_top/registers/i9226/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9226/SLICE_461_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9226/SLICE_461/i2c_slave_top/registers/i9226/SLICE_461_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9226/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9226/SLICE_461/i2c_slave_top/registers/i9226/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9226/SLICE_461_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9226/SLICE_461/i2c_slave_top/registers/i9226/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9226/SLICE_461/i2c_slave_top/registers/i9226/SLICE_461_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9639_SLICE_462 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9639/SLICE_462/i2c_slave_top/registers/i9639/SLICE_462_K1_H1 
         , 
         \i2c_slave_top/registers/i9639/SLICE_462/i2c_slave_top/registers/i9639/GATE_H0 
         ;

  lut40112 \i2c_slave_top/registers/i9639/SLICE_462_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9639/SLICE_462/i2c_slave_top/registers/i9639/SLICE_462_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40113 \i2c_slave_top/registers/i9639/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9639/SLICE_462/i2c_slave_top/registers/i9639/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9639/SLICE_462_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9639/SLICE_462/i2c_slave_top/registers/i9639/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9639/SLICE_462/i2c_slave_top/registers/i9639/SLICE_462_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9636_SLICE_463 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9636/SLICE_463/i2c_slave_top/registers/i9636/SLICE_463_K1_H1 
         , 
         \i2c_slave_top/registers/i9636/SLICE_463/i2c_slave_top/registers/i9636/GATE_H0 
         ;

  lut40112 \i2c_slave_top/registers/i9636/SLICE_463_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9636/SLICE_463/i2c_slave_top/registers/i9636/SLICE_463_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40113 \i2c_slave_top/registers/i9636/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9636/SLICE_463/i2c_slave_top/registers/i9636/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9636/SLICE_463_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9636/SLICE_463/i2c_slave_top/registers/i9636/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9636/SLICE_463/i2c_slave_top/registers/i9636/SLICE_463_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9229_SLICE_464 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9229/SLICE_464/i2c_slave_top/registers/i9229/SLICE_464_K1_H1 
         , 
         \i2c_slave_top/registers/i9229/SLICE_464/i2c_slave_top/registers/i9229/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9229/SLICE_464_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9229/SLICE_464/i2c_slave_top/registers/i9229/SLICE_464_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9229/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9229/SLICE_464/i2c_slave_top/registers/i9229/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9229/SLICE_464_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9229/SLICE_464/i2c_slave_top/registers/i9229/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9229/SLICE_464/i2c_slave_top/registers/i9229/SLICE_464_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9232_SLICE_465 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9232/SLICE_465/i2c_slave_top/registers/i9232/SLICE_465_K1_H1 
         , 
         \i2c_slave_top/registers/i9232/SLICE_465/i2c_slave_top/registers/i9232/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9232/SLICE_465_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9232/SLICE_465/i2c_slave_top/registers/i9232/SLICE_465_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9232/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9232/SLICE_465/i2c_slave_top/registers/i9232/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9232/SLICE_465_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9232/SLICE_465/i2c_slave_top/registers/i9232/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9232/SLICE_465/i2c_slave_top/registers/i9232/SLICE_465_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9235_SLICE_466 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9235/SLICE_466/i2c_slave_top/registers/i9235/SLICE_466_K1_H1 
         , 
         \i2c_slave_top/registers/i9235/SLICE_466/i2c_slave_top/registers/i9235/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9235/SLICE_466_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9235/SLICE_466/i2c_slave_top/registers/i9235/SLICE_466_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9235/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9235/SLICE_466/i2c_slave_top/registers/i9235/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9235/SLICE_466_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9235/SLICE_466/i2c_slave_top/registers/i9235/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9235/SLICE_466/i2c_slave_top/registers/i9235/SLICE_466_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9247_SLICE_467 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9247/SLICE_467/i2c_slave_top/registers/i9247/SLICE_467_K1_H1 
         , 
         \i2c_slave_top/registers/i9247/SLICE_467/i2c_slave_top/registers/i9247/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9247/SLICE_467_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9247/SLICE_467/i2c_slave_top/registers/i9247/SLICE_467_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9247/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9247/SLICE_467/i2c_slave_top/registers/i9247/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9247/SLICE_467_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9247/SLICE_467/i2c_slave_top/registers/i9247/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9247/SLICE_467/i2c_slave_top/registers/i9247/SLICE_467_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i9247/SLICE_467_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9217_SLICE_468 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9217/SLICE_468/i2c_slave_top/registers/i9217/SLICE_468_K1_H1 
         , 
         \i2c_slave_top/registers/i9217/SLICE_468/i2c_slave_top/registers/i9217/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9217/SLICE_468_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9217/SLICE_468/i2c_slave_top/registers/i9217/SLICE_468_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9217/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9217/SLICE_468/i2c_slave_top/registers/i9217/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9217/SLICE_468_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9217/SLICE_468/i2c_slave_top/registers/i9217/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9217/SLICE_468/i2c_slave_top/registers/i9217/SLICE_468_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9250_SLICE_469 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9250/SLICE_469/i2c_slave_top/registers/i9250/SLICE_469_K1_H1 
         , 
         \i2c_slave_top/registers/i9250/SLICE_469/i2c_slave_top/registers/i9250/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9250/SLICE_469_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9250/SLICE_469/i2c_slave_top/registers/i9250/SLICE_469_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9250/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9250/SLICE_469/i2c_slave_top/registers/i9250/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9250/SLICE_469_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9250/SLICE_469/i2c_slave_top/registers/i9250/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9250/SLICE_469/i2c_slave_top/registers/i9250/SLICE_469_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9253_SLICE_470 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9253/SLICE_470/i2c_slave_top/registers/i9253/SLICE_470_K1_H1 
         , 
         \i2c_slave_top/registers/i9253/SLICE_470/i2c_slave_top/registers/i9253/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9253/SLICE_470_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9253/SLICE_470/i2c_slave_top/registers/i9253/SLICE_470_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9253/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9253/SLICE_470/i2c_slave_top/registers/i9253/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9253/SLICE_470_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9253/SLICE_470/i2c_slave_top/registers/i9253/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9253/SLICE_470/i2c_slave_top/registers/i9253/SLICE_470_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9310_SLICE_471 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9310/SLICE_471/i2c_slave_top/registers/i9310/SLICE_471_K1_H1 
         , 
         \i2c_slave_top/registers/i9310/SLICE_471/i2c_slave_top/registers/i9310/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9310/SLICE_471_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9310/SLICE_471/i2c_slave_top/registers/i9310/SLICE_471_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9310/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9310/SLICE_471/i2c_slave_top/registers/i9310/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9310/SLICE_471_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9310/SLICE_471/i2c_slave_top/registers/i9310/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9310/SLICE_471/i2c_slave_top/registers/i9310/SLICE_471_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9259_SLICE_472 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9259/SLICE_472/i2c_slave_top/registers/i9259/SLICE_472_K1_H1 
         , 
         \i2c_slave_top/registers/i9259/SLICE_472/i2c_slave_top/registers/i9259/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9259/SLICE_472_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9259/SLICE_472/i2c_slave_top/registers/i9259/SLICE_472_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9259/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9259/SLICE_472/i2c_slave_top/registers/i9259/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9259/SLICE_472_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9259/SLICE_472/i2c_slave_top/registers/i9259/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9259/SLICE_472/i2c_slave_top/registers/i9259/SLICE_472_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i9259/SLICE_472_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9262_SLICE_473 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9262/SLICE_473/i2c_slave_top/registers/i9262/SLICE_473_K1_H1 
         , 
         \i2c_slave_top/registers/i9262/SLICE_473/i2c_slave_top/registers/i9262/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9262/SLICE_473_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9262/SLICE_473/i2c_slave_top/registers/i9262/SLICE_473_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9262/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9262/SLICE_473/i2c_slave_top/registers/i9262/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9262/SLICE_473_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9262/SLICE_473/i2c_slave_top/registers/i9262/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9262/SLICE_473/i2c_slave_top/registers/i9262/SLICE_473_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i9262/SLICE_473_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9265_SLICE_474 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9265/SLICE_474/i2c_slave_top/registers/i9265/SLICE_474_K1_H1 
         , 
         \i2c_slave_top/registers/i9265/SLICE_474/i2c_slave_top/registers/i9265/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9265/SLICE_474_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9265/SLICE_474/i2c_slave_top/registers/i9265/SLICE_474_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9265/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9265/SLICE_474/i2c_slave_top/registers/i9265/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9265/SLICE_474_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9265/SLICE_474/i2c_slave_top/registers/i9265/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9265/SLICE_474/i2c_slave_top/registers/i9265/SLICE_474_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9268_SLICE_475 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9268/SLICE_475/i2c_slave_top/registers/i9268/SLICE_475_K1_H1 
         , 
         \i2c_slave_top/registers/i9268/SLICE_475/i2c_slave_top/registers/i9268/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9268/SLICE_475_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9268/SLICE_475/i2c_slave_top/registers/i9268/SLICE_475_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9268/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9268/SLICE_475/i2c_slave_top/registers/i9268/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9268/SLICE_475_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9268/SLICE_475/i2c_slave_top/registers/i9268/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9268/SLICE_475/i2c_slave_top/registers/i9268/SLICE_475_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i9268/SLICE_475_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9271_SLICE_476 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9271/SLICE_476/i2c_slave_top/registers/i9271/SLICE_476_K1_H1 
         , 
         \i2c_slave_top/registers/i9271/SLICE_476/i2c_slave_top/registers/i9271/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9271/SLICE_476_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9271/SLICE_476/i2c_slave_top/registers/i9271/SLICE_476_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9271/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9271/SLICE_476/i2c_slave_top/registers/i9271/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9271/SLICE_476_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9271/SLICE_476/i2c_slave_top/registers/i9271/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9271/SLICE_476/i2c_slave_top/registers/i9271/SLICE_476_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i9271/SLICE_476_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9274_SLICE_477 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9274/SLICE_477/i2c_slave_top/registers/i9274/SLICE_477_K1_H1 
         , 
         \i2c_slave_top/registers/i9274/SLICE_477/i2c_slave_top/registers/i9274/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9274/SLICE_477_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9274/SLICE_477/i2c_slave_top/registers/i9274/SLICE_477_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9274/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9274/SLICE_477/i2c_slave_top/registers/i9274/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9274/SLICE_477_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9274/SLICE_477/i2c_slave_top/registers/i9274/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9274/SLICE_477/i2c_slave_top/registers/i9274/SLICE_477_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i9274/SLICE_477_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9277_SLICE_478 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9277/SLICE_478/i2c_slave_top/registers/i9277/SLICE_478_K1_H1 
         , 
         \i2c_slave_top/registers/i9277/SLICE_478/i2c_slave_top/registers/i9277/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9277/SLICE_478_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9277/SLICE_478/i2c_slave_top/registers/i9277/SLICE_478_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9277/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9277/SLICE_478/i2c_slave_top/registers/i9277/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9277/SLICE_478_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9277/SLICE_478/i2c_slave_top/registers/i9277/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9277/SLICE_478/i2c_slave_top/registers/i9277/SLICE_478_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i9277/SLICE_478_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i9280_SLICE_479 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i9280/SLICE_479/i2c_slave_top/registers/i9280/SLICE_479_K1_H1 
         , 
         \i2c_slave_top/registers/i9280/SLICE_479/i2c_slave_top/registers/i9280/GATE_H0 
         ;

  lut40109 \i2c_slave_top/registers/i9280/SLICE_479_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9280/SLICE_479/i2c_slave_top/registers/i9280/SLICE_479_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i9280/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i9280/SLICE_479/i2c_slave_top/registers/i9280/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i9280/SLICE_479_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i9280/SLICE_479/i2c_slave_top/registers/i9280/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i9280/SLICE_479/i2c_slave_top/registers/i9280/SLICE_479_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i9280/SLICE_479_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module 
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i9677_SLICE_480
   ( input C1, B1, A1, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/GATE_H0 
         ;

  lut40114 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40115 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/GATE 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/GATE_H0 )
    );
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9677/SLICE_480_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40114 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD8D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40115 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module 
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i9675_SLICE_481
   ( input C1, B1, A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/GATE_H0 
         ;

  lut40109 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/GATE_H0 )
    );
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9675/SLICE_481_FXMUX 
    ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_i9687_SLICE_482 ( input D1, C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   
         \dds_gain_control/i9687/SLICE_482/dds_gain_control/i9687/SLICE_482_K1_H1 
         , GNDI, 
         \dds_gain_control/i9687/SLICE_482/dds_gain_control/i9687/GATE_H0 ;

  lut40116 \dds_gain_control/i9687/SLICE_482_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\dds_gain_control/i9687/SLICE_482/dds_gain_control/i9687/SLICE_482_K1_H1 ));
  lut40117 \dds_gain_control/i9687/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\dds_gain_control/i9687/SLICE_482/dds_gain_control/i9687/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \dds_gain_control/i9687/SLICE_482_K0K1MUX ( 
    .D0(\dds_gain_control/i9687/SLICE_482/dds_gain_control/i9687/GATE_H0 ), 
    .D1(\dds_gain_control/i9687/SLICE_482/dds_gain_control/i9687/SLICE_482_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40116 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4440) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40117 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0404) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_i9685_SLICE_483 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \dds_gain_control/i9685/SLICE_483/dds_gain_control/i9685/SLICE_483_K1_H1 
         , \dds_gain_control/i9685/SLICE_483/dds_gain_control/i9685/GATE_H0 ;

  lut40116 \dds_gain_control/i9685/SLICE_483_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\dds_gain_control/i9685/SLICE_483/dds_gain_control/i9685/SLICE_483_K1_H1 ));
  lut40118 \dds_gain_control/i9685/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\dds_gain_control/i9685/SLICE_483/dds_gain_control/i9685/GATE_H0 ));
  selmux2 \dds_gain_control/i9685/SLICE_483_K0K1MUX ( 
    .D0(\dds_gain_control/i9685/SLICE_483/dds_gain_control/i9685/GATE_H0 ), 
    .D1(\dds_gain_control/i9685/SLICE_483/dds_gain_control/i9685/SLICE_483_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40118 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_i9683_SLICE_484 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \dds_gain_control/i9683/SLICE_484/dds_gain_control/i9683/SLICE_484_K1_H1 
         , \dds_gain_control/i9683/SLICE_484/dds_gain_control/i9683/GATE_H0 ;

  lut40119 \dds_gain_control/i9683/SLICE_484_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\dds_gain_control/i9683/SLICE_484/dds_gain_control/i9683/SLICE_484_K1_H1 ));
  lut40120 \dds_gain_control/i9683/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\dds_gain_control/i9683/SLICE_484/dds_gain_control/i9683/GATE_H0 ));
  selmux2 \dds_gain_control/i9683/SLICE_484_K0K1MUX ( 
    .D0(\dds_gain_control/i9683/SLICE_484/dds_gain_control/i9683/GATE_H0 ), 
    .D1(\dds_gain_control/i9683/SLICE_484/dds_gain_control/i9683/SLICE_484_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40119 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAA2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40120 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_i9689_SLICE_485 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    output OFX0 );
  wire   \adc_control/i9689/SLICE_485/adc_control/i9689/SLICE_485_K1_H1 , 
         \adc_control/i9689/SLICE_485/adc_control/i9689/GATE_H0 ;

  lut40110 \adc_control/i9689/SLICE_485_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\adc_control/i9689/SLICE_485/adc_control/i9689/SLICE_485_K1_H1 ));
  lut40121 \adc_control/i9689/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\adc_control/i9689/SLICE_485/adc_control/i9689/GATE_H0 ));
  selmux2 \adc_control/i9689/SLICE_485_K0K1MUX ( 
    .D0(\adc_control/i9689/SLICE_485/adc_control/i9689/GATE_H0 ), 
    .D1(\adc_control/i9689/SLICE_485/adc_control/i9689/SLICE_485_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40121 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0302) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_486 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40040 \i2c_slave_top/registers/i3955_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40122 \i2c_slave_top/registers/i1_4_lut_adj_314 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40122 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h333B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_487
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, LSR_dly;

  lut40123 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_293 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40124 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i29_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_770 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40123 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40124 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCAFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_488
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40062 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40125 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i160_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40125 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_489
   ( input C1, B1, A1, D0, C0, B0, A0, M0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40126 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9591_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40127 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_248 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/d_ff_753 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40126 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3B3B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40127 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_490
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40091 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9459_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40128 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9548_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40128 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_491 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40129 \dds_gain_control/i1_3_lut_4_lut_adj_243 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40130 \dds_gain_control/i1_4_lut_4_lut_adj_225 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40129 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40130 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0098) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_492 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40131 \i2c_slave_top/registers/i1_2_lut_rep_230_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40132 \i2c_slave_top/registers/i9597_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40131 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40132 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2223) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_493 ( input C1, B1, A1, D0, C0, B0, A0, 
    M0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40066 \i2c_slave_top/registers/i3489_rep_60_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40133 \i2c_slave_top/registers/i1_4_lut_adj_305 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \i2c_slave_top/registers/addr_i_reg_i2_3487_3488_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40133 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_494 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40052 \i2c_slave_top/registers/i5432_2_lut_rep_234_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40097 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_306 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_495 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/i3501_3_lut_rep_313 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \i2c_slave_top/registers/mux_954_i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_496 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40131 \i2c_slave_top/registers/i1_2_lut_rep_236_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \i2c_slave_top/registers/i1_4_lut_adj_309 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_497 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/i3481_3_lut_rep_323 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \i2c_slave_top/registers/i1_4_lut_adj_310 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_498 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40134 \i2c_slave_top/registers/i9610_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40135 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_311 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40134 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40135 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_499 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40097 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_346 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40136 \i2c_slave_top/registers/i1_4_lut_adj_312 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40136 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_500 ( input C1, B1, A1, C0, B0, A0, M0, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40066 \i2c_slave_top/registers/i3485_rep_57_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \i2c_slave_top/registers/mux_949_i8_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \i2c_slave_top/registers/addr_i_reg_i1_3483_3484_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_501 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly;

  lut40137 \i2c_slave_top/registers/i1_2_lut_rep_226_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40136 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/o_tx_status_780 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
  endspecify

endmodule

module lut40137 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_502 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, LSR_dly;

  lut40138 \i2c_slave_top/registers/i29_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40095 \i2c_slave_top/registers/i1_4_lut_adj_315 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \i2c_slave_top/registers/addr_i_reg_i4_3495_3496_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40138 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h35CA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_503 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40093 \i2c_slave_top/registers/i9503_2_lut_rep_242_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40139 \i2c_slave_top/registers/i1_4_lut_adj_317 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40139 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA2A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_504 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/i3497_3_lut_rep_321 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40140 \i2c_slave_top/registers/i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40140 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1414) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_505 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40095 \i2c_slave_top/registers/i1_4_lut_adj_351 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40141 \i2c_slave_top/registers/i1_3_lut_adj_319 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40141 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_506 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40133 \i2c_slave_top/registers/i9519_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40066 \i2c_slave_top/registers/i3493_3_lut_rep_310 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_507 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40062 \i2c_slave_top/registers/i1_3_lut_rep_244_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40102 \i2c_slave_top/registers/i1_2_lut_rep_284_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_508 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, LSR_dly;

  lut40062 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_343 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40102 \i2c_slave_top/registers/i1_2_lut_rep_272_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \i2c_slave_top/registers/addr_i_reg_i3_3491_3492_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_509 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut4 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_352 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40102 \i2c_slave_top/registers/i9170_2_lut_rep_265_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_510 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40020 \i2c_slave_top/registers/i1_2_lut_rep_320 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40142 \i2c_slave_top/registers/i1_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40142 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_511 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, LSR_dly;

  lut40074 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_358 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40102 \i2c_slave_top/registers/i5316_2_lut_rep_270_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \i2c_slave_top/registers/addr_i_reg_i6_3503_3504_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_512 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_271 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_325 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_513 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40143 \i2c_slave_top/registers/i1_4_lut_adj_337 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \i2c_slave_top/registers/i9178_2_lut_rep_273_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40143 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFDFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_514 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_274 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_326 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_515 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40144 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_345 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40145 \i2c_slave_top/registers/i9521_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40144 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40145 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_516 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40031 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_266 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_327 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_517 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_270 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_328 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_518 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40031 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_269 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_329 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_519 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_275 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_330 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_520 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40071 \i2c_slave_top/registers/i1_4_lut_adj_340 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40127 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_332 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_521 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40031 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_278 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_333 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_522 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, LSR, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_dly, CLK_dly, LSR_dly;

  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_264 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_334 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \i2c_slave_top/registers/byte_cnt_i1 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_523 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40127 \i2c_slave_top/registers/i9500_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40143 \i2c_slave_top/registers/i1_4_lut_adj_335 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_524 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40146 \i2c_slave_top/registers/i3644_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40028 \i2c_slave_top/registers/i1_3_lut_adj_349 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40146 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_525 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40062 \i2c_slave_top/registers/i1_4_lut_adj_357 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40062 \i2c_slave_top/registers/i1_4_lut_adj_353 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_526
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40145 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_259 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40133 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10356_bdd_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_527
   ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40147 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_rep_238_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40046 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40147 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6060) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_528
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40062 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_289 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40057 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_291 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_529
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40062 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_269_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40148 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i_bdd_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40148 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_530
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40149 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_287 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40133 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40149 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_531 ( input D1, C1, B1, A1, 
    D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40134 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40150 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9485_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_16 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40150 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1333) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_532
   ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40151 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i5407_4_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40066 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2008_3_lut_rep_294 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40151 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5054) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_533
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40152 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2007_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40102 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9183_2_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40152 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_534
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40153 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_I_28_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40153 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCCA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_535
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40154 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_285 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1337_2_lut_rep_296 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40154 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0D00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_536
   ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40155 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i5408_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40059 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1356_3_lut_rep_262_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40155 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF09) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_537
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40156 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i3476_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40157 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9534_2_lut_rep_232_4_lut_4_lut_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40156 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC5C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40157 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_538
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40158 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_276 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_303 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40158 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_539
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40031 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_304 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_540
   ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40159 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_277 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40055 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_adj_254 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40159 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_541
   ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_318 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40160 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40160 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_542
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40161 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_297 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_305 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40161 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_543
   ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_52_i6_2_lut_rep_317 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40162 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_233_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40162 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_544
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40163 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_283 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40057 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_312 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40163 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_545
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40164 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_2_lut_rep_281_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40165 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9579_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40164 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40165 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0103) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_546
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40166 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_280_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40165 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9576_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40166 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_547
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40143 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_239_3_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40165 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9573_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_548
   ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40077 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_290 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40069 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_rep_258 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_549
   ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40167 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i3329_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40052 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9186_2_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40167 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0CA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_550
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40168 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_278_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40169 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9570_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40168 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFDF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40169 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1030) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_551
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40169 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9561_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40164 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_237_3_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_552
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40077 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_50_i7_2_lut_rep_277_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40169 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9567_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_553
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40144 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_274_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40169 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9564_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_554
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, LSR_dly;

  lut40062 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_291 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40170 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_288 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i_769 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40170 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0A2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_555 ( input B1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40047 \dds_gain_control/i1_2_lut_rep_330 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40171 \dds_gain_control/dac_state_0__bdd_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40171 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_556 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40172 \dds_gain_control/i6721_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40062 \dds_gain_control/i1_4_lut_adj_190 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0027 \dds_gain_control/ss1_temp_125 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40172 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCF11) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_557 ( input B1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40047 \dds_gain_control/i1_2_lut_adj_222 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40062 \dds_gain_control/i1_4_lut_adj_218 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_558 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40072 \adc_control/equal_44_i5_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40134 \adc_control/i9467_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_559 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40047 \adc_control/equal_45_i5_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40134 \adc_control/i9526_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_560 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40133 \adc_control/i9464_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40047 \adc_control/i1_2_lut_rep_292 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_561 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40160 \adc_control/i9479_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40052 \adc_control/i1_2_lut_rep_254_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_562 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40097 \adc_control/i9530_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40078 \adc_control/i9476_2_lut_rep_227_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_563 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40164 \adc_control/i1_3_lut_4_lut_adj_148 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40047 \adc_control/i2_2_lut_rep_295 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_564 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40173 \adc_control/i1_4_lut_rep_229 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40062 \adc_control/i1_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40173 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3331) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_565 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40019 \adc_control/equal_35_i5_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \adc_control/i9510_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_566 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40093 \adc_control/i9594_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40019 \adc_control/i1_2_lut_rep_299 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_567 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40174 \adc_control/i3641_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40145 \adc_control/i9547_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40174 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_568 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40057 \adc_control/i5328_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40097 \adc_control/i9584_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_569 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40047 \adc_control/equal_45_i6_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40136 \adc_control/i9487_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_570 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40057 \adc_control/i5504_2_lut_rep_263 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40175 \adc_control/i9461_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40175 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_571 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40176 \adc_control/i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40097 \adc_control/i3634_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40176 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_572 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40047 \adc_control/i1729_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40177 \adc_control/i1785_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40177 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC8C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_573 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40047 \adc_control/i1_2_lut_adj_151 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40062 \adc_control/i1_4_lut_adj_149 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_574 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40178 \dds_control_interface/i6470_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40062 \dds_control_interface/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40178 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAF11) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_575 ( input C1, B1, A1, D0, C0, B0, A0, M0, CE, LSR, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, M0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40179 \dds_control_interface/i1_2_lut_3_lut_adj_117 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40134 \dds_control_interface/i9544_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \reset_generator/out_n_23 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40179 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDFDF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_576 ( input D1, C1, B1, A1, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40167 \dds_control_interface/i4384_4_lut_rep_223 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40047 \dds_control_interface/i1_2_lut_adj_92 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_577 ( input B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40047 \dds_control_interface/i1_2_lut_adj_118 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40062 \dds_control_interface/i1_4_lut_adj_93 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_578 ( input B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40057 \dds_control_interface/i1_2_lut_adj_96 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40137 \dds_control_interface/i1_4_lut_adj_95 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_579 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40180 \dds_control_interface/i9528_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40063 \dds_control_interface/i1_2_lut_rep_266_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40180 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5C0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_580 ( input B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40072 \dds_control_interface/rstn_N_1256_I_0_2_lut_rep_309 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40181 \dds_control_interface/i297_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40181 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0E00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_581 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40133 \i2c_slave_top/registers/i9555_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40182 \i2c_slave_top/registers/i9552_3_lut_rep_282_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40182 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEF00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_582 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, LSR_dly;

  lut40183 \i2c_slave_top/registers/i1_2_lut_4_lut_adj_339 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40142 \i2c_slave_top/registers/i1_2_lut_4_lut_adj_338 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \i2c_slave_top/registers/addr_i_reg_i0_3479_3480_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40183 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_583 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40133 \i2c_slave_top/registers/i9517_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40127 \i2c_slave_top/registers/i9469_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_584
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40184 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_198_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40185 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_206_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40184 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40185 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F04) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_585
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40184 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_195_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40185 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_203_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_586
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40185 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_202_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40184 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_194_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_587
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40185 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_201_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40184 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__I_0_208_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_588
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40184 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_200_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40185 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_589
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40184 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_199_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40185 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_207_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_590
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40184 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_196_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40185 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_204_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_591
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40184 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_197_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40185 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_588_I_0_205_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_592 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40025 \adc_control/i9540_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \adc_control/i9495_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_593 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40025 \adc_control/i9537_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \adc_control/i9492_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_594 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40186 \i2c_slave_top/registers/state_0__bdd_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40187 \i2c_slave_top/registers/i1_2_lut_rep_256_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40186 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hADAD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40187 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_595 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40052 \i2c_slave_top/registers/i1_2_lut_3_lut_adj_344 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/i1_3_lut_rep_228_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_596
   ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40188 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_264_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40189 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40188 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40189 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_597
   ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40190 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9209_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40191 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_adj_249 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40190 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40191 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2F2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_598
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_265 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_260 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_599
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40031 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_272 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40031 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_262 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_600 ( input C1, B1, A1, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40189 \dds_gain_control/i1_4_lut_4_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40192 \dds_gain_control/i2_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40192 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB2B2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_gain_control_SLICE_601 ( input C1, B1, A1, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40193 \dds_gain_control/i9600_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40064 \dds_gain_control/i7815_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40193 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0909) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_602 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40160 \adc_control/i9482_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40160 \adc_control/i9498_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_603 ( input C1, B1, A1, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40194 \dds_control_interface/i1_2_lut_3_lut_3_lut_adj_127 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \dds_control_interface/i1_2_lut_3_lut_adj_126 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40194 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2323) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module dds_control_interface_SLICE_604 ( input D1, C1, B1, A1, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40062 \dds_control_interface/i1_4_lut_adj_91 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40047 \dds_control_interface/i1_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_605 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40057 \dds_gain_control/i1790_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 \dds_gain_control/i1_2_lut_adj_219 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_606 ( input D1, C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40062 \dds_gain_control/i1_4_lut_adj_205 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40047 \dds_gain_control/i1_2_lut_adj_206 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_607 ( input D1, C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40062 \dds_gain_control/i1_4_lut_adj_201 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40047 \dds_gain_control/i1_2_lut_adj_203 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_608 ( input D1, C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40062 \dds_gain_control/i1_4_lut_adj_192 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40047 \dds_gain_control/i1_2_lut_adj_193 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_609 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40062 \i2c_slave_top/registers/i1_4_lut_adj_355 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40062 \i2c_slave_top/registers/i1_4_lut_adj_356 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_610 ( input C1, B1, A1, C0, B0, A0, M0, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40066 \i2c_slave_top/registers/i3505_3_lut_rep_315 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \i2c_slave_top/registers/i3509_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0030 \i2c_slave_top/registers/addr_i_reg_i7_3507_3508_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_611 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40020 \dds_control_interface/test_mode_I_0_361_2_lut_rep_308 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 \dds_control_interface/transfer_completed_temp_d_I_0_2_lut_rep_307 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_612
   ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_adj_280 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_613 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40078 \adc_control/i1_3_lut_rep_259_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40025 \adc_control/i9582_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_614 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, LSR_dly;

  lut40183 \i2c_slave_top/registers/i1_2_lut_4_lut_adj_323 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40074 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_342 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \i2c_slave_top/registers/addr_i_reg_i5_3499_3500_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_615 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40018 \dds_gain_control/i5365_2_lut_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \dds_gain_control/i1_2_lut_rep_327 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_616
   ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40169 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9558_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40052 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_rep_316 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_617 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40043 \dds_control_interface/i4421_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40062 \dds_control_interface/i1_4_lut_adj_97 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_618 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40043 \dds_control_interface/i25_4_lut_adj_133 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40062 \dds_control_interface/i1_4_lut_adj_94 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_619
   ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_rep_257 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40195 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_255_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40195 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF4F4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_620 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40020 \i2c_slave_top/registers/i1_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40062 \i2c_slave_top/registers/i1_4_lut_adj_354 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_621 ( input A0, output F0 );
  wire   GNDI;

  lut40022 status_2__I_0_1_lut( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_622 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_979_i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_623 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40047 \i2c_slave_top/registers/i9523_2_lut_4_lut_2_lut_4_lut ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_624 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_954_i2_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_625 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_979_i2_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_626 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_954_i3_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_627 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_979_i3_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_628 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_954_i4_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_629 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_979_i4_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_630 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40188 \i2c_slave_top/registers/i1_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_631 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_949_i7_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_632 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40196 \i2c_slave_top/registers/i9341_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40196 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3A3A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_633 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_949_i6_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_634 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_954_i5_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_635 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_949_i5_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_636 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/i3953_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_637 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_949_i4_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_638 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_949_i3_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_639 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_949_i2_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_640 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_979_i5_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_641 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_949_i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_642 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_954_i6_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_643 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_979_i6_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_644 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_954_i7_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_645 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_979_i7_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_646 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_954_i8_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_647 ( input D0, C0, B0, A0, output F0 );

  lut40197 \i2c_slave_top/registers/i1_2_lut_4_lut_adj_324 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40197 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00CA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_648 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_979_i8_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_649 ( input D0, C0, B0, A0, output F0 );

  lut40074 \i2c_slave_top/registers/i1_2_lut_rep_247_3_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_650 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40047 \i2c_slave_top/registers/i1_2_lut_adj_336 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_651 ( input D0, C0, B0, A0, output F0 );

  lut40078 \i2c_slave_top/registers/i9455_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_652 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40052 \i2c_slave_top/registers/i9172_2_lut_rep_235_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_653 ( input D0, C0, B0, A0, output F0 );

  lut40134 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_341 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_654 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_971_i4_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_655 ( input C0, B0, A0, M0, CE, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40066 \i2c_slave_top/registers/mux_971_i3_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/static_control_i1 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_656 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40066 \i2c_slave_top/registers/mux_971_i2_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_657
   ( input B0, A0, output F0 );
  wire   GNDI;

  lut40057 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/spare_led2_n_c_bdd_2_lut_9691 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_658
   ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40187 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_3_lut_adj_251 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_659
   ( input B0, A0, output F0 );
  wire   GNDI;

  lut40018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2157_2_lut_rep_297 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_660
   ( input B0, A0, output F0 );
  wire   GNDI;

  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1220_2_lut_rep_298 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_661
   ( input B0, A0, output F0 );
  wire   GNDI;

  lut40018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_662
   ( input C0, B0, A0, M0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40131 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_adj_253 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i_752 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_663
   ( input B0, A0, output F0 );
  wire   GNDI;

  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_314 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_664
   ( input D0, C0, B0, A0, output F0 );

  lut40062 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9213_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_665
   ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40131 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_261_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_666
   ( input B0, A0, output F0 );
  wire   GNDI;

  lut40018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/o_data_valid_I_0_2_lut_rep_322 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_667
   ( input D0, C0, B0, A0, output F0 );

  lut40031 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_268 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_668
   ( input B0, A0, output F0 );
  wire   GNDI;

  lut40020 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_adj_282 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_669
   ( input D0, C0, B0, A0, output F0 );

  lut40198 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7812_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40198 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0031) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_670
   ( input B0, A0, output F0 );
  wire   GNDI;

  lut40057 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i5301_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_671
   ( input B0, A0, output F0 );
  wire   GNDI;

  lut40072 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i_rst_I_0_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_filter_sda_inst_SLICE_672 ( 
    input B0, A0, M0, CLK, output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40036 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2_I_0_2_lut ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3_15 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_filter_scl_inst_SLICE_673 ( 
    input B0, A0, M0, CLK, output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40036 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2_I_0_2_lut ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3_15 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_674 ( input D0, C0, B0, A0, output F0 );

  lut40177 \dds_gain_control/i1799_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_675 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40047 \dds_gain_control/i1_2_lut_adj_215 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_676 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40047 \dds_gain_control/i1_2_lut_adj_221 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_677 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40094 \dds_gain_control/i1_2_lut_3_lut_adj_223 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_678 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40020 \dds_gain_control/i1_2_lut_rep_329 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_679 ( input B0, A0, M0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40072 \dds_gain_control/state_3__I_0_146_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \dds_gain_control/data_valid_reset_129 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_gain_control_SLICE_680 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40018 \dds_gain_control/i272_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module reset_generator_SLICE_681 ( input B0, A0, M0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, LSR_NOTIN, M0_dly, CLK_dly, LSR_dly;

  lut40036 \reset_generator/in_d2_I_0_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \reset_generator/in_d3_22 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_682 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40057 \adc_control/i1_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_683 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40047 \adc_control/i1_2_lut_adj_150 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_684 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40020 \dds_control_interface/i1_2_lut_rep_290 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_685 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40072 \dds_control_interface/state_3__I_81_2_lut ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_686 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i25_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_687 ( input D0, C0, B0, A0, M0, CLK, 
    output F0, Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  lut40199 \dds_control_interface/i289_2_lut_rep_267_3_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0016 \dds_control_interface/transfer_completed_temp_d_289 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40199 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2220) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_688 ( input C0, B0, A0, M0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40191 \dds_control_interface/i1_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0016 \i2c_slave_top/registers/static_control_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_689 ( input B0, A0, M0, CE, CLK, output F0, 
    Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40020 \dds_control_interface/i296_1_lut_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \dds_control_interface/data_valid_reset_291 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_690 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i4408_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_691 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i4407_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_692 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40157 \dds_control_interface/i9608_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_693 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i25_4_lut_adj_123 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_694 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40020 \dds_control_interface/i1_2_lut_adj_124 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_695 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i25_4_lut_adj_130 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_696 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i4414_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_697 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i4423_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_698 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i25_4_lut_adj_135 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_699 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i4422_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_700 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i25_4_lut_adj_140 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_701 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i25_4_lut_adj_141 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_702 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i25_4_lut_adj_143 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_703 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i25_4_lut_adj_145 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dds_control_interface_SLICE_704 ( input D0, C0, B0, A0, output F0 );

  lut40043 \dds_control_interface/i25_4_lut_adj_147 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_705 ( output F0 );
  wire   GNDI;

  lut40056 i2( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module SLICE_706 ( output F0 );
  wire   GNDI;

  lut40200 i1( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module lut40200 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module seed_laser_disable ( input PADDO, output seed_laser_disable );
  wire   GNDI;

  xo2iobuf seed_laser_disable_pad( .I(PADDO), .T(GNDI), 
    .PAD(seed_laser_disable));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_laser_disable) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module seed_mod_ss ( input PADDO, output seed_mod_ss );
  wire   GNDI;

  xo2iobuf seed_mod_ss_pad( .I(PADDO), .T(GNDI), .PAD(seed_mod_ss));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_mod_ss) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_mod_sck ( input PADDO, output seed_mod_sck );
  wire   GNDI;

  xo2iobuf seed_mod_sck_pad( .I(PADDO), .T(GNDI), .PAD(seed_mod_sck));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_mod_sck) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_mod_mosi ( input PADDO, output seed_mod_mosi );
  wire   GNDI;

  xo2iobuf seed_mod_mosi_pad( .I(PADDO), .T(GNDI), .PAD(seed_mod_mosi));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_mod_mosi) = (0:0:0,0:0:0);
  endspecify

endmodule

module sda ( output PADDI, input PADDT, PADDO, inout sda );

  xo2iobuf0201 sda_pad( .I(PADDO), .T(PADDT), .Z(PADDI), .PAD(sda), .PADI(sda));

  specify
    (PADDT => sda) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => sda) = (0:0:0,0:0:0);
    (sda => PADDI) = (0:0:0,0:0:0);
    $width (posedge sda, 0:0:0);
    $width (negedge sda, 0:0:0);
  endspecify

endmodule

module xo2iobuf0201 ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module scl ( output PADDI, input PADDO, inout scl );
  wire   VCCI;

  xo2iobuf0202 scl_pad( .I(PADDO), .T(VCCI), .Z(PADDI), .PAD(scl), .PADI(scl));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => scl) = (0:0:0,0:0:0);
    (scl => PADDI) = (0:0:0,0:0:0);
    $width (posedge scl, 0:0:0);
    $width (negedge scl, 0:0:0);
  endspecify

endmodule

module xo2iobuf0202 ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module seed_laser_en_led_n ( input PADDO, output seed_laser_en_led_n );
  wire   GNDI;

  xo2iobuf seed_laser_en_led_n_pad( .I(PADDO), .T(GNDI), 
    .PAD(seed_laser_en_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_laser_en_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_adc_sck ( input PADDO, output seed_adc_sck );
  wire   GNDI;

  xo2iobuf seed_adc_sck_pad( .I(PADDO), .T(GNDI), .PAD(seed_adc_sck));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_adc_sck) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_adc_convert ( input PADDO, output seed_adc_convert );
  wire   GNDI;

  xo2iobuf seed_adc_convert_pad( .I(PADDO), .T(GNDI), .PAD(seed_adc_convert));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_adc_convert) = (0:0:0,0:0:0);
  endspecify

endmodule

module over_current_shutdown_n ( input PADDO, output over_current_shutdown_n );
  wire   GNDI;

  xo2iobuf over_current_shutdown_n_pad( .I(PADDO), .T(GNDI), 
    .PAD(over_current_shutdown_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => over_current_shutdown_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_dac_mosi ( input PADDO, output seed_dac_mosi );
  wire   GNDI;

  xo2iobuf seed_dac_mosi_pad( .I(PADDO), .T(GNDI), .PAD(seed_dac_mosi));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_dac_mosi) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_dac_ss ( input PADDO, output seed_dac_ss );
  wire   GNDI;

  xo2iobuf seed_dac_ss_pad( .I(PADDO), .T(GNDI), .PAD(seed_dac_ss));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_dac_ss) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_dac_sck ( input PADDO, output seed_dac_sck );
  wire   GNDI;

  xo2iobuf seed_dac_sck_pad( .I(PADDO), .T(GNDI), .PAD(seed_dac_sck));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_dac_sck) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_ldac_n ( input PADDO, output seed_ldac_n );
  wire   GNDI;

  xo2iobuf seed_ldac_n_pad( .I(PADDO), .T(GNDI), .PAD(seed_ldac_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_ldac_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_reset_n ( input PADDO, output seed_reset_n );
  wire   GNDI;

  xo2iobuf seed_reset_n_pad( .I(PADDO), .T(GNDI), .PAD(seed_reset_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_reset_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module heartbeat_n ( input PADDO, output heartbeat_n );
  wire   GNDI;

  xo2iobuf heartbeat_n_pad( .I(PADDO), .T(GNDI), .PAD(heartbeat_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => heartbeat_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module mcu_gpio ( input PADDO, output mcu_gpio );
  wire   GNDI;

  xo2iobuf mcu_gpio_pad( .I(PADDO), .T(GNDI), .PAD(mcu_gpio));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => mcu_gpio) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_spare1 ( input PADDO, output seed_spare1 );
  wire   GNDI;

  xo2iobuf seed_spare1_pad( .I(PADDO), .T(GNDI), .PAD(seed_spare1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_spare1) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_spare2 ( input PADDO, output seed_spare2 );
  wire   GNDI;

  xo2iobuf seed_spare2_pad( .I(PADDO), .T(GNDI), .PAD(seed_spare2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_spare2) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_spare3 ( input PADDO, output seed_spare3 );
  wire   GNDI;

  xo2iobuf seed_spare3_pad( .I(PADDO), .T(GNDI), .PAD(seed_spare3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_spare3) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_spare4 ( input PADDO, output seed_spare4 );
  wire   GNDI;

  xo2iobuf seed_spare4_pad( .I(PADDO), .T(GNDI), .PAD(seed_spare4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_spare4) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_gpio1 ( input PADDO, output seed_gpio1 );
  wire   GNDI;

  xo2iobuf seed_gpio1_pad( .I(PADDO), .T(GNDI), .PAD(seed_gpio1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_gpio1) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_gpio2 ( input PADDO, output seed_gpio2 );
  wire   GNDI;

  xo2iobuf seed_gpio2_pad( .I(PADDO), .T(GNDI), .PAD(seed_gpio2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_gpio2) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_gpio3 ( input PADDO, output seed_gpio3 );
  wire   GNDI;

  xo2iobuf seed_gpio3_pad( .I(PADDO), .T(GNDI), .PAD(seed_gpio3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_gpio3) = (0:0:0,0:0:0);
  endspecify

endmodule

module seed_gpio4 ( input PADDO, output seed_gpio4 );
  wire   GNDI;

  xo2iobuf seed_gpio4_pad( .I(PADDO), .T(GNDI), .PAD(seed_gpio4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => seed_gpio4) = (0:0:0,0:0:0);
  endspecify

endmodule

module spare_led1_n ( input PADDO, output spare_led1_n );
  wire   GNDI;

  xo2iobuf spare_led1_n_pad( .I(PADDO), .T(GNDI), .PAD(spare_led1_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => spare_led1_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module spare_led2_n ( input PADDO, output spare_led2_n );
  wire   GNDI;

  xo2iobuf spare_led2_n_pad( .I(PADDO), .T(GNDI), .PAD(spare_led2_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => spare_led2_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module rstn ( output PADDI, input rstn );

  xo2iobuf0203 rstn_pad( .Z(PADDI), .PAD(rstn));

  specify
    (rstn => PADDI) = (0:0:0,0:0:0);
    $width (posedge rstn, 0:0:0);
    $width (negedge rstn, 0:0:0);
  endspecify

endmodule

module xo2iobuf0203 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module system_reset_n ( output PADDI, input system_reset_n );

  xo2iobuf0203 system_reset_n_pad( .Z(PADDI), .PAD(system_reset_n));

  specify
    (system_reset_n => PADDI) = (0:0:0,0:0:0);
    $width (posedge system_reset_n, 0:0:0);
    $width (negedge system_reset_n, 0:0:0);
  endspecify

endmodule

module clk_10mhz ( output PADDI, input clk_10mhz );

  xo2iobuf0203 clk_10mhz_pad( .Z(PADDI), .PAD(clk_10mhz));

  specify
    (clk_10mhz => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk_10mhz, 0:0:0);
    $width (negedge clk_10mhz, 0:0:0);
  endspecify

endmodule

module seed_adc_sdo1 ( output PADDI, input seed_adc_sdo1 );

  xo2iobuf0203 seed_adc_sdo1_pad( .Z(PADDI), .PAD(seed_adc_sdo1));

  specify
    (seed_adc_sdo1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge seed_adc_sdo1, 0:0:0);
    $width (negedge seed_adc_sdo1, 0:0:0);
  endspecify

endmodule

module seed_adc_sdo2 ( output PADDI, input seed_adc_sdo2 );

  xo2iobuf0203 seed_adc_sdo2_pad( .Z(PADDI), .PAD(seed_adc_sdo2));

  specify
    (seed_adc_sdo2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge seed_adc_sdo2, 0:0:0);
    $width (negedge seed_adc_sdo2, 0:0:0);
  endspecify

endmodule

module seed_compared ( output PADDI, input seed_compared );

  xo2iobuf0203 seed_compared_pad( .Z(PADDI), .PAD(seed_compared));

  specify
    (seed_compared => PADDI) = (0:0:0,0:0:0);
    $width (posedge seed_compared, 0:0:0);
    $width (negedge seed_compared, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
